if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=J.type(t);return"function"!==n&&!J.isWindow(t)&&(!(1!==t.nodeType||!e)||("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t))}function i(t,e,n){if(J.isFunction(e))return J.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return J.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(st.test(e))return J.filter(e,t,n);e=J.filter(e,t)}return J.grep(t,function(t){return Y.call(e,t)>=0!==n})}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){var e=pt[t]={};return J.each(t.match(ft)||[],function(t,n){e[n]=!0}),e}function o(){Z.removeEventListener("DOMContentLoaded",o,!1),t.removeEventListener("load",o,!1),J.ready()}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+s.uid++}function u(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(_t,"-$1").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:xt.test(n)?J.parseJSON(n):n)}catch(t){}yt.set(t,e,n)}else n=void 0;return n}function c(){return!0}function l(){return!1}function h(){try{return Z.activeElement}catch(t){}}function d(t,e){return J.nodeName(t,"table")&&J.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function f(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function p(t){var e=Nt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function g(t,e){for(var n=0,i=t.length;n<i;n++)mt.set(t[n],"globalEval",!e||mt.get(e[n],"globalEval"))}function v(t,e){var n,i,r,a,o,s,u,c;if(1===e.nodeType){if(mt.hasData(t)&&(a=mt.access(t),o=mt.set(e,a),c=a.events)){delete o.handle,o.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)J.event.add(e,r,c[r][n])}yt.hasData(t)&&(s=yt.access(t),u=J.extend({},s),yt.set(e,u))}}function m(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&J.nodeName(t,e)?J.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&wt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function x(e,n){var i,r=J(n.createElement(e)).appendTo(n.body),a=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:J.css(r[0],"display");return r.detach(),a}function _(t){var e=Z,n=jt[t];return n||(n=x(t,e),"none"!==n&&n||(Ft=(Ft||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Ft[0].contentDocument,e.write(),e.close(),n=x(t,e),Ft.detach()),jt[t]=n),n}function b(t,e,n){var i,r,a,o,s=t.style;return n=n||Xt(t),n&&(o=n.getPropertyValue(e)||n[e]),n&&(""!==o||J.contains(t.ownerDocument,t)||(o=J.style(t,e)),zt.test(o)&&Ht.test(e)&&(i=s.width,r=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=i,s.minWidth=r,s.maxWidth=a)),void 0!==o?o+"":o}function S(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function T(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),i=e,r=Wt.length;r--;)if(e=Wt[r]+n,e in t)return e;return i}function w(t,e,n){var i=Bt.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function A(t,e,n,i,r){for(var a=n===(i?"border":"content")?4:"width"===e?1:0,o=0;a<4;a+=2)"margin"===n&&(o+=J.css(t,n+St[a],!0,r)),i?("content"===n&&(o-=J.css(t,"padding"+St[a],!0,r)),"margin"!==n&&(o-=J.css(t,"border"+St[a]+"Width",!0,r))):(o+=J.css(t,"padding"+St[a],!0,r),"padding"!==n&&(o+=J.css(t,"border"+St[a]+"Width",!0,r)));return o}function C(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,a=Xt(t),o="border-box"===J.css(t,"boxSizing",!1,a);if(r<=0||null==r){if(r=b(t,e,a),(r<0||null==r)&&(r=t.style[e]),zt.test(r))return r;i=o&&(Q.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+A(t,e,n||(o?"border":"content"),i,a)+"px"}function E(t,e){for(var n,i,r,a=[],o=0,s=t.length;o<s;o++)i=t[o],i.style&&(a[o]=mt.get(i,"olddisplay"),n=i.style.display,e?(a[o]||"none"!==n||(i.style.display=""),""===i.style.display&&Tt(i)&&(a[o]=mt.access(i,"olddisplay",_(i.nodeName)))):(r=Tt(i),"none"===n&&r||mt.set(i,"olddisplay",r?n:J.css(i,"display"))));for(o=0;o<s;o++)i=t[o],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?a[o]||"":"none"));return t}function P(t,e,n,i,r){return new P.prototype.init(t,e,n,i,r)}function L(){return setTimeout(function(){Qt=void 0}),Qt=J.now()}function M(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)n=St[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function k(t,e,n){for(var i,r=(ne[e]||[]).concat(ne["*"]),a=0,o=r.length;a<o;a++)if(i=r[a].call(n,e,t))return i}function I(t,e,n){var i,r,a,o,s,u,c,l,h=this,d={},f=t.style,p=t.nodeType&&Tt(t),g=mt.get(t,"fxshow");n.queue||(s=J._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,J.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],c=J.css(t,"display"),l="none"===c?mt.get(t,"olddisplay")||_(t.nodeName):c,"inline"===l&&"none"===J.css(t,"float")&&(f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],Kt.exec(r)){if(delete e[i],a=a||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;p=!0}d[i]=g&&g[i]||J.style(t,i)}else c=void 0;if(J.isEmptyObject(d))"inline"===("none"===c?_(t.nodeName):c)&&(f.display=c);else{g?"hidden"in g&&(p=g.hidden):g=mt.access(t,"fxshow",{}),a&&(g.hidden=!p),p?J(t).show():h.done(function(){J(t).hide()}),h.done(function(){var e;mt.remove(t,"fxshow");for(e in d)J.style(t,e,d[e])});for(i in d)o=k(p?g[i]:0,i,h),i in g||(g[i]=o.start,p&&(o.end=o.start,o.start="width"===i||"height"===i?1:0))}}function V(t,e){var n,i,r,a,o;for(n in t)if(i=J.camelCase(n),r=e[i],a=t[n],J.isArray(a)&&(r=a[1],a=t[n]=a[0]),n!==i&&(t[i]=a,delete t[n]),o=J.cssHooks[i],o&&"expand"in o){a=o.expand(a),delete t[i];for(n in a)n in t||(t[n]=a[n],e[n]=r)}else e[i]=r}function D(t,e,n){var i,r,a=0,o=ee.length,s=J.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=Qt||L(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,a=1-i,o=0,u=c.tweens.length;o<u;o++)c.tweens[o].run(a);return s.notifyWith(t,[c,a,n]),a<1&&u?n:(s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:J.extend({},e),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Qt||L(),duration:n.duration,tweens:[],createTween:function(e,n){var i=J.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?s.resolveWith(t,[c,e]):s.rejectWith(t,[c,e]),this}}),l=c.props;for(V(l,c.opts.specialEasing);a<o;a++)if(i=ee[a].call(c,t,l,c.opts))return i;return J.map(l,k,c),J.isFunction(c.opts.start)&&c.opts.start.call(t,c),J.fx.timer(J.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function R(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,a=e.toLowerCase().match(ft)||[];if(J.isFunction(n))for(;i=a[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function N(t,e,n,i){function r(s){var u;return a[s]=!0,J.each(t[s]||[],function(t,s){var c=s(e,n,i);return"string"!=typeof c||o||a[c]?o?!(u=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),u}var a={},o=t===xe;return r(e.dataTypes[0])||!a["*"]&&r("*")}function O(t,e){var n,i,r=J.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&J.extend(!0,t,i),t}function G(t,e,n){for(var i,r,a,o,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){u.unshift(r);break}if(u[0]in n)a=u[0];else{for(r in n){if(!u[0]||t.converters[r+" "+u[0]]){a=r;break}o||(o=r)}a=a||o}if(a)return a!==u[0]&&u.unshift(a),n[a]}function F(t,e,n,i){var r,a,o,s,u,c={},l=t.dataTypes.slice();if(l[1])for(o in t.converters)c[o.toLowerCase()]=t.converters[o];for(a=l.shift();a;)if(t.responseFields[a]&&(n[t.responseFields[a]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=a,a=l.shift())if("*"===a)a=u;else if("*"!==u&&u!==a){if(o=c[u+" "+a]||c["* "+a],!o)for(r in c)if(s=r.split(" "),s[1]===a&&(o=c[u+" "+s[0]]||c["* "+s[0]])){o===!0?o=c[r]:c[r]!==!0&&(a=s[0],l.unshift(s[1]));break}if(o!==!0)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+u+" to "+a}}}return{state:"success",data:e}}function j(t,e,n,i){var r;if(J.isArray(e))J.each(e,function(e,r){n||we.test(t)?i(t,r):j(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==J.type(e))i(t,e);else for(r in e)j(t+"["+r+"]",e[r],n,i)}function H(t){return J.isWindow(t)?t:9===t.nodeType&&t.defaultView}var z=[],X=z.slice,$=z.concat,B=z.push,Y=z.indexOf,U={},q=U.toString,W=U.hasOwnProperty,Q={},Z=t.document,K="2.1.4",J=function(t,e){return new J.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,it=function(t,e){return e.toUpperCase()};J.fn=J.prototype={jquery:K,constructor:J,selector:"",length:0,toArray:function(){return X.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:X.call(this)},pushStack:function(t){var e=J.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return J.each(this,t,e)},map:function(t){return this.pushStack(J.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(X.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:z.sort,splice:z.splice},J.extend=J.fn.extend=function(){var t,e,n,i,r,a,o=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[s]||{},s++),"object"==typeof o||J.isFunction(o)||(o={}),s===u&&(o=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)n=o[e],i=t[e],o!==i&&(c&&i&&(J.isPlainObject(i)||(r=J.isArray(i)))?(r?(r=!1,a=n&&J.isArray(n)?n:[]):a=n&&J.isPlainObject(n)?n:{},o[e]=J.extend(c,a,i)):void 0!==i&&(o[e]=i));return o},J.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===J.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!J.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"===J.type(t)&&!t.nodeType&&!J.isWindow(t)&&!(t.constructor&&!W.call(t.constructor.prototype,"isPrototypeOf"))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?U[q.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=J.trim(t),t&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,it)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,a=0,o=t.length,s=n(t);if(i){if(s)for(;a<o&&(r=e.apply(t[a],i),r!==!1);a++);else for(a in t)if(r=e.apply(t[a],i),r===!1)break}else if(s)for(;a<o&&(r=e.call(t[a],a,t[a]),r!==!1);a++);else for(a in t)if(r=e.call(t[a],a,t[a]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?J.merge(i,"string"==typeof t?[t]:t):B.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Y.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],a=0,o=t.length,s=!n;a<o;a++)i=!e(t[a],a),i!==s&&r.push(t[a]);return r},map:function(t,e,i){var r,a=0,o=t.length,s=n(t),u=[];if(s)for(;a<o;a++)r=e(t[a],a,i),null!=r&&u.push(r);else for(a in t)r=e(t[a],a,i),null!=r&&u.push(r);return $.apply([],u)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),J.isFunction(t))return i=X.call(arguments,2),r=function(){return t.apply(e||this,i.concat(X.call(arguments)))},r.guid=t.guid=t.guid||J.guid++,r},now:Date.now,support:Q}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){U["[object "+e+"]"]=e.toLowerCase()});var rt=function(t){function e(t,e,n,i){var r,a,o,s,u,c,h,f,p,g;if((e?e.ownerDocument||e:j)!==I&&k(e),e=e||I,n=n||[],s=e.nodeType,"string"!=typeof t||!t||1!==s&&9!==s&&11!==s)return n;if(!i&&D){if(11!==s&&(r=yt.exec(t)))if(o=r[1]){if(9===s){if(a=e.getElementById(o),!a||!a.parentNode)return n;if(a.id===o)return n.push(a),n}else if(e.ownerDocument&&(a=e.ownerDocument.getElementById(o))&&G(e,a)&&a.id===o)return n.push(a),n}else{if(r[2])return K.apply(n,e.getElementsByTagName(t)),n;if((o=r[3])&&b.getElementsByClassName)return K.apply(n,e.getElementsByClassName(o)),n}if(b.qsa&&(!R||!R.test(t))){if(f=h=F,p=e,g=1!==s&&t,1===s&&"object"!==e.nodeName.toLowerCase()){for(c=A(t),(h=e.getAttribute("id"))?f=h.replace(_t,"\\$&"):e.setAttribute("id",f),f="[id='"+f+"'] ",u=c.length;u--;)c[u]=f+d(c[u]);p=xt.test(t)&&l(e.parentNode)||e,g=c.join(",")}if(g)try{return K.apply(n,p.querySelectorAll(g)),n}catch(t){}finally{h||e.removeAttribute("id")}}}return E(t.replace(ut,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>S.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[F]=!0,t}function r(t){var e=I.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function a(t,e){for(var n=t.split("|"),i=t.length;i--;)S.attrHandle[n[i]]=e}function o(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||U)-(~t.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var r,a=t([],n.length,e),o=a.length;o--;)n[r=a[o]]&&(n[r]=!(i[r]=n[r]))})})}function l(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function d(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=n&&"parentNode"===i,a=z++;return e.first?function(e,n,a){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,a)}:function(e,n,o){var s,u,c=[H,a];if(o){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,o))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(u=e[F]||(e[F]={}),(s=u[i])&&s[0]===H&&s[1]===a)return c[2]=s[2];if(u[i]=c,c[2]=t(e,n,o))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var r=0,a=n.length;r<a;r++)e(t,n[r],i);return i}function v(t,e,n,i,r){for(var a,o=[],s=0,u=t.length,c=null!=e;s<u;s++)(a=t[s])&&(n&&!n(a,i,r)||(o.push(a),c&&e.push(s)));return o}function m(t,e,n,r,a,o){return r&&!r[F]&&(r=m(r)),a&&!a[F]&&(a=m(a,o)),i(function(i,o,s,u){var c,l,h,d=[],f=[],p=o.length,m=i||g(e||"*",s.nodeType?[s]:s,[]),y=!t||!i&&e?m:v(m,d,t,s,u),x=n?a||(i?t:p||r)?[]:o:y;if(n&&n(y,x,s,u),r)for(c=v(x,f),r(c,[],s,u),l=c.length;l--;)(h=c[l])&&(x[f[l]]=!(y[f[l]]=h));if(i){if(a||t){if(a){for(c=[],l=x.length;l--;)(h=x[l])&&c.push(y[l]=h);a(null,x=[],c,u)}for(l=x.length;l--;)(h=x[l])&&(c=a?tt(i,h):d[l])>-1&&(i[c]=!(o[c]=h))}}else x=v(x===o?x.splice(p,x.length):x),a?a(null,o,x,u):K.apply(o,x)})}function y(t){for(var e,n,i,r=t.length,a=S.relative[t[0].type],o=a||S.relative[" "],s=a?1:0,u=f(function(t){return t===e},o,!0),c=f(function(t){return tt(e,t)>-1},o,!0),l=[function(t,n,i){var r=!a&&(i||n!==P)||((e=n).nodeType?u(t,n,i):c(t,n,i));return e=null,r}];s<r;s++)if(n=S.relative[t[s].type])l=[f(p(l),n)];else{if(n=S.filter[t[s].type].apply(null,t[s].matches),n[F]){for(i=++s;i<r&&!S.relative[t[i].type];i++);return m(s>1&&p(l),s>1&&d(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ut,"$1"),n,s<i&&y(t.slice(s,i)),i<r&&y(t=t.slice(i)),i<r&&d(t))}l.push(n)}return p(l)}function x(t,n){var r=n.length>0,a=t.length>0,o=function(i,o,s,u,c){var l,h,d,f=0,p="0",g=i&&[],m=[],y=P,x=i||a&&S.find.TAG("*",c),_=H+=null==y?1:Math.random()||.1,b=x.length;for(c&&(P=o!==I&&o);p!==b&&null!=(l=x[p]);p++){if(a&&l){for(h=0;d=t[h++];)if(d(l,o,s)){u.push(l);break}c&&(H=_)}r&&((l=!d&&l)&&f--,i&&g.push(l))}if(f+=p,r&&p!==f){for(h=0;d=n[h++];)d(g,m,o,s);if(i){if(f>0)for(;p--;)g[p]||m[p]||(m[p]=Q.call(u));m=v(m)}K.apply(u,m),c&&!i&&m.length>0&&f+n.length>1&&e.uniqueSort(u)}return c&&(H=_,P=y),g};return r?i(o):o}var _,b,S,T,w,A,C,E,P,L,M,k,I,V,D,R,N,O,G,F="sizzle"+1*new Date,j=t.document,H=0,z=0,X=n(),$=n(),B=n(),Y=function(t,e){return t===e&&(M=!0),0},U=1<<31,q={}.hasOwnProperty,W=[],Q=W.pop,Z=W.push,K=W.push,J=W.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=it.replace("w","w#"),at="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+at+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),ut=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),lt=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ht=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),dt=new RegExp(ot),ft=new RegExp("^"+rt+"$"),pt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it.replace("w","w*")+")"),ATTR:new RegExp("^"+at),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xt=/[+~]/,_t=/'|\\/g,bt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),St=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Tt=function(){k()};try{K.apply(W=J.call(j.childNodes),j.childNodes),W[j.childNodes.length].nodeType}catch(t){K={apply:W.length?function(t,e){Z.apply(t,J.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},w=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},k=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:j;return i!==I&&9===i.nodeType&&i.documentElement?(I=i,V=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Tt,!1):n.attachEvent&&n.attachEvent("onunload",Tt)),D=!w(i),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=mt.test(i.getElementsByClassName),b.getById=r(function(t){return V.appendChild(t).id=F,!i.getElementsByName||!i.getElementsByName(F).length}),b.getById?(S.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&D){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},S.filter.ID=function(t){var e=t.replace(bt,St);return function(t){return t.getAttribute("id")===e}}):(delete S.find.ID,S.filter.ID=function(t){var e=t.replace(bt,St);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),S.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,a=e.getElementsByTagName(t);if("*"===t){for(;n=a[r++];)1===n.nodeType&&i.push(n);return i}return a},S.find.CLASS=b.getElementsByClassName&&function(t,e){if(D)return e.getElementsByClassName(t)},N=[],R=[],(b.qsa=mt.test(i.querySelectorAll))&&(r(function(t){V.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&R.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||R.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+F+"-]").length||R.push("~="),t.querySelectorAll(":checked").length||R.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||R.push(".#.+[+~]")}),r(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&R.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||R.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),R.push(",.*:")})),(b.matchesSelector=mt.test(O=V.matches||V.webkitMatchesSelector||V.mozMatchesSelector||V.oMatchesSelector||V.msMatchesSelector))&&r(function(t){b.disconnectedMatch=O.call(t,"div"),O.call(t,"[s!='']:x"),N.push("!=",ot)}),R=R.length&&new RegExp(R.join("|")),N=N.length&&new RegExp(N.join("|")),e=mt.test(V.compareDocumentPosition),G=e||mt.test(V.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Y=e?function(t,e){if(t===e)return M=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===j&&G(j,t)?-1:e===i||e.ownerDocument===j&&G(j,e)?1:L?tt(L,t)-tt(L,e):0:4&n?-1:1)}:function(t,e){if(t===e)return M=!0,0;var n,r=0,a=t.parentNode,s=e.parentNode,u=[t],c=[e];if(!a||!s)return t===i?-1:e===i?1:a?-1:s?1:L?tt(L,t)-tt(L,e):0;if(a===s)return o(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;u[r]===c[r];)r++;return r?o(u[r],c[r]):u[r]===j?-1:c[r]===j?1:0},i):I},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==I&&k(t),n=n.replace(ht,"='$1']"),b.matchesSelector&&D&&(!N||!N.test(n))&&(!R||!R.test(n)))try{var i=O.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,I,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==I&&k(t),G(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==I&&k(t);var n=S.attrHandle[e.toLowerCase()],i=n&&q.call(S.attrHandle,e.toLowerCase())?n(t,e,!D):void 0;return void 0!==i?i:b.attributes||!D?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(M=!b.detectDuplicates,L=!b.sortStable&&t.slice(0),t.sort(Y),M){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return L=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},S=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,St),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,St),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&dt.test(n)&&(e=A(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,St).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=X[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&X(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var a=e.attr(r,t);return null==a?"!="===n:!n||(a+="","="===n?a===i:"!="===n?a!==i:"^="===n?i&&0===a.indexOf(i):"*="===n?i&&a.indexOf(i)>-1:"$="===n?i&&a.slice(-i.length)===i:"~="===n?(" "+a.replace(st," ")+" ").indexOf(i)>-1:"|="===n&&(a===i||a.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var a="nth"!==t.slice(0,3),o="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var c,l,h,d,f,p,g=a!==o?"nextSibling":"previousSibling",v=e.parentNode,m=s&&e.nodeName.toLowerCase(),y=!u&&!s;if(v){if(a){for(;g;){for(h=e;h=h[g];)if(s?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[o?v.firstChild:v.lastChild],o&&y){for(l=v[F]||(v[F]={}),c=l[t]||[],f=c[0]===H&&c[1],d=c[0]===H&&c[2],h=f&&v.childNodes[f];h=++f&&h&&h[g]||(d=f=0)||p.pop();)if(1===h.nodeType&&++d&&h===e){l[t]=[H,f,d];break}}else if(y&&(c=(e[F]||(e[F]={}))[t])&&c[0]===H)d=c[1];else for(;(h=++f&&h&&h[g]||(d=f=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++d||(y&&((h[F]||(h[F]={}))[t]=[H,d]),h!==e)););return d-=r,d===i||d%i===0&&d/i>=0}}},PSEUDO:function(t,n){var r,a=S.pseudos[t]||S.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return a[F]?a(n):a.length>1?(r=[t,t,"",n],S.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=a(t,n),o=r.length;o--;)i=tt(t,r[o]),t[i]=!(e[i]=r[o])}):function(t){return a(t,0,r)}):a}},pseudos:{not:i(function(t){var e=[],n=[],r=C(t.replace(ut,"$1"));return r[F]?i(function(t,e,n,i){for(var a,o=r(t,null,i,[]),s=t.length;s--;)(a=o[s])&&(t[s]=!(e[s]=a))}):function(t,i,a){return e[0]=t,r(e,null,a,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(bt,St),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,St).toLowerCase(),function(e){var n;do if(n=D?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===V},focus:function(t){return t===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!S.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},S.pseudos.nth=S.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[_]=s(_);for(_ in{submit:!0,reset:!0})S.pseudos[_]=u(_);return h.prototype=S.filters=S.pseudos,S.setFilters=new h,A=e.tokenize=function(t,n){var i,r,a,o,s,u,c,l=$[t+" "];if(l)return n?0:l.slice(0);for(s=t,u=[],c=S.preFilter;s;){i&&!(r=ct.exec(s))||(r&&(s=s.slice(r[0].length)||s),u.push(a=[])),i=!1,(r=lt.exec(s))&&(i=r.shift(),a.push({value:i,type:r[0].replace(ut," ")}),s=s.slice(i.length));for(o in S.filter)!(r=pt[o].exec(s))||c[o]&&!(r=c[o](r))||(i=r.shift(),a.push({value:i,type:o,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?e.error(t):$(t,u).slice(0)},C=e.compile=function(t,e){var n,i=[],r=[],a=B[t+" "];if(!a){for(e||(e=A(t)),n=e.length;n--;)a=y(e[n]),a[F]?i.push(a):r.push(a);a=B(t,x(r,i)),a.selector=t}return a},E=e.select=function(t,e,n,i){var r,a,o,s,u,c="function"==typeof t&&t,h=!i&&A(t=c.selector||t);if(n=n||[],1===h.length){if(a=h[0]=h[0].slice(0),a.length>2&&"ID"===(o=a[0]).type&&b.getById&&9===e.nodeType&&D&&S.relative[a[1].type]){if(e=(S.find.ID(o.matches[0].replace(bt,St),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(a.shift().value.length)}for(r=pt.needsContext.test(t)?0:a.length;r--&&(o=a[r],!S.relative[s=o.type]);)if((u=S.find[s])&&(i=u(o.matches[0].replace(bt,St),xt.test(a[0].type)&&l(e.parentNode)||e))){if(a.splice(r,1),t=i.length&&d(a),!t)return K.apply(n,i),n;break}}return(c||C(t,h))(i,e,!D,n,xt.test(t)&&l(e.parentNode)||e),n},b.sortStable=F.split("").sort(Y).join("")===F,b.detectDuplicates=!!M,k(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(I.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||a("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||a("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||a(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);J.find=rt,J.expr=rt.selectors,J.expr[":"]=J.expr.pseudos,J.unique=rt.uniqueSort,J.text=rt.getText,J.isXMLDoc=rt.isXML,J.contains=rt.contains;var at=J.expr.match.needsContext,ot=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,st=/^.[^:#\[\.,]*$/;J.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?J.find.matchesSelector(i,t)?[i]:[]:J.find.matches(t,J.grep(e,function(t){return 1===t.nodeType}))},J.fn.extend({find:function(t){var e,n=this.length,i=[],r=this;if("string"!=typeof t)return this.pushStack(J(t).filter(function(){
for(e=0;e<n;e++)if(J.contains(r[e],this))return!0}));for(e=0;e<n;e++)J.find(t,r[e],i);return i=this.pushStack(n>1?J.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&at.test(t)?J(t):t||[],!1).length}});var ut,ct=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,lt=J.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ct.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ut).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof J?e[0]:e,J.merge(this,J.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),ot.test(n[1])&&J.isPlainObject(e))for(n in e)J.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return i=Z.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):J.isFunction(t)?"undefined"!=typeof ut.ready?ut.ready(t):t(J):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),J.makeArray(t,this))};lt.prototype=J.fn,ut=J(Z);var ht=/^(?:parents|prev(?:Until|All))/,dt={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&J(t).is(n))break;i.push(t)}return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),J.fn.extend({has:function(t){var e=J(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(J.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,a=[],o=at.test(t)||"string"!=typeof t?J(t,e||this.context):0;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,t))){a.push(n);break}return this.pushStack(a.length>1?J.unique(a):a)},index:function(t){return t?"string"==typeof t?Y.call(J(t),this[0]):Y.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(J.unique(J.merge(this.get(),J(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),J.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return J.dir(t,"parentNode")},parentsUntil:function(t,e,n){return J.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return J.dir(t,"nextSibling")},prevAll:function(t){return J.dir(t,"previousSibling")},nextUntil:function(t,e,n){return J.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return J.dir(t,"previousSibling",n)},siblings:function(t){return J.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return J.sibling(t.firstChild)},contents:function(t){return t.contentDocument||J.merge([],t.childNodes)}},function(t,e){J.fn[t]=function(n,i){var r=J.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=J.filter(i,r)),this.length>1&&(dt[t]||J.unique(r),ht.test(t)&&r.reverse()),this.pushStack(r)}});var ft=/\S+/g,pt={};J.Callbacks=function(t){t="string"==typeof t?pt[t]||a(t):J.extend({},t);var e,n,i,r,o,s,u=[],c=!t.once&&[],l=function(a){for(e=t.memory&&a,n=!0,s=r||0,r=0,o=u.length,i=!0;u&&s<o;s++)if(u[s].apply(a[0],a[1])===!1&&t.stopOnFalse){e=!1;break}i=!1,u&&(c?c.length&&l(c.shift()):e?u=[]:h.disable())},h={add:function(){if(u){var n=u.length;!function e(n){J.each(n,function(n,i){var r=J.type(i);"function"===r?t.unique&&h.has(i)||u.push(i):i&&i.length&&"string"!==r&&e(i)})}(arguments),i?o=u.length:e&&(r=n,l(e))}return this},remove:function(){return u&&J.each(arguments,function(t,e){for(var n;(n=J.inArray(e,u,n))>-1;)u.splice(n,1),i&&(n<=o&&o--,n<=s&&s--)}),this},has:function(t){return t?J.inArray(t,u)>-1:!(!u||!u.length)},empty:function(){return u=[],o=0,this},disable:function(){return u=c=e=void 0,this},disabled:function(){return!u},lock:function(){return c=void 0,e||h.disable(),this},locked:function(){return!c},fireWith:function(t,e){return!u||n&&!c||(e=e||[],e=[t,e.slice?e.slice():e],i?c.push(e):l(e)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},J.extend({Deferred:function(t){var e=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return J.Deferred(function(n){J.each(e,function(e,a){var o=J.isFunction(t[e])&&t[e];r[a[1]](function(){var t=o&&o.apply(this,arguments);t&&J.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a[0]+"With"](this===i?n.promise():this,o?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?J.extend(t,i):i}},r={};return i.pipe=i.then,J.each(e,function(t,a){var o=a[2],s=a[3];i[a[1]]=o.add,s&&o.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),r[a[0]]=function(){return r[a[0]+"With"](this===r?i:this,arguments),this},r[a[0]+"With"]=o.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,a=X.call(arguments),o=a.length,s=1!==o||t&&J.isFunction(t.promise)?o:0,u=1===s?t:J.Deferred(),c=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?X.call(arguments):r,i===e?u.notifyWith(n,i):--s||u.resolveWith(n,i)}};if(o>1)for(e=new Array(o),n=new Array(o),i=new Array(o);r<o;r++)a[r]&&J.isFunction(a[r].promise)?a[r].promise().done(c(r,i,a)).fail(u.reject).progress(c(r,n,e)):--s;return s||u.resolveWith(i,a),u.promise()}});var gt;J.fn.ready=function(t){return J.ready.promise().done(t),this},J.extend({isReady:!1,readyWait:1,holdReady:function(t){t?J.readyWait++:J.ready(!0)},ready:function(t){(t===!0?--J.readyWait:J.isReady)||(J.isReady=!0,t!==!0&&--J.readyWait>0||(gt.resolveWith(Z,[J]),J.fn.triggerHandler&&(J(Z).triggerHandler("ready"),J(Z).off("ready"))))}}),J.ready.promise=function(e){return gt||(gt=J.Deferred(),"complete"===Z.readyState?setTimeout(J.ready):(Z.addEventListener("DOMContentLoaded",o,!1),t.addEventListener("load",o,!1))),gt.promise(e)},J.ready.promise();var vt=J.access=function(t,e,n,i,r,a,o){var s=0,u=t.length,c=null==n;if("object"===J.type(n)){r=!0;for(s in n)J.access(t,e,s,n[s],!0,a,o)}else if(void 0!==i&&(r=!0,J.isFunction(i)||(o=!0),c&&(o?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(J(t),n)})),e))for(;s<u;s++)e(t[s],n,o?i:i.call(t[s],s,e(t[s],n)));return r?t:c?e.call(t):u?e(t[0],n):a};J.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},s.uid=1,s.accepts=J.acceptData,s.prototype={key:function(t){if(!s.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=s.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(i){e[this.expando]=n,J.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var i,r=this.key(t),a=this.cache[r];if("string"==typeof e)a[e]=n;else if(J.isEmptyObject(a))J.extend(this.cache[r],e);else for(i in e)a[i]=e[i];return a},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,J.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,r,a=this.key(t),o=this.cache[a];if(void 0===e)this.cache[a]={};else{J.isArray(e)?i=e.concat(e.map(J.camelCase)):(r=J.camelCase(e),e in o?i=[e,r]:(i=r,i=i in o?[i]:i.match(ft)||[])),n=i.length;for(;n--;)delete o[i[n]]}},hasData:function(t){return!J.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var mt=new s,yt=new s,xt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,_t=/([A-Z])/g;J.extend({hasData:function(t){return yt.hasData(t)||mt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return mt.access(t,e,n)},_removeData:function(t,e){mt.remove(t,e)}}),J.fn.extend({data:function(t,e){var n,i,r,a=this[0],o=a&&a.attributes;if(void 0===t){if(this.length&&(r=yt.get(a),1===a.nodeType&&!mt.get(a,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&(i=o[n].name,0===i.indexOf("data-")&&(i=J.camelCase(i.slice(5)),u(a,i,r[i])));mt.set(a,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){yt.set(this,t)}):vt(this,function(e){var n,i=J.camelCase(t);if(a&&void 0===e){if(n=yt.get(a,t),void 0!==n)return n;if(n=yt.get(a,i),void 0!==n)return n;if(n=u(a,i,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,i);yt.set(this,i,e),t.indexOf("-")!==-1&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),J.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=mt.get(t,e),n&&(!i||J.isArray(n)?i=mt.access(t,e,J.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=J.queue(t,e),i=n.length,r=n.shift(),a=J._queueHooks(t,e),o=function(){J.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete a.stop,r.call(t,o,a)),!i&&a&&a.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return mt.get(t,n)||mt.access(t,n,{empty:J.Callbacks("once memory").add(function(){mt.remove(t,[e+"queue",n])})})}}),J.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?J.queue(this[0],t):void 0===e?this:this.each(function(){var n=J.queue(this,t,e);J._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&J.dequeue(this,t)})},dequeue:function(t){return this.each(function(){J.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=J.Deferred(),a=this,o=this.length,s=function(){--i||r.resolveWith(a,[a])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)n=mt.get(a[o],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(e)}});var bt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,St=["Top","Right","Bottom","Left"],Tt=function(t,e){return t=e||t,"none"===J.css(t,"display")||!J.contains(t.ownerDocument,t)},wt=/^(?:checkbox|radio)$/i;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var At="undefined";Q.focusinBubbles="onfocusin"in t;var Ct=/^key/,Et=/^(?:mouse|pointer|contextmenu)|click/,Pt=/^(?:focusinfocus|focusoutblur)$/,Lt=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(t,e,n,i,r){var a,o,s,u,c,l,h,d,f,p,g,v=mt.get(t);if(v)for(n.handler&&(a=n,n=a.handler,r=a.selector),n.guid||(n.guid=J.guid++),(u=v.events)||(u=v.events={}),(o=v.handle)||(o=v.handle=function(e){return typeof J!==At&&J.event.triggered!==e.type?J.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ft)||[""],c=e.length;c--;)s=Lt.exec(e[c])||[],f=g=s[1],p=(s[2]||"").split(".").sort(),f&&(h=J.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=J.event.special[f]||{},l=J.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&J.expr.match.needsContext.test(r),namespace:p.join(".")},a),(d=u[f])||(d=u[f]=[],d.delegateCount=0,h.setup&&h.setup.call(t,i,p,o)!==!1||t.addEventListener&&t.addEventListener(f,o,!1)),h.add&&(h.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,l):d.push(l),J.event.global[f]=!0)},remove:function(t,e,n,i,r){var a,o,s,u,c,l,h,d,f,p,g,v=mt.hasData(t)&&mt.get(t);if(v&&(u=v.events)){for(e=(e||"").match(ft)||[""],c=e.length;c--;)if(s=Lt.exec(e[c])||[],f=g=s[1],p=(s[2]||"").split(".").sort(),f){for(h=J.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,d=u[f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=d.length;a--;)l=d[a],!r&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(d.splice(a,1),l.selector&&d.delegateCount--,h.remove&&h.remove.call(t,l));o&&!d.length&&(h.teardown&&h.teardown.call(t,p,v.handle)!==!1||J.removeEvent(t,f,v.handle),delete u[f])}else for(f in u)J.event.remove(t,f+e[c],n,i,!0);J.isEmptyObject(u)&&(delete v.handle,mt.remove(t,"events"))}},trigger:function(e,n,i,r){var a,o,s,u,c,l,h,d=[i||Z],f=W.call(e,"type")?e.type:e,p=W.call(e,"namespace")?e.namespace.split("."):[];if(o=s=i=i||Z,3!==i.nodeType&&8!==i.nodeType&&!Pt.test(f+J.event.triggered)&&(f.indexOf(".")>=0&&(p=f.split("."),f=p.shift(),p.sort()),c=f.indexOf(":")<0&&"on"+f,e=e[J.expando]?e:new J.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:J.makeArray(n,[e]),h=J.event.special[f]||{},r||!h.trigger||h.trigger.apply(i,n)!==!1)){if(!r&&!h.noBubble&&!J.isWindow(i)){for(u=h.delegateType||f,Pt.test(u+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),s=o;s===(i.ownerDocument||Z)&&d.push(s.defaultView||s.parentWindow||t)}for(a=0;(o=d[a++])&&!e.isPropagationStopped();)e.type=a>1?u:h.bindType||f,l=(mt.get(o,"events")||{})[e.type]&&mt.get(o,"handle"),l&&l.apply(o,n),l=c&&o[c],l&&l.apply&&J.acceptData(o)&&(e.result=l.apply(o,n),e.result===!1&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||h._default&&h._default.apply(d.pop(),n)!==!1||!J.acceptData(i)||c&&J.isFunction(i[f])&&!J.isWindow(i)&&(s=i[c],s&&(i[c]=null),J.event.triggered=f,i[f](),J.event.triggered=void 0,s&&(i[c]=s)),e.result}},dispatch:function(t){t=J.event.fix(t);var e,n,i,r,a,o=[],s=X.call(arguments),u=(mt.get(this,"events")||{})[t.type]||[],c=J.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(o=J.event.handlers.call(this,t,u),e=0;(r=o[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!t.isImmediatePropagationStopped();)t.namespace_re&&!t.namespace_re.test(a.namespace)||(t.handleObj=a,t.data=a.data,i=((J.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,s),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,a,o=[],s=e.delegateCount,u=t.target;if(s&&u.nodeType&&(!t.button||"click"!==t.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==t.type){for(i=[],n=0;n<s;n++)a=e[n],r=a.selector+" ",void 0===i[r]&&(i[r]=a.needsContext?J(r,this).index(u)>=0:J.find(r,this,null,[u]).length),i[r]&&i.push(a);i.length&&o.push({elem:u,handlers:i})}return s<e.length&&o.push({elem:this,handlers:e.slice(s)}),o},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,a=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Z,i=n.documentElement,r=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),t.which||void 0===a||(t.which=1&a?1:2&a?3:4&a?2:0),t}},fix:function(t){if(t[J.expando])return t;var e,n,i,r=t.type,a=t,o=this.fixHooks[r];for(o||(this.fixHooks[r]=o=Et.test(r)?this.mouseHooks:Ct.test(r)?this.keyHooks:{}),i=o.props?this.props.concat(o.props):this.props,t=new J.Event(a),e=i.length;e--;)n=i[e],t[n]=a[n];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),o.filter?o.filter(t,a):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==h()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===h()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&J.nodeName(this,"input"))return this.click(),!1},_default:function(t){return J.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=J.extend(new J.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?J.event.trigger(r,null,e):J.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},J.Event=function(t,e){return this instanceof J.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?c:l):this.type=t,e&&J.extend(this,e),this.timeStamp=t&&t.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(t,e)},J.Event.prototype={isDefaultPrevented:l,isPropagationStopped:l,isImmediatePropagationStopped:l,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=c,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=c,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=c,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){J.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,a=t.handleObj;return r&&(r===i||J.contains(i,r))||(t.type=a.origType,n=a.handler.apply(this,arguments),t.type=e),n}}}),Q.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){J.event.simulate(e,t.target,J.event.fix(t),!0)};J.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=mt.access(i,e);r||i.addEventListener(t,n,!0),mt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=mt.access(i,e)-1;r?mt.access(i,e,r):(i.removeEventListener(t,n,!0),mt.remove(i,e))}}}),J.fn.extend({on:function(t,e,n,i,r){var a,o;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(o in t)this.on(o,e,n,t[o],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=l;else if(!i)return this;return 1===r&&(a=i,i=function(t){return J().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=J.guid++)),this.each(function(){J.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,J(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=l),this.each(function(){J.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){J.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return J.event.trigger(t,e,n,!0)}});var Mt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,kt=/<([\w:]+)/,It=/<|&#?\w+;/,Vt=/<(?:script|style|link)/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^$|\/(?:java|ecma)script/i,Nt=/^true\/(.*)/,Ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Gt.optgroup=Gt.option,Gt.tbody=Gt.tfoot=Gt.colgroup=Gt.caption=Gt.thead,Gt.th=Gt.td,J.extend({clone:function(t,e,n){var i,r,a,o,s=t.cloneNode(!0),u=J.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||J.isXMLDoc(t)))for(o=m(s),a=m(t),i=0,r=a.length;i<r;i++)y(a[i],o[i]);if(e)if(n)for(a=a||m(t),o=o||m(s),i=0,r=a.length;i<r;i++)v(a[i],o[i]);else v(t,s);return o=m(s,"script"),o.length>0&&g(o,!u&&m(t,"script")),s},buildFragment:function(t,e,n,i){for(var r,a,o,s,u,c,l=e.createDocumentFragment(),h=[],d=0,f=t.length;d<f;d++)if(r=t[d],r||0===r)if("object"===J.type(r))J.merge(h,r.nodeType?[r]:r);else if(It.test(r)){for(a=a||l.appendChild(e.createElement("div")),o=(kt.exec(r)||["",""])[1].toLowerCase(),s=Gt[o]||Gt._default,a.innerHTML=s[1]+r.replace(Mt,"<$1></$2>")+s[2],c=s[0];c--;)a=a.lastChild;J.merge(h,a.childNodes),a=l.firstChild,a.textContent=""}else h.push(e.createTextNode(r));for(l.textContent="",d=0;r=h[d++];)if((!i||J.inArray(r,i)===-1)&&(u=J.contains(r.ownerDocument,r),a=m(l.appendChild(r),"script"),u&&g(a),n))for(c=0;r=a[c++];)Rt.test(r.type||"")&&n.push(r);return l},cleanData:function(t){for(var e,n,i,r,a=J.event.special,o=0;void 0!==(n=t[o]);o++){if(J.acceptData(n)&&(r=n[mt.expando],r&&(e=mt.cache[r]))){if(e.events)for(i in e.events)a[i]?J.event.remove(n,i):J.removeEvent(n,i,e.handle);mt.cache[r]&&delete mt.cache[r]}delete yt.cache[n[yt.expando]]}}}),J.fn.extend({text:function(t){return vt(this,function(t){return void 0===t?J.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=d(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?J.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||J.cleanData(m(n)),n.parentNode&&(e&&J.contains(n.ownerDocument,n)&&g(m(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(J.cleanData(m(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return J.clone(this,t,e)})},html:function(t){return vt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Vt.test(t)&&!Gt[(kt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Mt,"<$1></$2>");try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(J.cleanData(m(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,J.cleanData(m(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=$.apply([],t);var n,i,r,a,o,s,u=0,c=this.length,l=this,h=c-1,d=t[0],g=J.isFunction(d);if(g||c>1&&"string"==typeof d&&!Q.checkClone&&Dt.test(d))return this.each(function(n){var i=l.eq(n);g&&(t[0]=d.call(this,n,i.html())),i.domManip(t,e)});if(c&&(n=J.buildFragment(t,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=J.map(m(n,"script"),f),a=r.length;u<c;u++)o=n,u!==h&&(o=J.clone(o,!0,!0),a&&J.merge(r,m(o,"script"))),e.call(this[u],o,u);if(a)for(s=r[r.length-1].ownerDocument,J.map(r,p),u=0;u<a;u++)o=r[u],Rt.test(o.type||"")&&!mt.access(o,"globalEval")&&J.contains(s,o)&&(o.src?J._evalUrl&&J._evalUrl(o.src):J.globalEval(o.textContent.replace(Ot,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){J.fn[t]=function(t){for(var n,i=[],r=J(t),a=r.length-1,o=0;o<=a;o++)n=o===a?this:this.clone(!0),J(r[o])[e](n),B.apply(i,n.get());return this.pushStack(i)}});var Ft,jt={},Ht=/^margin/,zt=new RegExp("^("+bt+")(?!px)[a-z%]+$","i"),Xt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){o.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o.innerHTML="",r.appendChild(a);var e=t.getComputedStyle(o,null);n="1%"!==e.top,i="4px"===e.width,r.removeChild(a)}var n,i,r=Z.documentElement,a=Z.createElement("div"),o=Z.createElement("div");o.style&&(o.style.backgroundClip="content-box",o.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===o.style.backgroundClip,a.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",a.appendChild(o),t.getComputedStyle&&J.extend(Q,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},reliableMarginRight:function(){var e,n=o.appendChild(Z.createElement("div"));return n.style.cssText=o.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",o.style.width="1px",r.appendChild(a),e=!parseFloat(t.getComputedStyle(n,null).marginRight),r.removeChild(a),o.removeChild(n),e}}))}(),J.swap=function(t,e,n,i){var r,a,o={};for(a in e)o[a]=t.style[a],t.style[a]=e[a];r=n.apply(t,i||[]);for(a in e)t.style[a]=o[a];return r};var $t=/^(none|table(?!-c[ea]).+)/,Bt=new RegExp("^("+bt+")(.*)$","i"),Yt=new RegExp("^([+-])=("+bt+")","i"),Ut={position:"absolute",visibility:"hidden",display:"block"},qt={letterSpacing:"0",fontWeight:"400"},Wt=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=b(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,a,o,s=J.camelCase(e),u=t.style;return e=J.cssProps[s]||(J.cssProps[s]=T(u,s)),o=J.cssHooks[e]||J.cssHooks[s],void 0===n?o&&"get"in o&&void 0!==(r=o.get(t,!1,i))?r:u[e]:(a=typeof n,"string"===a&&(r=Yt.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(J.css(t,e)),a="number"),null!=n&&n===n&&("number"!==a||J.cssNumber[s]||(n+="px"),Q.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),o&&"set"in o&&void 0===(n=o.set(t,n,i))||(u[e]=n)),void 0)}},css:function(t,e,n,i){var r,a,o,s=J.camelCase(e);return e=J.cssProps[s]||(J.cssProps[s]=T(t.style,s)),o=J.cssHooks[e]||J.cssHooks[s],o&&"get"in o&&(r=o.get(t,!0,n)),void 0===r&&(r=b(t,e,i)),"normal"===r&&e in qt&&(r=qt[e]),""===n||n?(a=parseFloat(r),n===!0||J.isNumeric(a)?a||0:r):r}}),J.each(["height","width"],function(t,e){J.cssHooks[e]={get:function(t,n,i){if(n)return $t.test(J.css(t,"display"))&&0===t.offsetWidth?J.swap(t,Ut,function(){return C(t,e,i)}):C(t,e,i)},set:function(t,n,i){var r=i&&Xt(t);return w(t,n,i?A(t,e,i,"border-box"===J.css(t,"boxSizing",!1,r),r):0)}}}),J.cssHooks.marginRight=S(Q.reliableMarginRight,function(t,e){if(e)return J.swap(t,{display:"inline-block"},b,[t,"marginRight"])}),J.each({margin:"",padding:"",border:"Width"},function(t,e){J.cssHooks[t+e]={expand:function(n){for(var i=0,r={},a="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+St[i]+e]=a[i]||a[i-2]||a[0];return r}},Ht.test(t)||(J.cssHooks[t+e].set=w)}),J.fn.extend({css:function(t,e){return vt(this,function(t,e,n){var i,r,a={},o=0;if(J.isArray(e)){for(i=Xt(t),r=e.length;o<r;o++)a[e[o]]=J.css(t,e[o],!1,i);return a}return void 0!==n?J.style(t,e,n):J.css(t,e)},t,e,arguments.length>1)},show:function(){return E(this,!0)},hide:function(){return E(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Tt(this)?J(this).show():J(this).hide()})}}),J.Tween=P,P.prototype={constructor:P,init:function(t,e,n,i,r,a){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=a||(J.cssNumber[n]?"":"px")},cur:function(){var t=P.propHooks[this.prop];return t&&t.get?t.get(this):P.propHooks._default.get(this)},run:function(t){var e,n=P.propHooks[this.prop];return this.options.duration?this.pos=e=J.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=J.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){J.fx.step[t.prop]?J.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[J.cssProps[t.prop]]||J.cssHooks[t.prop])?J.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},J.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},J.fx=P.prototype.init,J.fx.step={};var Qt,Zt,Kt=/^(?:toggle|show|hide)$/,Jt=new RegExp("^(?:([+-])=|)("+bt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[I],ne={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=Jt.exec(e),a=r&&r[3]||(J.cssNumber[t]?"":"px"),o=(J.cssNumber[t]||"px"!==a&&+i)&&Jt.exec(J.css(n.elem,t)),s=1,u=20;if(o&&o[3]!==a){a=a||o[3],r=r||[],o=+i||1;do s=s||".5",o/=s,J.style(n.elem,t,o+a);while(s!==(s=n.cur()/i)&&1!==s&&--u)}return r&&(o=n.start=+o||+i||0,n.unit=a,n.end=r[1]?o+(r[1]+1)*r[2]:+r[2]),n}]};J.Animation=J.extend(D,{tweener:function(t,e){J.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;i<r;i++)n=t[i],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),J.speed=function(t,e,n){var i=t&&"object"==typeof t?J.extend({},t):{complete:n||!n&&e||J.isFunction(t)&&t,duration:t,easing:n&&e||e&&!J.isFunction(e)&&e};return i.duration=J.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in J.fx.speeds?J.fx.speeds[i.duration]:J.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){J.isFunction(i.old)&&i.old.call(this),i.queue&&J.dequeue(this,i.queue)},i},J.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Tt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=J.isEmptyObject(t),a=J.speed(e,n,i),o=function(){var e=D(this,J.extend({},t),a);(r||mt.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||a.queue===!1?this.each(o):this.queue(a.queue,o)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",a=J.timers,o=mt.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&te.test(r)&&i(o[r]);for(r=a.length;r--;)a[r].elem!==this||null!=t&&a[r].queue!==t||(a[r].anim.stop(n),e=!1,a.splice(r,1));!e&&n||J.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=mt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],a=J.timers,o=i?i.length:0;for(n.finish=!0,J.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===t&&(a[e].anim.stop(!0),a.splice(e,1));
for(e=0;e<o;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),J.each(["toggle","show","hide"],function(t,e){var n=J.fn[e];J.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(M(e,!0),t,i,r)}}),J.each({slideDown:M("show"),slideUp:M("hide"),slideToggle:M("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){J.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),J.timers=[],J.fx.tick=function(){var t,e=0,n=J.timers;for(Qt=J.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||J.fx.stop(),Qt=void 0},J.fx.timer=function(t){J.timers.push(t),t()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Zt||(Zt=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Zt),Zt=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(t,e){return t=J.fx?J.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),n=e.appendChild(Z.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=n.selected,e.disabled=!0,Q.optDisabled=!n.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var ie,re,ae=J.expr.attrHandle;J.fn.extend({attr:function(t,e){return vt(this,J.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){J.removeAttr(this,t)})}}),J.extend({attr:function(t,e,n){var i,r,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return typeof t.getAttribute===At?J.prop(t,e,n):(1===a&&J.isXMLDoc(t)||(e=e.toLowerCase(),i=J.attrHooks[e]||(J.expr.match.bool.test(e)?re:ie)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=J.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void J.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,a=e&&e.match(ft);if(a&&1===t.nodeType)for(;n=a[r++];)i=J.propFix[n]||n,J.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&J.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),re={set:function(t,e,n){return e===!1?J.removeAttr(t,n):t.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ae[e]||J.find.attr;ae[e]=function(t,e,i){var r,a;return i||(a=ae[e],ae[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,ae[e]=a),r}});var oe=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(t,e){return vt(this,J.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[J.propFix[t]||t]})}}),J.extend({propFix:{for:"htmlFor",class:"className"},prop:function(t,e,n){var i,r,a,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return a=1!==o||!J.isXMLDoc(t),a&&(e=J.propFix[e]||e,r=J.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||oe.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(J.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var se=/[\t\r\n\f]/g;J.fn.extend({addClass:function(t){var e,n,i,r,a,o,s="string"==typeof t&&t,u=0,c=this.length;if(J.isFunction(t))return this.each(function(e){J(this).addClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(ft)||[];u<c;u++)if(n=this[u],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):" ")){for(a=0;r=e[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o=J.trim(i),n.className!==o&&(n.className=o)}return this},removeClass:function(t){var e,n,i,r,a,o,s=0===arguments.length||"string"==typeof t&&t,u=0,c=this.length;if(J.isFunction(t))return this.each(function(e){J(this).removeClass(t.call(this,e,this.className))});if(s)for(e=(t||"").match(ft)||[];u<c;u++)if(n=this[u],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(se," "):"")){for(a=0;r=e[a++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");o=t?J.trim(i):"",n.className!==o&&(n.className=o)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):J.isFunction(t)?this.each(function(n){J(this).toggleClass(t.call(this,n,this.className,e),e)}):this.each(function(){if("string"===n)for(var e,i=0,r=J(this),a=t.match(ft)||[];e=a[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else n!==At&&"boolean"!==n||(this.className&&mt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":mt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(se," ").indexOf(e)>=0)return!0;return!1}});var ue=/\r/g;J.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=J.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,J(this).val()):t,null==r?r="":"number"==typeof r?r+="":J.isArray(r)&&(r=J.map(r,function(t){return null==t?"":t+""})),e=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=J.valHooks[r.type]||J.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(ue,""):null==n?"":n)}}}),J.extend({valHooks:{option:{get:function(t){var e=J.find.attr(t,"value");return null!=e?e:J.trim(J.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,a="select-one"===t.type||r<0,o=a?null:[],s=a?r+1:i.length,u=r<0?s:a?r:0;u<s;u++)if(n=i[u],(n.selected||u===r)&&(Q.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!J.nodeName(n.parentNode,"optgroup"))){if(e=J(n).val(),a)return e;o.push(e)}return o},set:function(t,e){for(var n,i,r=t.options,a=J.makeArray(e),o=r.length;o--;)i=r[o],(i.selected=J.inArray(i.value,a)>=0)&&(n=!0);return n||(t.selectedIndex=-1),a}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(t,e){if(J.isArray(e))return t.checked=J.inArray(J(t).val(),e)>=0}},Q.checkOn||(J.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){J.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),J.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ce=J.now(),le=/\?/;J.parseJSON=function(t){return JSON.parse(t+"")},J.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||J.error("Invalid XML: "+t),e};var he=/#.*$/,de=/([?&])_=[^&]*/,fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ge=/^(?:GET|HEAD)$/,ve=/^\/\//,me=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},xe={},_e="*/".concat("*"),be=t.location.href,Se=me.exec(be.toLowerCase())||[];J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:be,type:"GET",isLocal:pe.test(Se[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_e,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?O(O(t,J.ajaxSettings),e):O(J.ajaxSettings,t)},ajaxPrefilter:R(ye),ajaxTransport:R(xe),ajax:function(t,e){function n(t,e,n,o){var u,l,m,y,_,S=e;2!==x&&(x=2,s&&clearTimeout(s),i=void 0,a=o||"",b.readyState=t>0?4:0,u=t>=200&&t<300||304===t,n&&(y=G(h,b,n)),y=F(h,y,b,u),u?(h.ifModified&&(_=b.getResponseHeader("Last-Modified"),_&&(J.lastModified[r]=_),_=b.getResponseHeader("etag"),_&&(J.etag[r]=_)),204===t||"HEAD"===h.type?S="nocontent":304===t?S="notmodified":(S=y.state,l=y.data,m=y.error,u=!m)):(m=S,!t&&S||(S="error",t<0&&(t=0))),b.status=t,b.statusText=(e||S)+"",u?p.resolveWith(d,[l,S,b]):p.rejectWith(d,[b,S,m]),b.statusCode(v),v=void 0,c&&f.trigger(u?"ajaxSuccess":"ajaxError",[b,h,u?l:m]),g.fireWith(d,[b,S]),c&&(f.trigger("ajaxComplete",[b,h]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,a,o,s,u,c,l,h=J.ajaxSetup({},e),d=h.context||h,f=h.context&&(d.nodeType||d.jquery)?J(d):J.event,p=J.Deferred(),g=J.Callbacks("once memory"),v=h.statusCode||{},m={},y={},x=0,_="canceled",b={readyState:0,getResponseHeader:function(t){var e;if(2===x){if(!o)for(o={};e=fe.exec(a);)o[e[1].toLowerCase()]=e[2];e=o[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return x||(t=y[n]=y[n]||t,m[t]=e),this},overrideMimeType:function(t){return x||(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(x<2)for(e in t)v[e]=[v[e],t[e]];else b.always(t[b.status]);return this},abort:function(t){var e=t||_;return i&&i.abort(e),n(0,e),this}};if(p.promise(b).complete=g.add,b.success=b.done,b.error=b.fail,h.url=((t||h.url||be)+"").replace(he,"").replace(ve,Se[1]+"//"),h.type=e.method||e.type||h.method||h.type,h.dataTypes=J.trim(h.dataType||"*").toLowerCase().match(ft)||[""],null==h.crossDomain&&(u=me.exec(h.url.toLowerCase()),h.crossDomain=!(!u||u[1]===Se[1]&&u[2]===Se[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(Se[3]||("http:"===Se[1]?"80":"443")))),h.data&&h.processData&&"string"!=typeof h.data&&(h.data=J.param(h.data,h.traditional)),N(ye,h,e,b),2===x)return b;c=J.event&&h.global,c&&0===J.active++&&J.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!ge.test(h.type),r=h.url,h.hasContent||(h.data&&(r=h.url+=(le.test(r)?"&":"?")+h.data,delete h.data),h.cache===!1&&(h.url=de.test(r)?r.replace(de,"$1_="+ce++):r+(le.test(r)?"&":"?")+"_="+ce++)),h.ifModified&&(J.lastModified[r]&&b.setRequestHeader("If-Modified-Since",J.lastModified[r]),J.etag[r]&&b.setRequestHeader("If-None-Match",J.etag[r])),(h.data&&h.hasContent&&h.contentType!==!1||e.contentType)&&b.setRequestHeader("Content-Type",h.contentType),b.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+_e+"; q=0.01":""):h.accepts["*"]);for(l in h.headers)b.setRequestHeader(l,h.headers[l]);if(h.beforeSend&&(h.beforeSend.call(d,b,h)===!1||2===x))return b.abort();_="abort";for(l in{success:1,error:1,complete:1})b[l](h[l]);if(i=N(xe,h,e,b)){b.readyState=1,c&&f.trigger("ajaxSend",[b,h]),h.async&&h.timeout>0&&(s=setTimeout(function(){b.abort("timeout")},h.timeout));try{x=1,i.send(m,n)}catch(t){if(!(x<2))throw t;n(-1,t)}}else n(-1,"No Transport");return b},getJSON:function(t,e,n){return J.get(t,e,n,"json")},getScript:function(t,e){return J.get(t,void 0,e,"script")}}),J.each(["get","post"],function(t,e){J[e]=function(t,n,i,r){return J.isFunction(n)&&(r=r||i,i=n,n=void 0),J.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),J._evalUrl=function(t){return J.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},J.fn.extend({wrapAll:function(t){var e;return J.isFunction(t)?this.each(function(e){J(this).wrapAll(t.call(this,e))}):(this[0]&&(e=J(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return J.isFunction(t)?this.each(function(e){J(this).wrapInner(t.call(this,e))}):this.each(function(){var e=J(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=J.isFunction(t);return this.each(function(n){J(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},J.expr.filters.visible=function(t){return!J.expr.filters.hidden(t)};var Te=/%20/g,we=/\[\]$/,Ae=/\r?\n/g,Ce=/^(?:submit|button|image|reset|file)$/i,Ee=/^(?:input|select|textarea|keygen)/i;J.param=function(t,e){var n,i=[],r=function(t,e){e=J.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=J.ajaxSettings&&J.ajaxSettings.traditional),J.isArray(t)||t.jquery&&!J.isPlainObject(t))J.each(t,function(){r(this.name,this.value)});else for(n in t)j(n,t[n],e,r);return i.join("&").replace(Te,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=J.prop(this,"elements");return t?J.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!J(this).is(":disabled")&&Ee.test(this.nodeName)&&!Ce.test(t)&&(this.checked||!wt.test(t))}).map(function(t,e){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(t){return{name:e.name,value:t.replace(Ae,"\r\n")}}):{name:e.name,value:n.replace(Ae,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Pe=0,Le={},Me={0:200,1223:204},ke=J.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Le)Le[t]()}),Q.cors=!!ke&&"withCredentials"in ke,Q.ajax=ke=!!ke,J.ajaxTransport(function(t){var e;if(Q.cors||ke&&!t.crossDomain)return{send:function(n,i){var r,a=t.xhr(),o=++Pe;if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)a.setRequestHeader(r,n[r]);e=function(t){return function(){e&&(delete Le[o],e=a.onload=a.onerror=null,"abort"===t?a.abort():"error"===t?i(a.status,a.statusText):i(Me[a.status]||a.status,a.statusText,"string"==typeof a.responseText?{text:a.responseText}:void 0,a.getAllResponseHeaders()))}},a.onload=e(),a.onerror=e("error"),e=Le[o]=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return J.globalEval(t),t}}}),J.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),J.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=J("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ie=[],Ve=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ie.pop()||J.expando+"_"+ce++;return this[t]=!0,t}}),J.ajaxPrefilter("json jsonp",function(e,n,i){var r,a,o,s=e.jsonp!==!1&&(Ve.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=J.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ve,"$1"+r):e.jsonp!==!1&&(e.url+=(le.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||J.error(r+" was not called"),o[0]},e.dataTypes[0]="json",a=t[r],t[r]=function(){o=arguments},i.always(function(){t[r]=a,e[r]&&(e.jsonpCallback=n.jsonpCallback,Ie.push(r)),o&&J.isFunction(a)&&a(o[0]),o=a=void 0}),"script"}),J.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Z;var i=ot.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=J.buildFragment([t],e,r),r&&r.length&&J(r).remove(),J.merge([],i.childNodes))};var De=J.fn.load;J.fn.load=function(t,e,n){if("string"!=typeof t&&De)return De.apply(this,arguments);var i,r,a,o=this,s=t.indexOf(" ");return s>=0&&(i=J.trim(t.slice(s)),t=t.slice(0,s)),J.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&J.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){a=arguments,o.html(i?J("<div>").append(J.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){o.each(n,a||[t.responseText,e,t])}),this},J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){J.fn[e]=function(t){return this.on(e,t)}}),J.expr.filters.animated=function(t){return J.grep(J.timers,function(e){return t===e.elem}).length};var Re=t.document.documentElement;J.offset={setOffset:function(t,e,n){var i,r,a,o,s,u,c,l=J.css(t,"position"),h=J(t),d={};"static"===l&&(t.style.position="relative"),s=h.offset(),a=J.css(t,"top"),u=J.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(a+u).indexOf("auto")>-1,c?(i=h.position(),o=i.top,r=i.left):(o=parseFloat(a)||0,r=parseFloat(u)||0),J.isFunction(e)&&(e=e.call(t,n,s)),null!=e.top&&(d.top=e.top-s.top+o),null!=e.left&&(d.left=e.left-s.left+r),"using"in e?e.using.call(t,d):h.css(d)}},J.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){J.offset.setOffset(this,t,e)});var e,n,i=this[0],r={top:0,left:0},a=i&&i.ownerDocument;if(a)return e=a.documentElement,J.contains(e,i)?(typeof i.getBoundingClientRect!==At&&(r=i.getBoundingClientRect()),n=H(a),{top:r.top+n.pageYOffset-e.clientTop,left:r.left+n.pageXOffset-e.clientLeft}):r},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===J.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),J.nodeName(t[0],"html")||(i=t.offset()),i.top+=J.css(t[0],"borderTopWidth",!0),i.left+=J.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-J.css(n,"marginTop",!0),left:e.left-i.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Re;t&&!J.nodeName(t,"html")&&"static"===J.css(t,"position");)t=t.offsetParent;return t||Re})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var i="pageYOffset"===n;J.fn[e]=function(r){return vt(this,function(e,r,a){var o=H(e);return void 0===a?o?o[n]:e[r]:void(o?o.scrollTo(i?t.pageXOffset:a,i?a:t.pageYOffset):e[r]=a)},e,r,arguments.length,null)}}),J.each(["top","left"],function(t,e){J.cssHooks[e]=S(Q.pixelPosition,function(t,n){if(n)return n=b(t,e),zt.test(n)?J(t).position()[e]+"px":n})}),J.each({Height:"height",Width:"width"},function(t,e){J.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){J.fn[i]=function(i,r){var a=arguments.length&&(n||"boolean"!=typeof i),o=n||(i===!0||r===!0?"margin":"border");return vt(this,function(e,n,i){var r;return J.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?J.css(e,n,o):J.style(e,n,i,o)},e,a?i:void 0,a,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Ne=t.jQuery,Oe=t.$;return J.noConflict=function(e){return t.$===J&&(t.$=Oe),e&&t.jQuery===J&&(t.jQuery=Ne),J},typeof e===At&&(t.jQuery=t.$=J),J}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var r=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(r,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),r=n.data("bs.alert");r||n.data("bs.alert",r=new i(this)),"string"==typeof e&&r[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){o.detach().trigger("closed.bs.alert").remove()}var r=t(this),a=r.attr("data-target");a||(a=r.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,""));var o=t("#"===a?[]:a);e&&e.preventDefault(),o.length||(o=r.closest(".alert")),o.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var r=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.button"),a="object"==typeof e&&e;r||i.data("bs.button",r=new n(this,a)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",a=i.data();e+="Text",null==a.resetText&&i.data("resetText",i[r]()),setTimeout(t.proxy(function(){i[r](null==a[e]?this.options[e]:a[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target).closest(".btn");e.call(i,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.carousel"),a=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),o="string"==typeof e?e:a.slide;r||i.data("bs.carousel",r=new n(this,a)),"number"==typeof e?r.to(e):o?r[o]():a.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),i="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(i&&!this.options.wrap)return e;var r="prev"==t?-1:1,a=(n+r)%this.$items.length;return this.$items.eq(a)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,i){var r=this.$element.find(".item.active"),a=i||this.getItemForDirection(e,r),o=this.interval,s="next"==e?"left":"right",u=this;if(a.hasClass("active"))return this.sliding=!1;var c=a[0],l=t.Event("slide.bs.carousel",{relatedTarget:c,direction:s});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var h=t(this.$indicators.children()[this.getItemIndex(a)]);h&&h.addClass("active")}var d=t.Event("slid.bs.carousel",{relatedTarget:c,direction:s});return t.support.transition&&this.$element.hasClass("slide")?(a.addClass(e),a[0].offsetWidth,r.addClass(s),a.addClass(s),r.one("bsTransitionEnd",function(){a.removeClass([e,s].join(" ")).addClass("active"),r.removeClass(["active",s].join(" ")),u.sliding=!1,setTimeout(function(){u.$element.trigger(d)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(r.removeClass("active"),a.addClass("active"),this.sliding=!1,this.$element.trigger(d)),o&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var r=function(n){var i,r=t(this),a=t(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(a.hasClass("carousel")){var o=t.extend({},a.data(),r.data()),s=r.attr("data-slide-to");s&&(o.interval=!1),e.call(a,o),s&&a.data("bs.carousel").to(s),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),r=n.data("bs.collapse"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!r&&a.toggle&&/show|hide/.test(e)&&(a.toggle=!1),r||n.data("bs.collapse",r=new i(this,a)),"string"==typeof e&&r[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};i.VERSION="3.3.7",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0},i.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(r&&r.length&&(e=r.data("bs.collapse"),e&&e.transitioning))){var a=t.Event("show.bs.collapse");if(this.$element.trigger(a),!a.isDefaultPrevented()){r&&r.length&&(n.call(r,"hide"),e||r.data("bs.collapse",null));var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return s.call(this);var u=t.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[o](this.$element[0][u])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var r=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(i.TRANSITION_DURATION):r.call(this)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var r=t(i);this.addAriaAndCollapsedClass(e(r),r)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=r,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var r=t(this);r.attr("data-target")||i.preventDefault();var a=e(r),o=a.data("bs.collapse"),s=o?"toggle":r.data();n.call(a,s)})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function n(n){n&&3===n.which||(t(r).remove(),t(a).each(function(){var i=t(this),r=e(i),a={relatedTarget:this};r.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(r[0],n.target)||(r.trigger(n=t.Event("hide.bs.dropdown",a)),n.isDefaultPrevented()||(i.attr("aria-expanded","false"),r.removeClass("open").trigger(t.Event("hidden.bs.dropdown",a)))));
}))}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new o(this)),"string"==typeof e&&i[e].call(n)})}var r=".dropdown-backdrop",a='[data-toggle="dropdown"]',o=function(e){t(e).on("click.bs.dropdown",this.toggle)};o.VERSION="3.3.7",o.prototype.toggle=function(i){var r=t(this);if(!r.is(".disabled, :disabled")){var a=e(r),o=a.hasClass("open");if(n(),!o){"ontouchstart"in document.documentElement&&!a.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var s={relatedTarget:this};if(a.trigger(i=t.Event("show.bs.dropdown",s)),i.isDefaultPrevented())return;r.trigger("focus").attr("aria-expanded","true"),a.toggleClass("open").trigger(t.Event("shown.bs.dropdown",s))}return!1}},o.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var i=t(this);if(n.preventDefault(),n.stopPropagation(),!i.is(".disabled, :disabled")){var r=e(i),o=r.hasClass("open");if(!o&&27!=n.which||o&&27==n.which)return 27==n.which&&r.find(a).trigger("focus"),i.trigger("click");var s=" li:not(.disabled):visible a",u=r.find(".dropdown-menu"+s);if(u.length){var c=u.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<u.length-1&&c++,~c||(c=0),u.eq(c).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=o,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",a,o.prototype.toggle).on("keydown.bs.dropdown.data-api",a,o.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",o.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var r=t(this),a=r.data("bs.modal"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);a||r.data("bs.modal",a=new n(this,o)),"string"==typeof e?a[e](i):o.show&&a.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,r=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(r),this.isShown||r.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var r=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),r&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var a=t.Event("shown.bs.modal",{relatedTarget:e});r?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(a)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(a)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var a=t.support.transition&&r;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+r).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),a&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;a?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):o()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),r=i.attr("href"),a=t(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),o=a.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(r)&&r},a.data(),i.data());i.is("a")&&n.preventDefault(),a.one("show.bs.modal",function(t){t.isDefaultPrevented()||a.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(a,o,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tooltip"),a="object"==typeof e&&e;!r&&/destroy|hide/.test(e)||(r||i.data("bs.tooltip",r=new n(this,a)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var r=this.options.trigger.split(" "),a=r.length;a--;){var o=r[a];if("click"==o)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=o){var s="hover"==o?"mouseenter":"focusin",u="hover"==o?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(u+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue())return clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var r=this,a=this.tip(),o=this.getUID(this.type);this.setContent(),a.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&a.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,a[0],this.$element[0]):this.options.placement,u=/\s?auto?\s?/i,c=u.test(s);c&&(s=s.replace(u,"")||"top"),a.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?a.appendTo(this.options.container):a.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),h=a[0].offsetWidth,d=a[0].offsetHeight;if(c){var f=s,p=this.getPosition(this.$viewport);s="bottom"==s&&l.bottom+d>p.bottom?"top":"top"==s&&l.top-d<p.top?"bottom":"right"==s&&l.right+h>p.width?"left":"left"==s&&l.left-h<p.left?"right":s,a.removeClass(f).addClass(s)}var g=this.getCalculatedOffset(s,l,h,d);this.applyPlacement(g,s);var v=function(){var t=r.hoverState;r.$element.trigger("shown.bs."+r.type),r.hoverState=null,"out"==t&&r.leave(r)};t.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",v).emulateTransitionEnd(n.TRANSITION_DURATION):v()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),r=i[0].offsetWidth,a=i[0].offsetHeight,o=parseInt(i.css("margin-top"),10),s=parseInt(i.css("margin-left"),10);isNaN(o)&&(o=0),isNaN(s)&&(s=0),e.top+=o,e.left+=s,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var u=i[0].offsetWidth,c=i[0].offsetHeight;"top"==n&&c!=a&&(e.top=e.top+a-c);var l=this.getViewportAdjustedDelta(n,e,u,c);l.left?e.left+=l.left:e.top+=l.top;var h=/top|bottom/.test(n),d=h?2*l.left-r+u:2*l.top-a+c,f=h?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(d,i[0][f],h)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=r.hoverState&&a.detach(),r.$element&&r.$element.removeAttr("aria-describedby").trigger("hidden.bs."+r.type),e&&e()}var r=this,a=t(this.$tip),o=t.Event("hide.bs."+this.type);if(this.$element.trigger(o),!o.isDefaultPrevented())return a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,r=n.getBoundingClientRect();null==r.width&&(r=t.extend({},r,{width:r.right-r.left,height:r.bottom-r.top}));var a=window.SVGElement&&n instanceof window.SVGElement,o=i?{top:0,left:0}:a?null:e.offset(),s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},u=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},r,s,u,o)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var a=this.options.viewport&&this.options.viewport.padding||0,o=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-a-o.scroll,u=e.top+a-o.scroll+i;s<o.top?r.top=o.top-s:u>o.top+o.height&&(r.top=o.top+o.height-u)}else{var c=e.left-a,l=e.left+a+n;c<o.left?r.left=o.left-c:l>o.right&&(r.left=o.left+o.width-l)}return r},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.popover"),a="object"==typeof e&&e;!r&&/destroy|hide/.test(e)||(r||i.data("bs.popover",r=new n(this,a)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.7",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),+function(t){"use strict";function e(n,i){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),r=i.data("bs.scrollspy"),a="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new e(this,a)),"string"==typeof n&&r[n]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),r=e.data("target")||e.attr("href"),a=/^#./.test(r)&&t(r);return a&&a.length&&a.is(":visible")&&[[a[n]().top+i,r]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,a=this.targets,o=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return o!=(t=a[a.length-1])&&this.activate(t);if(o&&e<r[0])return this.activeTarget=null,this.clear();for(t=r.length;t--;)o!=a[t]&&e>=r[t]&&(void 0===r[t+1]||e<r[t+1])&&this.activate(a[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new n(this)),"string"==typeof e&&r[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var r=n.find(".active:last a"),a=t.Event("hide.bs.tab",{relatedTarget:e[0]}),o=t.Event("show.bs.tab",{relatedTarget:r[0]});if(r.trigger(a),e.trigger(o),!o.isDefaultPrevented()&&!a.isDefaultPrevented()){var s=t(i);this.activate(e.closest("li"),n),this.activate(s,s.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})}}},n.prototype.activate=function(e,i,r){function a(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),r&&r()}var o=i.find("> .active"),s=r&&t.support.transition&&(o.length&&o.hasClass("fade")||!!i.find("> .fade").length);o.length&&s?o.one("bsTransitionEnd",a).emulateTransitionEnd(n.TRANSITION_DURATION):a(),o.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var r=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.affix"),a="object"==typeof e&&e;r||i.data("bs.affix",r=new n(this,a)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var r=this.$target.scrollTop(),a=this.$element.offset(),o=this.$target.height();if(null!=n&&"top"==this.affixed)return r<n&&"top";if("bottom"==this.affixed)return null!=n?!(r+this.unpin<=a.top)&&"bottom":!(r+o<=t-i)&&"bottom";var s=null==this.affixed,u=s?r:a.top,c=s?o:e;return null!=n&&r<=n?"top":null!=i&&u+c>=t-i&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,r=i.top,a=i.bottom,o=Math.max(t(document).height(),t(document.body).height());"object"!=typeof i&&(a=r=i),"function"==typeof r&&(r=i.top(this.$element)),"function"==typeof a&&(a=i.bottom(this.$element));var s=this.getState(o,e,r,a);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var u="affix"+(s?"-"+s:""),c=t.Event(u+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(u).trigger(u.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:o-e-a})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),function(t,e,n,i){"use strict";function r(t,e,n){return setTimeout(c(t,n),e)}function a(t,e,n){return!!Array.isArray(t)&&(o(t,n[e],n),!0)}function o(t,e,n){var r;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==i)for(r=0;r<t.length;)e.call(n,t[r],r,t),r++;else for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t)}function s(e,n,i){var r="DEPRECATED METHOD: "+n+"\n"+i+" AT \n";return function(){var n=new Error("get-stack-trace"),i=n&&n.stack?n.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",a=t.console&&(t.console.warn||t.console.log);return a&&a.call(t.console,r,i),e.apply(this,arguments)}}function u(t,e,n){var i,r=e.prototype;i=t.prototype=Object.create(r),i.constructor=t,i._super=r,n&&ht(i,n)}function c(t,e){return function(){return t.apply(e,arguments)}}function l(t,e){return typeof t==pt?t.apply(e?e[0]||i:i,e):t}function h(t,e){return t===i?e:t}function d(t,e,n){o(v(e),function(e){t.addEventListener(e,n,!1)})}function f(t,e,n){o(v(e),function(e){t.removeEventListener(e,n,!1)})}function p(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function g(t,e){return t.indexOf(e)>-1}function v(t){return t.trim().split(/\s+/g)}function m(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function y(t){return Array.prototype.slice.call(t,0)}function x(t,e,n){for(var i=[],r=[],a=0;a<t.length;){var o=e?t[a][e]:t[a];m(r,o)<0&&i.push(t[a]),r[a]=o,a++}return n&&(i=e?i.sort(function(t,n){return t[e]>n[e]}):i.sort()),i}function _(t,e){for(var n,r,a=e[0].toUpperCase()+e.slice(1),o=0;o<dt.length;){if(n=dt[o],r=n?n+a:e,r in t)return r;o++}return i}function b(){return _t++}function S(e){var n=e.ownerDocument||e;return n.defaultView||n.parentWindow||t}function T(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){l(t.options.enable,[t])&&n.handler(e)},this.init()}function w(t){var e,n=t.options.inputClass;return new(e=n?n:Tt?G:wt?H:St?X:O)(t,A)}function A(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,a=e&Mt&&i-r===0,o=e&(It|Vt)&&i-r===0;n.isFirst=!!a,n.isFinal=!!o,a&&(t.session={}),n.eventType=e,C(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function C(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=L(e)),r>1&&!n.firstMultiple?n.firstMultiple=L(e):1===r&&(n.firstMultiple=!1);var a=n.firstInput,o=n.firstMultiple,s=o?o.center:a.center,u=e.center=M(i);e.timeStamp=mt(),e.deltaTime=e.timeStamp-a.timeStamp,e.angle=D(s,u),e.distance=V(s,u),E(n,e),e.offsetDirection=I(e.deltaX,e.deltaY);var c=k(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=vt(c.x)>vt(c.y)?c.x:c.y,e.scale=o?N(o.pointers,i):1,e.rotation=o?R(o.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,P(n,e);var l=t.element;p(e.srcEvent.target,l)&&(l=e.srcEvent.target),e.target=l}function E(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},a=t.prevInput||{};e.eventType!==Mt&&a.eventType!==It||(r=t.prevDelta={x:a.deltaX||0,y:a.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}function P(t,e){var n,r,a,o,s=t.lastInterval||e,u=e.timeStamp-s.timeStamp;if(e.eventType!=Vt&&(u>Lt||s.velocity===i)){var c=e.deltaX-s.deltaX,l=e.deltaY-s.deltaY,h=k(u,c,l);r=h.x,a=h.y,n=vt(h.x)>vt(h.y)?h.x:h.y,o=I(c,l),t.lastInterval=e}else n=s.velocity,r=s.velocityX,a=s.velocityY,o=s.direction;e.velocity=n,e.velocityX=r,e.velocityY=a,e.direction=o}function L(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:gt(t.pointers[n].clientX),clientY:gt(t.pointers[n].clientY)},n++;return{timeStamp:mt(),pointers:e,center:M(e),deltaX:t.deltaX,deltaY:t.deltaY}}function M(t){var e=t.length;if(1===e)return{x:gt(t[0].clientX),y:gt(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:gt(n/e),y:gt(i/e)}}function k(t,e,n){return{x:e/t||0,y:n/t||0}}function I(t,e){return t===e?Dt:vt(t)>=vt(e)?t<0?Rt:Nt:e<0?Ot:Gt}function V(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function D(t,e,n){n||(n=zt);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function R(t,e){return D(e[1],e[0],Xt)+D(t[1],t[0],Xt)}function N(t,e){return V(e[0],e[1],Xt)/V(t[0],t[1],Xt)}function O(){this.evEl=Bt,this.evWin=Yt,this.pressed=!1,T.apply(this,arguments)}function G(){this.evEl=Wt,this.evWin=Qt,T.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function F(){this.evTarget=Kt,this.evWin=Jt,this.started=!1,T.apply(this,arguments)}function j(t,e){var n=y(t.touches),i=y(t.changedTouches);return e&(It|Vt)&&(n=x(n.concat(i),"identifier",!0)),[n,i]}function H(){this.evTarget=ee,this.targetIds={},T.apply(this,arguments)}function z(t,e){var n=y(t.touches),i=this.targetIds;if(e&(Mt|kt)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,a,o=y(t.changedTouches),s=[],u=this.target;if(a=n.filter(function(t){return p(t.target,u)}),e===Mt)for(r=0;r<a.length;)i[a[r].identifier]=!0,r++;for(r=0;r<o.length;)i[o[r].identifier]&&s.push(o[r]),e&(It|Vt)&&delete i[o[r].identifier],r++;return s.length?[x(a.concat(s),"identifier",!0),s]:void 0}function X(){T.apply(this,arguments);var t=c(this.handler,this);this.touch=new H(this.manager,t),this.mouse=new O(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function $(t,e){t&Mt?(this.primaryTouch=e.changedPointers[0].identifier,B.call(this,e)):t&(It|Vt)&&B.call(this,e)}function B(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches,r=function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)};setTimeout(r,ne)}}function Y(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],a=Math.abs(e-r.x),o=Math.abs(n-r.y);if(a<=ie&&o<=ie)return!0}return!1}function U(t,e){this.manager=t,this.set(e)}function q(t){if(g(t,ce))return ce;var e=g(t,le),n=g(t,he);return e&&n?ce:e||n?e?le:he:g(t,ue)?ue:se}function W(){if(!ae)return!1;var e={},n=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){e[i]=!n||t.CSS.supports("touch-action",i)}),e}function Q(t){this.options=ht({},this.defaults,t||{}),this.id=b(),this.manager=null,this.options.enable=h(this.options.enable,!0),this.state=fe,this.simultaneous={},this.requireFail=[]}function Z(t){return t&ye?"cancel":t&ve?"end":t&ge?"move":t&pe?"start":""}function K(t){return t==Gt?"down":t==Ot?"up":t==Rt?"left":t==Nt?"right":""}function J(t,e){var n=e.manager;return n?n.get(t):t}function tt(){Q.apply(this,arguments)}function et(){tt.apply(this,arguments),this.pX=null,this.pY=null}function nt(){tt.apply(this,arguments)}function it(){Q.apply(this,arguments),this._timer=null,this._input=null}function rt(){
tt.apply(this,arguments)}function at(){tt.apply(this,arguments)}function ot(){Q.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function st(t,e){return e=e||{},e.recognizers=h(e.recognizers,st.defaults.preset),new ut(t,e)}function ut(t,e){this.options=ht({},st.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=w(this),this.touchAction=new U(this,this.options.touchAction),ct(this,!0),o(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ct(t,e){var n=t.element;if(n.style){var i;o(t.options.cssProps,function(r,a){i=_(n.style,a),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={})}}function lt(t,n){var i=e.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=n,n.target.dispatchEvent(i)}var ht,dt=["","webkit","Moz","MS","ms","o"],ft=e.createElement("div"),pt="function",gt=Math.round,vt=Math.abs,mt=Date.now;ht="function"!=typeof Object.assign?function(t){if(t===i||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(r!==i&&null!==r)for(var a in r)r.hasOwnProperty(a)&&(e[a]=r[a])}return e}:Object.assign;var yt=s(function(t,e,n){for(var r=Object.keys(e),a=0;a<r.length;)(!n||n&&t[r[a]]===i)&&(t[r[a]]=e[r[a]]),a++;return t},"extend","Use `assign`."),xt=s(function(t,e){return yt(t,e,!0)},"merge","Use `assign`."),_t=1,bt=/mobile|tablet|ip(ad|hone|od)|android/i,St="ontouchstart"in t,Tt=_(t,"PointerEvent")!==i,wt=St&&bt.test(navigator.userAgent),At="touch",Ct="pen",Et="mouse",Pt="kinect",Lt=25,Mt=1,kt=2,It=4,Vt=8,Dt=1,Rt=2,Nt=4,Ot=8,Gt=16,Ft=Rt|Nt,jt=Ot|Gt,Ht=Ft|jt,zt=["x","y"],Xt=["clientX","clientY"];T.prototype={handler:function(){},init:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(S(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(S(this.element),this.evWin,this.domHandler)}};var $t={mousedown:Mt,mousemove:kt,mouseup:It},Bt="mousedown",Yt="mousemove mouseup";u(O,T,{handler:function(t){var e=$t[t.type];e&Mt&&0===t.button&&(this.pressed=!0),e&kt&&1!==t.which&&(e=It),this.pressed&&(e&It&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:Et,srcEvent:t}))}});var Ut={pointerdown:Mt,pointermove:kt,pointerup:It,pointercancel:Vt,pointerout:Vt},qt={2:At,3:Ct,4:Et,5:Pt},Wt="pointerdown",Qt="pointermove pointerup pointercancel";t.MSPointerEvent&&!t.PointerEvent&&(Wt="MSPointerDown",Qt="MSPointerMove MSPointerUp MSPointerCancel"),u(G,T,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Ut[i],a=qt[t.pointerType]||t.pointerType,o=a==At,s=m(e,t.pointerId,"pointerId");r&Mt&&(0===t.button||o)?s<0&&(e.push(t),s=e.length-1):r&(It|Vt)&&(n=!0),s<0||(e[s]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:a,srcEvent:t}),n&&e.splice(s,1))}});var Zt={touchstart:Mt,touchmove:kt,touchend:It,touchcancel:Vt},Kt="touchstart",Jt="touchstart touchmove touchend touchcancel";u(F,T,{handler:function(t){var e=Zt[t.type];if(e===Mt&&(this.started=!0),this.started){var n=j.call(this,t,e);e&(It|Vt)&&n[0].length-n[1].length===0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:At,srcEvent:t})}}});var te={touchstart:Mt,touchmove:kt,touchend:It,touchcancel:Vt},ee="touchstart touchmove touchend touchcancel";u(H,T,{handler:function(t){var e=te[t.type],n=z.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:At,srcEvent:t})}});var ne=2500,ie=25;u(X,T,{handler:function(t,e,n){var i=n.pointerType==At,r=n.pointerType==Et;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)$.call(this,e,n);else if(r&&Y.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var re=_(ft.style,"touchAction"),ae=re!==i,oe="compute",se="auto",ue="manipulation",ce="none",le="pan-x",he="pan-y",de=W();U.prototype={set:function(t){t==oe&&(t=this.compute()),ae&&this.manager.element.style&&de[t]&&(this.manager.element.style[re]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return o(this.manager.recognizers,function(e){l(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),q(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)return void e.preventDefault();var i=this.actions,r=g(i,ce)&&!de[ce],a=g(i,he)&&!de[he],o=g(i,le)&&!de[le];if(r){var s=1===t.pointers.length,u=t.distance<2,c=t.deltaTime<250;if(s&&u&&c)return}return o&&a?void 0:r||a&&n&Ft||o&&n&jt?this.preventSrc(e):void 0},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var fe=1,pe=2,ge=4,ve=8,me=ve,ye=16,xe=32;Q.prototype={defaults:{},set:function(t){return ht(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(a(t,"recognizeWith",this))return this;var e=this.simultaneous;return t=J(t,this),e[t.id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return a(t,"dropRecognizeWith",this)?this:(t=J(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(a(t,"requireFailure",this))return this;var e=this.requireFail;return t=J(t,this),m(e,t)===-1&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(a(t,"dropRequireFailure",this))return this;t=J(t,this);var e=m(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){function e(e){n.manager.emit(e,t)}var n=this,i=this.state;i<ve&&e(n.options.event+Z(i)),e(n.options.event),t.additionalEvent&&e(t.additionalEvent),i>=ve&&e(n.options.event+Z(i))},tryEmit:function(t){return this.canEmit()?this.emit(t):void(this.state=xe)},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(xe|fe)))return!1;t++}return!0},recognize:function(t){var e=ht({},t);return l(this.options.enable,[this,e])?(this.state&(me|ye|xe)&&(this.state=fe),this.state=this.process(e),void(this.state&(pe|ge|ve|ye)&&this.tryEmit(e))):(this.reset(),void(this.state=xe))},process:function(t){},getTouchAction:function(){},reset:function(){}},u(tt,Q,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=e&(pe|ge),r=this.attrTest(t);return i&&(n&Vt||!r)?e|ye:i||r?n&It?e|ve:e&pe?e|ge:pe:xe}}),u(et,tt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Ht},getTouchAction:function(){var t=this.options.direction,e=[];return t&Ft&&e.push(he),t&jt&&e.push(le),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,a=t.deltaX,o=t.deltaY;return r&e.direction||(e.direction&Ft?(r=0===a?Dt:a<0?Rt:Nt,n=a!=this.pX,i=Math.abs(t.deltaX)):(r=0===o?Dt:o<0?Ot:Gt,n=o!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return tt.prototype.attrTest.call(this,t)&&(this.state&pe||!(this.state&pe)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=K(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),u(nt,tt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[ce]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&pe)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),u(it,Q,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[se]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,a=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(It|Vt)&&!a)this.reset();else if(t.eventType&Mt)this.reset(),this._timer=r(function(){this.state=me,this.tryEmit()},e.time,this);else if(t.eventType&It)return me;return xe},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===me&&(t&&t.eventType&It?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=mt(),this.manager.emit(this.options.event,this._input)))}}),u(rt,tt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[ce]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&pe)}}),u(at,tt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:Ft|jt,pointers:1},getTouchAction:function(){return et.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(Ft|jt)?e=t.overallVelocity:n&Ft?e=t.overallVelocityX:n&jt&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&vt(e)>this.options.velocity&&t.eventType&It},emit:function(t){var e=K(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),u(ot,Q,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[ue]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,a=t.deltaTime<e.time;if(this.reset(),t.eventType&Mt&&0===this.count)return this.failTimeout();if(i&&a&&n){if(t.eventType!=It)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||V(this.pCenter,t.center)<e.posThreshold;this.pTime=t.timeStamp,this.pCenter=t.center,s&&o?this.count+=1:this.count=1,this._input=t;var u=this.count%e.taps;if(0===u)return this.hasRequireFailures()?(this._timer=r(function(){this.state=me,this.tryEmit()},e.interval,this),pe):me}return xe},failTimeout:function(){return this._timer=r(function(){this.state=xe},this.options.interval,this),xe},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==me&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),st.VERSION="2.0.7",st.defaults={domEvents:!1,touchAction:oe,enable:!0,inputTarget:null,inputClass:null,preset:[[rt,{enable:!1}],[nt,{enable:!1},["rotate"]],[at,{direction:Ft}],[et,{direction:Ft},["swipe"]],[ot],[ot,{event:"doubletap",taps:2},["tap"]],[it]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};var _e=1,be=2;ut.prototype={set:function(t){return ht(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?be:_e},recognize:function(t){var e=this.session;if(!e.stopped){this.touchAction.preventDefaults(t);var n,i=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&me)&&(r=e.curRecognizer=null);for(var a=0;a<i.length;)n=i[a],e.stopped===be||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&n.state&(pe|ge|ve)&&(r=e.curRecognizer=n),a++}},get:function(t){if(t instanceof Q)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(a(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(a(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=m(e,t);n!==-1&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==i&&e!==i){var n=this.handlers;return o(v(t),function(t){n[t]=n[t]||[],n[t].push(e)}),this}},off:function(t,e){if(t!==i){var n=this.handlers;return o(v(t),function(t){e?n[t]&&n[t].splice(m(n[t],e),1):delete n[t]}),this}},emit:function(t,e){this.options.domEvents&&lt(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ct(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},ht(st,{INPUT_START:Mt,INPUT_MOVE:kt,INPUT_END:It,INPUT_CANCEL:Vt,STATE_POSSIBLE:fe,STATE_BEGAN:pe,STATE_CHANGED:ge,STATE_ENDED:ve,STATE_RECOGNIZED:me,STATE_CANCELLED:ye,STATE_FAILED:xe,DIRECTION_NONE:Dt,DIRECTION_LEFT:Rt,DIRECTION_RIGHT:Nt,DIRECTION_UP:Ot,DIRECTION_DOWN:Gt,DIRECTION_HORIZONTAL:Ft,DIRECTION_VERTICAL:jt,DIRECTION_ALL:Ht,Manager:ut,Input:T,TouchAction:U,TouchInput:H,MouseInput:O,PointerEventInput:G,TouchMouseInput:X,SingleTouchInput:F,Recognizer:Q,AttrRecognizer:tt,Tap:ot,Pan:et,Swipe:at,Pinch:nt,Rotate:rt,Press:it,on:d,off:f,each:o,merge:xt,extend:yt,assign:ht,inherit:u,bindFn:c,prefixed:_});var Se="undefined"!=typeof t?t:"undefined"!=typeof self?self:{};Se.Hammer=st,"function"==typeof define&&define.amd?define(function(){return st}):"undefined"!=typeof module&&module.exports?module.exports=st:t[n]=st}(window,document,"Hammer"),function(t){"function"==typeof define&&define.amd?define(["jquery","hammerjs"],t):"object"==typeof exports?t(require("jquery"),require("hammerjs")):t(jQuery,Hammer)}(function(t,e){function n(n,i){var r=t(n);r.data("hammer")||r.data("hammer",new e(r[0],i))}t.fn.hammer=function(t){return this.each(function(){n(this,t)})},e.Manager.prototype.emit=function(e){return function(n,i){e.call(this,n,i),t(this.element).trigger({type:n,gesture:i})}}(e.Manager.prototype.emit)}),function(t,e){"undefined"!=typeof module?module.exports=e():"function"==typeof define&&"object"==typeof define.amd?define(e):this[t]=e()}("Clusterize",function(){"use strict";function t(t,e,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function e(t,e,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function n(t){return"[object Array]"===Object.prototype.toString.call(t)}function i(t,e){return window.getComputedStyle?window.getComputedStyle(e)[t]:e.currentStyle[t]}var r=function(){for(var t=3,e=document.createElement("b"),n=e.all||[];e.innerHTML="<!--[if gt IE "+ ++t+"]><i><![endif]-->",n[0];);return t>4?t:document.documentMode}(),a=navigator.platform.toLowerCase().indexOf("mac")+1,o=function(i){if(!(this instanceof o))return new o(i);var r=this,s={item_height:0,block_height:0,rows_in_block:50,rows_in_cluster:0,cluster_height:0,blocks_in_cluster:4,tag:null,content_tag:null,show_no_data_row:!0,no_data_class:"clusterize-no-data",no_data_text:"No data",keep_parity:!0,callbacks:{},scroll_top:0};r.options={};for(var u,c=["rows_in_block","blocks_in_cluster","show_no_data_row","no_data_class","no_data_text","keep_parity","tag","callbacks"],l=0;u=c[l];l++)r.options[u]="undefined"!=typeof i[u]&&null!=i[u]?i[u]:s[u];for(var h,d=["scroll","content"],l=0;h=d[l];l++)if(r[h+"_elem"]=i[h+"Id"]?document.getElementById(i[h+"Id"]):i[h+"Elem"],!r[h+"_elem"])throw new Error("Error! Could not find "+h+" element");r.content_elem.hasAttribute("tabindex")||r.content_elem.setAttribute("tabindex",0);var f=n(i.rows)?i.rows:r.fetchMarkup(),p={data:"",bottom:0},g=r.scroll_elem.scrollTop;r.exploreEnvironment(f),r.insertToDOM(f,p),r.scroll_elem.scrollTop=g;var v=!1,m=0,y=!1,x=function(){a&&(y||(r.content_elem.style.pointerEvents="none"),y=!0,clearTimeout(m),m=setTimeout(function(){r.content_elem.style.pointerEvents="auto",y=!1},50)),v!=(v=r.getClusterNum())&&r.insertToDOM(f,p),r.options.callbacks.scrollingProgress&&r.options.callbacks.scrollingProgress(r.getScrollProgress())},_=0,b=function(){clearTimeout(_),_=setTimeout(r.refresh,100)};t("scroll",r.scroll_elem,x),t("resize",window,b),r.destroy=function(t){e("scroll",r.scroll_elem,x),e("resize",window,b),r.html((t?r.generateEmptyRow():f).join(""))},r.refresh=function(){r.getRowsHeight(f)&&r.update(f)},r.update=function(t){f=n(t)?t:[];var e=r.scroll_elem.scrollTop;f.length*r.options.item_height<e&&(r.scroll_elem.scrollTop=0,v=0),r.insertToDOM(f,p),r.scroll_elem.scrollTop=e},r.clear=function(){r.update([])},r.getRowsAmount=function(){return f.length},r.getScrollProgress=function(){return this.options.scroll_top/(f.length*this.options.item_height)*100||0};var S=function(t,e){var i=n(e)?e:[];i.length&&(f="append"==t?f.concat(i):i.concat(f),r.insertToDOM(f,p))};r.append=function(t){S("append",t)},r.prepend=function(t){S("prepend",t)}};return o.prototype={constructor:o,fetchMarkup:function(){for(var t=[],e=this.getChildNodes(this.content_elem);e.length;)t.push(e.shift().outerHTML);return t},exploreEnvironment:function(t){var e=this.options;e.content_tag=this.content_elem.tagName.toLowerCase(),t.length&&(r&&r<=9&&!e.tag&&(e.tag=t[0].match(/<([^>\s\/]*)/)[1].toLowerCase()),this.content_elem.children.length<=1&&this.html(t[0]+t[0]+t[0]),e.tag||(e.tag=this.content_elem.children[0].tagName.toLowerCase()),this.getRowsHeight(t))},getRowsHeight:function(t){var e=this.options,n=e.item_height;if(e.cluster_height=0,t.length){var r=this.content_elem.children,a=r[Math.floor(r.length/2)];if(e.item_height=a.offsetHeight,"tr"==e.tag&&"collapse"!=i("borderCollapse",this.content_elem)&&(e.item_height+=parseInt(i("borderSpacing",this.content_elem),10)||0),"tr"!=e.tag){var o=parseInt(i("marginTop",a),10)||0,s=parseInt(i("marginBottom",a),10)||0;e.item_height+=Math.max(o,s)}return e.block_height=e.item_height*e.rows_in_block,e.rows_in_cluster=e.blocks_in_cluster*e.rows_in_block,e.cluster_height=e.blocks_in_cluster*e.block_height,n!=e.item_height}},getClusterNum:function(){return this.options.scroll_top=this.scroll_elem.scrollTop,Math.floor(this.options.scroll_top/(this.options.cluster_height-this.options.block_height))||0},generateEmptyRow:function(){var t=this.options;if(!t.tag||!t.show_no_data_row)return[];var e,n=document.createElement(t.tag),i=document.createTextNode(t.no_data_text);return n.className=t.no_data_class,"tr"==t.tag&&(e=document.createElement("td"),e.colSpan=100,e.appendChild(i)),n.appendChild(e||i),[n.outerHTML]},generate:function(t,e){var n=this.options,i=t.length;if(i<n.rows_in_block)return{top_offset:0,bottom_offset:0,rows_above:0,rows:i?t:this.generateEmptyRow()};n.cluster_height||this.exploreEnvironment(t);var r=Math.max((n.rows_in_cluster-n.rows_in_block)*e,0),a=r+n.rows_in_cluster,o=Math.max(r*n.item_height,0),s=Math.max((i-a)*n.item_height,0),u=[],c=r;o<1&&c++;for(var l=r;l<a;l++)t[l]&&u.push(t[l]);return{top_offset:o,bottom_offset:s,rows_above:c,rows:u}},renderExtraTag:function(t,e){var n=document.createElement(this.options.tag),i="clusterize-";return n.className=[i+"extra-row",i+t].join(" "),e&&(n.style.height=e+"px"),n.outerHTML},insertToDOM:function(t,e){var n=this.generate(t,this.getClusterNum()),i=n.rows.join(""),r=this.checkChanges("data",i,e),a=this.checkChanges("bottom",n.bottom_offset,e),o=this.options.callbacks,s=[];r?(n.top_offset&&(this.options.keep_parity&&s.push(this.renderExtraTag("keep-parity")),s.push(this.renderExtraTag("top-space",n.top_offset))),s.push(i),n.bottom_offset&&s.push(this.renderExtraTag("bottom-space",n.bottom_offset)),o.clusterWillChange&&o.clusterWillChange(),this.html(s.join("")),"ol"==this.options.content_tag&&this.content_elem.setAttribute("start",n.rows_above),o.clusterChanged&&o.clusterChanged()):a&&(this.content_elem.lastChild.style.height=n.bottom_offset+"px")},html:function(t){var e=this.content_elem;if(r&&r<=9&&"tr"==this.options.tag){var n,i=document.createElement("div");for(i.innerHTML="<table><tbody>"+t+"</tbody></table>";n=e.lastChild;)e.removeChild(n);for(var a=this.getChildNodes(i.firstChild.firstChild);a.length;)e.appendChild(a.shift())}else e.innerHTML=t},getChildNodes:function(t){for(var e=t.children,n=[],i=0,r=e.length;i<r;i++)n.push(e[i]);return n},checkChanges:function(t,e,n){var i=e!=n[t];return n[t]=e,i}},o}),!function(){function t(t){return t&&(t.ownerDocument||t.document||t).documentElement}function e(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function i(t){return null===t?NaN:+t}function r(t){return!isNaN(t)}function a(t){return{left:function(e,n,i,r){for(arguments.length<3&&(i=0),arguments.length<4&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)<0?i=a+1:r=a}return i},right:function(e,n,i,r){for(arguments.length<3&&(i=0),arguments.length<4&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)>0?r=a:i=a+1}return i}}}function o(t){return t.length}function s(t){for(var e=1;t*e%1;)e*=10;return e}function u(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function c(){this._=Object.create(null)}function l(t){return(t+="")===xo||t[0]===_o?_o+t:t}function h(t){return(t+="")[0]===_o?t.slice(1):t}function d(t){return l(t)in this._}function f(t){return(t=l(t))in this._&&delete this._[t]}function p(){var t=[];for(var e in this._)t.push(h(e));return t}function g(){var t=0;for(var e in this._)++t;return t}function v(){for(var t in this._)return!1;return!0}function m(){this._=Object.create(null)}function y(t){return t}function x(t,e,n){return function(){var i=n.apply(e,arguments);return i===e?t:i}}function _(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,i=bo.length;n<i;++n){var r=bo[n]+e;if(r in t)return r}}function b(){}function S(){}function T(t){function e(){for(var e,i=n,r=-1,a=i.length;++r<a;)(e=i[r].on)&&e.apply(this,arguments);return t}var n=[],i=new c;return e.on=function(e,r){var a,o=i.get(e);return arguments.length<2?o&&o.on:(o&&(o.on=null,n=n.slice(0,a=n.indexOf(o)).concat(n.slice(a+1)),i.remove(e)),r&&n.push(i.set(e,{on:r})),t)},e}function w(){so.event.preventDefault()}function A(){for(var t,e=so.event;t=e.sourceEvent;)e=t;return e}function C(t){for(var e=new S,n=0,i=arguments.length;++n<i;)e[arguments[n]]=T(e);return e.of=function(n,i){return function(r){try{var a=r.sourceEvent=so.event;r.target=t,so.event=r,e[r.type].apply(n,i)}finally{so.event=a}}},e}function E(t){return To(t,Eo),t}function P(t){return"function"==typeof t?t:function(){return wo(t,this)}}function L(t){return"function"==typeof t?t:function(){return Ao(t,this)}}function M(t,e){function n(){this.removeAttribute(t)}function i(){this.removeAttributeNS(t.space,t.local)}function r(){this.setAttribute(t,e)}function a(){this.setAttributeNS(t.space,t.local,e)}function o(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}function s(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}return t=so.ns.qualify(t),null==e?t.local?i:n:"function"==typeof e?t.local?s:o:t.local?a:r}function k(t){return t.trim().replace(/\s+/g," ")}function I(t){return new RegExp("(?:^|\\s+)"+so.requote(t)+"(?:\\s+|$)","g")}function V(t){return(t+"").trim().split(/^|\s+/)}function D(t,e){function n(){for(var n=-1;++n<r;)t[n](this,e)}function i(){for(var n=-1,i=e.apply(this,arguments);++n<r;)t[n](this,i)}t=V(t).map(R);var r=t.length;return"function"==typeof e?i:n}function R(t){var e=I(t);return function(n,i){if(r=n.classList)return i?r.add(t):r.remove(t);var r=n.getAttribute("class")||"";i?(e.lastIndex=0,e.test(r)||n.setAttribute("class",k(r+" "+t))):n.setAttribute("class",k(r.replace(e," ")))}}function N(t,e,n){function i(){this.style.removeProperty(t)}function r(){this.style.setProperty(t,e,n)}function a(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}return null==e?i:"function"==typeof e?a:r}function O(t,e){function n(){delete this[t]}function i(){this[t]=e}function r(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}return null==e?n:"function"==typeof e?r:i}function G(t){function e(){var e=this.ownerDocument,n=this.namespaceURI;return n===Po&&e.documentElement.namespaceURI===Po?e.createElement(t):e.createElementNS(n,t)}function n(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=so.ns.qualify(t)).local?n:e}function F(){var t=this.parentNode;t&&t.removeChild(this)}function j(t){return{__data__:t}}function H(t){return function(){return Co(this,t)}}function z(t){return arguments.length||(t=n),function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}function X(t,e){for(var n=0,i=t.length;n<i;n++)for(var r,a=t[n],o=0,s=a.length;o<s;o++)(r=a[o])&&e(r,o,n);return t}function $(t){return To(t,Mo),t}function B(t){var e,n;return function(i,r,a){var o,s=t[a].update,u=s.length;for(a!=n&&(n=a,e=0),r>=e&&(e=r+1);!(o=s[e])&&++e<u;);return o}}function Y(t,e,n){function i(){var e=this[o];e&&(this.removeEventListener(t,e,e.$),delete this[o])}function r(){var r=u(e,co(arguments));i.call(this),this.addEventListener(t,this[o]=r,r.$=n),r._=e}function a(){var e,n=new RegExp("^__on([^.]+)"+so.requote(t)+"$");for(var i in this)if(e=i.match(n)){var r=this[i];this.removeEventListener(e[1],r,r.$),delete this[i]}}var o="__on"+t,s=t.indexOf("."),u=U;s>0&&(t=t.slice(0,s));var c=ko.get(t);return c&&(t=c,u=q),s?e?r:i:e?b:a}function U(t,e){return function(n){var i=so.event;so.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{so.event=i}}}function q(t,e){var n=U(t,e);return function(t){var e=this,i=t.relatedTarget;i&&(i===e||8&i.compareDocumentPosition(e))||n.call(e,t)}}function W(n){var i=".dragsuppress-"+ ++Vo,r="click"+i,a=so.select(e(n)).on("touchmove"+i,w).on("dragstart"+i,w).on("selectstart"+i,w);if(null==Io&&(Io=!("onselectstart"in n)&&_(n.style,"userSelect")),Io){var o=t(n).style,s=o[Io];o[Io]="none"}return function(t){if(a.on(i,null),Io&&(o[Io]=s),t){var e=function(){a.on(r,null)};a.on(r,function(){w(),e()},!0),setTimeout(e,0)}}}function Q(t,n){n.changedTouches&&(n=n.changedTouches[0]);var i=t.ownerSVGElement||t;if(i.createSVGPoint){var r=i.createSVGPoint();if(Do<0){var a=e(t);if(a.scrollX||a.scrollY){i=so.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=i[0][0].getScreenCTM();Do=!(o.f||o.e),i.remove()}}return Do?(r.x=n.pageX,r.y=n.pageY):(r.x=n.clientX,r.y=n.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var s=t.getBoundingClientRect();return[n.clientX-s.left-t.clientLeft,n.clientY-s.top-t.clientTop]}function Z(){return so.event.changedTouches[0].identifier}function K(t){return t>0?1:t<0?-1:0}function J(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function tt(t){return t>1?0:t<-1?Oo:Math.acos(t)}function et(t){return t>1?jo:t<-1?-jo:Math.asin(t)}function nt(t){return((t=Math.exp(t))-1/t)/2}function it(t){return((t=Math.exp(t))+1/t)/2}function rt(t){return((t=Math.exp(2*t))-1)/(t+1)}function at(t){return(t=Math.sin(t/2))*t}function ot(){}function st(t,e,n){return this instanceof st?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof st?new st(t.h,t.s,t.l):bt(""+t,St,st):new st(t,e,n)}function ut(t,e,n){function i(t){return t>360?t-=360:t<0&&(t+=360),t<60?a+(o-a)*t/60:t<180?o:t<240?a+(o-a)*(240-t)/60:a}function r(t){return Math.round(255*i(t))}var a,o;return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,n=n<0?0:n>1?1:n,o=n<=.5?n*(1+e):n+e-n*e,a=2*n-o,new mt(r(t+120),r(t),r(t-120))}function ct(t,e,n){return this instanceof ct?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof ct?new ct(t.h,t.c,t.l):t instanceof ht?ft(t.l,t.a,t.b):ft((t=Tt((t=so.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new ct(t,e,n)}function lt(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new ht(n,Math.cos(t*=Ho)*e,Math.sin(t)*e)}function ht(t,e,n){return this instanceof ht?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof ht?new ht(t.l,t.a,t.b):t instanceof ct?lt(t.h,t.c,t.l):Tt((t=mt(t)).r,t.g,t.b):new ht(t,e,n)}function dt(t,e,n){var i=(t+16)/116,r=i+e/500,a=i-n/200;return r=pt(r)*Ko,i=pt(i)*Jo,a=pt(a)*ts,new mt(vt(3.2404542*r-1.5371385*i-.4985314*a),vt(-.969266*r+1.8760108*i+.041556*a),vt(.0556434*r-.2040259*i+1.0572252*a))}function ft(t,e,n){return t>0?new ct(Math.atan2(n,e)*zo,Math.sqrt(e*e+n*n),t):new ct(NaN,NaN,t)}function pt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function gt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function vt(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function mt(t,e,n){return this instanceof mt?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof mt?new mt(t.r,t.g,t.b):bt(""+t,mt,ut):new mt(t,e,n)}function yt(t){return new mt(t>>16,t>>8&255,255&t)}function xt(t){return yt(t)+""}function _t(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function bt(t,e,n){var i,r,a,o=0,s=0,u=0;if(i=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(r=i[2].split(","),i[1]){case"hsl":return n(parseFloat(r[0]),parseFloat(r[1])/100,parseFloat(r[2])/100);case"rgb":return e(At(r[0]),At(r[1]),At(r[2]))}return(a=is.get(t))?e(a.r,a.g,a.b):(null==t||"#"!==t.charAt(0)||isNaN(a=parseInt(t.slice(1),16))||(4===t.length?(o=(3840&a)>>4,o=o>>4|o,s=240&a,s=s>>4|s,u=15&a,u=u<<4|u):7===t.length&&(o=(16711680&a)>>16,s=(65280&a)>>8,u=255&a)),e(o,s,u))}function St(t,e,n){var i,r,a=Math.min(t/=255,e/=255,n/=255),o=Math.max(t,e,n),s=o-a,u=(o+a)/2;return s?(r=u<.5?s/(o+a):s/(2-o-a),i=t==o?(e-n)/s+(e<n?6:0):e==o?(n-t)/s+2:(t-e)/s+4,i*=60):(i=NaN,r=u>0&&u<1?0:i),new st(i,r,u)}function Tt(t,e,n){t=wt(t),e=wt(e),n=wt(n);var i=gt((.4124564*t+.3575761*e+.1804375*n)/Ko),r=gt((.2126729*t+.7151522*e+.072175*n)/Jo),a=gt((.0193339*t+.119192*e+.9503041*n)/ts);return ht(116*r-16,500*(i-r),200*(r-a))}function wt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function At(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}function Ct(t){return"function"==typeof t?t:function(){return t}}function Et(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=null),Pt(e,n,t,i)}}function Pt(t,e,n,i){function r(){var t,e=u.status;if(!e&&Mt(u)||e>=200&&e<300||304===e){try{t=n.call(a,u)}catch(t){return void o.error.call(a,t)}o.load.call(a,t)}else o.error.call(a,u)}var a={},o=so.dispatch("beforesend","progress","load","error"),s={},u=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in u||!/^(http(s)?:)?\/\//.test(t)||(u=new XDomainRequest),"onload"in u?u.onload=u.onerror=r:u.onreadystatechange=function(){u.readyState>3&&r()},u.onprogress=function(t){var e=so.event;so.event=t;try{o.progress.call(a,u)}finally{so.event=e}},a.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?s[t]:(null==e?delete s[t]:s[t]=e+"",a)},a.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",a):e},a.responseType=function(t){return arguments.length?(c=t,a):c},a.response=function(t){return n=t,a},["get","post"].forEach(function(t){a[t]=function(){return a.send.apply(a,[t].concat(co(arguments)))}}),a.send=function(n,i,r){if(2===arguments.length&&"function"==typeof i&&(r=i,i=null),u.open(n,t,!0),null==e||"accept"in s||(s.accept=e+",*/*"),u.setRequestHeader)for(var l in s)u.setRequestHeader(l,s[l]);return null!=e&&u.overrideMimeType&&u.overrideMimeType(e),null!=c&&(u.responseType=c),null!=r&&a.on("error",r).on("load",function(t){r(null,t)}),o.beforesend.call(a,u),u.send(null==i?null:i),a},a.abort=function(){return u.abort(),a},so.rebind(a,o,"on"),null==i?a:a.get(Lt(i))}function Lt(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}function Mt(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function kt(t,e,n){var i=arguments.length;i<2&&(e=0),i<3&&(n=Date.now());var r=n+e,a={c:t,t:r,n:null};return as?as.n=a:rs=a,as=a,os||(ss=clearTimeout(ss),
os=1,us(It)),a}function It(){var t=Vt(),e=Dt()-t;e>24?(isFinite(e)&&(clearTimeout(ss),ss=setTimeout(It,e)),os=0):(os=1,us(It))}function Vt(){for(var t=Date.now(),e=rs;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Dt(){for(var t,e=rs,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:rs=e.n;return as=t,n}function Rt(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function Nt(t,e){var n=Math.pow(10,3*yo(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}}function Ot(t){var e=t.decimal,n=t.thousands,i=t.grouping,r=t.currency,a=i&&n?function(t,e){for(var r=t.length,a=[],o=0,s=i[0],u=0;r>0&&s>0&&(u+s+1>e&&(s=Math.max(1,e-u)),a.push(t.substring(r-=s,r+s)),!((u+=s+1)>e));)s=i[o=(o+1)%i.length];return a.reverse().join(n)}:y;return function(t){var n=ls.exec(t),i=n[1]||" ",o=n[2]||">",s=n[3]||"-",u=n[4]||"",c=n[5],l=+n[6],h=n[7],d=n[8],f=n[9],p=1,g="",v="",m=!1,y=!0;switch(d&&(d=+d.substring(1)),(c||"0"===i&&"="===o)&&(c=i="0",o="="),f){case"n":h=!0,f="g";break;case"%":p=100,v="%",f="f";break;case"p":p=100,v="%",f="r";break;case"b":case"o":case"x":case"X":"#"===u&&(g="0"+f.toLowerCase());case"c":y=!1;case"d":m=!0,d=0;break;case"s":p=-1,f="r"}"$"===u&&(g=r[0],v=r[1]),"r"!=f||d||(f="g"),null!=d&&("g"==f?d=Math.max(1,Math.min(21,d)):"e"!=f&&"f"!=f||(d=Math.max(0,Math.min(20,d)))),f=hs.get(f)||Gt;var x=c&&h;return function(t){var n=v;if(m&&t%1)return"";var r=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===s?"":s;if(p<0){var u=so.formatPrefix(t,d);t=u.scale(t),n=u.symbol+v}else t*=p;t=f(t,d);var _,b,S=t.lastIndexOf(".");if(S<0){var T=y?t.lastIndexOf("e"):-1;T<0?(_=t,b=""):(_=t.substring(0,T),b=t.substring(T))}else _=t.substring(0,S),b=e+t.substring(S+1);!c&&h&&(_=a(_,1/0));var w=g.length+_.length+b.length+(x?0:r.length),A=w<l?new Array(w=l-w+1).join(i):"";return x&&(_=a(A+_,A.length?l-b.length:1/0)),r+=g,t=_+b,("<"===o?r+t+A:">"===o?A+r+t:"^"===o?A.substring(0,w>>=1)+r+t+A.substring(w):r+(x?t:A+t))+n}}}function Gt(t){return t+""}function Ft(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function jt(t,e,n){function i(e){var n=t(e),i=a(n,1);return e-n<i-e?n:i}function r(n){return e(n=t(new fs(n-1)),1),n}function a(t,n){return e(t=new fs((+t)),n),t}function o(t,i,a){var o=r(t),s=[];if(a>1)for(;o<i;)n(o)%a||s.push(new Date((+o))),e(o,1);else for(;o<i;)s.push(new Date((+o))),e(o,1);return s}function s(t,e,n){try{fs=Ft;var i=new Ft;return i._=t,o(i,e,n)}finally{fs=Date}}t.floor=t,t.round=i,t.ceil=r,t.offset=a,t.range=o;var u=t.utc=Ht(t);return u.floor=u,u.round=Ht(i),u.ceil=Ht(r),u.offset=Ht(a),u.range=s,t}function Ht(t){return function(e,n){try{fs=Ft;var i=new Ft;return i._=e,t(i,n)._}finally{fs=Date}}}function zt(t){function e(t){function e(e){for(var n,r,a,o=[],s=-1,u=0;++s<i;)37===t.charCodeAt(s)&&(o.push(t.slice(u,s)),null!=(r=gs[n=t.charAt(++s)])&&(n=t.charAt(++s)),(a=P[n])&&(n=a(e,null==r?"e"===n?" ":"0":r)),o.push(n),u=s+1);return o.push(t.slice(u,s)),o.join("")}var i=t.length;return e.parse=function(e){var i={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},r=n(i,t,e,0);if(r!=e.length)return null;"p"in i&&(i.H=i.H%12+12*i.p);var a=null!=i.Z&&fs!==Ft,o=new(a?Ft:fs);return"j"in i?o.setFullYear(i.y,0,i.j):"W"in i||"U"in i?("w"in i||(i.w="W"in i?1:0),o.setFullYear(i.y,0,1),o.setFullYear(i.y,0,"W"in i?(i.w+6)%7+7*i.W-(o.getDay()+5)%7:i.w+7*i.U-(o.getDay()+6)%7)):o.setFullYear(i.y,i.m,i.d),o.setHours(i.H+(i.Z/100|0),i.M+i.Z%100,i.S,i.L),a?o._:o},e.toString=function(){return t},e}function n(t,e,n,i){for(var r,a,o,s=0,u=e.length,c=n.length;s<u;){if(i>=c)return-1;if(r=e.charCodeAt(s++),37===r){if(o=e.charAt(s++),a=L[o in gs?e.charAt(s++):o],!a||(i=a(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}function i(t,e,n){S.lastIndex=0;var i=S.exec(e.slice(n));return i?(t.w=T.get(i[0].toLowerCase()),n+i[0].length):-1}function r(t,e,n){_.lastIndex=0;var i=_.exec(e.slice(n));return i?(t.w=b.get(i[0].toLowerCase()),n+i[0].length):-1}function a(t,e,n){C.lastIndex=0;var i=C.exec(e.slice(n));return i?(t.m=E.get(i[0].toLowerCase()),n+i[0].length):-1}function o(t,e,n){w.lastIndex=0;var i=w.exec(e.slice(n));return i?(t.m=A.get(i[0].toLowerCase()),n+i[0].length):-1}function s(t,e,i){return n(t,P.c.toString(),e,i)}function u(t,e,i){return n(t,P.x.toString(),e,i)}function c(t,e,i){return n(t,P.X.toString(),e,i)}function l(t,e,n){var i=x.get(e.slice(n,n+=2).toLowerCase());return null==i?-1:(t.p=i,n)}var h=t.dateTime,d=t.date,f=t.time,p=t.periods,g=t.days,v=t.shortDays,m=t.months,y=t.shortMonths;e.utc=function(t){function n(t){try{fs=Ft;var e=new fs;return e._=t,i(e)}finally{fs=Date}}var i=e(t);return n.parse=function(t){try{fs=Ft;var e=i.parse(t);return e&&e._}finally{fs=Date}},n.toString=i.toString,n},e.multi=e.utc.multi=ue;var x=so.map(),_=$t(g),b=Bt(g),S=$t(v),T=Bt(v),w=$t(m),A=Bt(m),C=$t(y),E=Bt(y);p.forEach(function(t,e){x.set(t.toLowerCase(),e)});var P={a:function(t){return v[t.getDay()]},A:function(t){return g[t.getDay()]},b:function(t){return y[t.getMonth()]},B:function(t){return m[t.getMonth()]},c:e(h),d:function(t,e){return Xt(t.getDate(),e,2)},e:function(t,e){return Xt(t.getDate(),e,2)},H:function(t,e){return Xt(t.getHours(),e,2)},I:function(t,e){return Xt(t.getHours()%12||12,e,2)},j:function(t,e){return Xt(1+ds.dayOfYear(t),e,3)},L:function(t,e){return Xt(t.getMilliseconds(),e,3)},m:function(t,e){return Xt(t.getMonth()+1,e,2)},M:function(t,e){return Xt(t.getMinutes(),e,2)},p:function(t){return p[+(t.getHours()>=12)]},S:function(t,e){return Xt(t.getSeconds(),e,2)},U:function(t,e){return Xt(ds.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return Xt(ds.mondayOfYear(t),e,2)},x:e(d),X:e(f),y:function(t,e){return Xt(t.getFullYear()%100,e,2)},Y:function(t,e){return Xt(t.getFullYear()%1e4,e,4)},Z:oe,"%":function(){return"%"}},L={a:i,A:r,b:a,B:o,c:s,d:te,e:te,H:ne,I:ne,j:ee,L:ae,m:Jt,M:ie,p:l,S:re,U:Ut,w:Yt,W:qt,x:u,X:c,y:Qt,Y:Wt,Z:Zt,"%":se};return e}function Xt(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",a=r.length;return i+(a<n?new Array(n-a+1).join(e)+r:r)}function $t(t){return new RegExp("^(?:"+t.map(so.requote).join("|")+")","i")}function Bt(t){for(var e=new c,n=-1,i=t.length;++n<i;)e.set(t[n].toLowerCase(),n);return e}function Yt(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Ut(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n));return i?(t.U=+i[0],n+i[0].length):-1}function qt(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n));return i?(t.W=+i[0],n+i[0].length):-1}function Wt(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function Qt(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.y=Kt(+i[0]),n+i[0].length):-1}function Zt(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function Kt(t){return t+(t>68?1900:2e3)}function Jt(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function te(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function ee(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+3));return i?(t.j=+i[0],n+i[0].length):-1}function ne(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function ie(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function re(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function ae(t,e,n){vs.lastIndex=0;var i=vs.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function oe(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",i=yo(e)/60|0,r=yo(e)%60;return n+Xt(i,"0",2)+Xt(r,"0",2)}function se(t,e,n){ms.lastIndex=0;var i=ms.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function ue(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,i=t[n];!i[1](e);)i=t[++n];return i[0](e)}}function ce(){}function le(t,e,n){var i=n.s=t+e,r=i-t,a=i-r;n.t=t-a+(e-r)}function he(t,e){t&&bs.hasOwnProperty(t.type)&&bs[t.type](t,e)}function de(t,e,n){var i,r=-1,a=t.length-n;for(e.lineStart();++r<a;)i=t[r],e.point(i[0],i[1],i[2]);e.lineEnd()}function fe(t,e){var n=-1,i=t.length;for(e.polygonStart();++n<i;)de(t[n],e,1);e.polygonEnd()}function pe(){function t(t,e){t*=Ho,e=e*Ho/2+Oo/4;var n=t-i,o=n>=0?1:-1,s=o*n,u=Math.cos(e),c=Math.sin(e),l=a*c,h=r*u+l*Math.cos(s),d=l*o*Math.sin(s);Ts.add(Math.atan2(d,h)),i=t,r=u,a=c}var e,n,i,r,a;ws.point=function(o,s){ws.point=t,i=(e=o)*Ho,r=Math.cos(s=(n=s)*Ho/2+Oo/4),a=Math.sin(s)},ws.lineEnd=function(){t(e,n)}}function ge(t){var e=t[0],n=t[1],i=Math.cos(n);return[i*Math.cos(e),i*Math.sin(e),Math.sin(n)]}function ve(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function me(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function ye(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function xe(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function _e(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function be(t){return[Math.atan2(t[1],t[0]),et(t[2])]}function Se(t,e){return yo(t[0]-e[0])<Ro&&yo(t[1]-e[1])<Ro}function Te(t,e){t*=Ho;var n=Math.cos(e*=Ho);we(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function we(t,e,n){++As,Es+=(t-Es)/As,Ps+=(e-Ps)/As,Ls+=(n-Ls)/As}function Ae(){function t(t,r){t*=Ho;var a=Math.cos(r*=Ho),o=a*Math.cos(t),s=a*Math.sin(t),u=Math.sin(r),c=Math.atan2(Math.sqrt((c=n*u-i*s)*c+(c=i*o-e*u)*c+(c=e*s-n*o)*c),e*o+n*s+i*u);Cs+=c,Ms+=c*(e+(e=o)),ks+=c*(n+(n=s)),Is+=c*(i+(i=u)),we(e,n,i)}var e,n,i;Ns.point=function(r,a){r*=Ho;var o=Math.cos(a*=Ho);e=o*Math.cos(r),n=o*Math.sin(r),i=Math.sin(a),Ns.point=t,we(e,n,i)}}function Ce(){Ns.point=Te}function Ee(){function t(t,e){t*=Ho;var n=Math.cos(e*=Ho),o=n*Math.cos(t),s=n*Math.sin(t),u=Math.sin(e),c=r*u-a*s,l=a*o-i*u,h=i*s-r*o,d=Math.sqrt(c*c+l*l+h*h),f=i*o+r*s+a*u,p=d&&-tt(f)/d,g=Math.atan2(d,f);Vs+=p*c,Ds+=p*l,Rs+=p*h,Cs+=g,Ms+=g*(i+(i=o)),ks+=g*(r+(r=s)),Is+=g*(a+(a=u)),we(i,r,a)}var e,n,i,r,a;Ns.point=function(o,s){e=o,n=s,Ns.point=t,o*=Ho;var u=Math.cos(s*=Ho);i=u*Math.cos(o),r=u*Math.sin(o),a=Math.sin(s),we(i,r,a)},Ns.lineEnd=function(){t(e,n),Ns.lineEnd=Ce,Ns.point=Te}}function Pe(t,e){function n(n,i){return n=t(n,i),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,i){return n=e.invert(n,i),n&&t.invert(n[0],n[1])}),n}function Le(){return!0}function Me(t,e,n,i,r){var a=[],o=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],i=t[e];if(Se(n,i)){r.lineStart();for(var s=0;s<e;++s)r.point((n=t[s])[0],n[1]);return void r.lineEnd()}var u=new Ie(n,t,null,(!0)),c=new Ie(n,null,u,(!1));u.o=c,a.push(u),o.push(c),u=new Ie(i,t,null,(!1)),c=new Ie(i,null,u,(!0)),u.o=c,a.push(u),o.push(c)}}),o.sort(e),ke(a),ke(o),a.length){for(var s=0,u=n,c=o.length;s<c;++s)o[s].e=u=!u;for(var l,h,d=a[0];;){for(var f=d,p=!0;f.v;)if((f=f.n)===d)return;l=f.z,r.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(var s=0,c=l.length;s<c;++s)r.point((h=l[s])[0],h[1]);else i(f.x,f.n.x,1,r);f=f.n}else{if(p){l=f.p.z;for(var s=l.length-1;s>=0;--s)r.point((h=l[s])[0],h[1])}else i(f.x,f.p.x,-1,r);f=f.p}f=f.o,l=f.z,p=!p}while(!f.v);r.lineEnd()}}}function ke(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}function Ie(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}function Ve(t,e,n,i){return function(r,a){function o(e,n){var i=r(e,n);t(e=i[0],n=i[1])&&a.point(e,n)}function s(t,e){var n=r(t,e);v.point(n[0],n[1])}function u(){y.point=s,v.lineStart()}function c(){y.point=o,v.lineEnd()}function l(t,e){g.push([t,e]);var n=r(t,e);_.point(n[0],n[1])}function h(){_.lineStart(),g=[]}function d(){l(g[0][0],g[0][1]),_.lineEnd();var t,e=_.clean(),n=x.buffer(),i=n.length;if(g.pop(),p.push(g),g=null,i)if(1&e){t=n[0];var r,i=t.length-1,o=-1;if(i>0){for(b||(a.polygonStart(),b=!0),a.lineStart();++o<i;)a.point((r=t[o])[0],r[1]);a.lineEnd()}}else i>1&&2&e&&n.push(n.pop().concat(n.shift())),f.push(n.filter(De))}var f,p,g,v=e(a),m=r.invert(i[0],i[1]),y={point:o,lineStart:u,lineEnd:c,polygonStart:function(){y.point=l,y.lineStart=h,y.lineEnd=d,f=[],p=[]},polygonEnd:function(){y.point=o,y.lineStart=u,y.lineEnd=c,f=so.merge(f);var t=je(m,p);f.length?(b||(a.polygonStart(),b=!0),Me(f,Ne,t,n,a)):t&&(b||(a.polygonStart(),b=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),b&&(a.polygonEnd(),b=!1),f=p=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}},x=Re(),_=e(x),b=!1;return y}}function De(t){return t.length>1}function Re(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:b,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function Ne(t,e){return((t=t.x)[0]<0?t[1]-jo-Ro:jo-t[1])-((e=e.x)[0]<0?e[1]-jo-Ro:jo-e[1])}function Oe(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,o){var s=a>0?Oo:-Oo,u=yo(a-n);yo(u-Oo)<Ro?(t.point(n,i=(i+o)/2>0?jo:-jo),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(s,i),t.point(a,i),e=0):r!==s&&u>=Oo&&(yo(n-r)<Ro&&(n-=r*Ro),yo(a-s)<Ro&&(a-=s*Ro),i=Ge(n,i,a,o),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(s,i),e=0),t.point(n=a,i=o),r=s},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}}function Ge(t,e,n,i){var r,a,o=Math.sin(t-n);return yo(o)>Ro?Math.atan((Math.sin(e)*(a=Math.cos(i))*Math.sin(n)-Math.sin(i)*(r=Math.cos(e))*Math.sin(t))/(r*a*o)):(e+i)/2}function Fe(t,e,n,i){var r;if(null==t)r=n*jo,i.point(-Oo,r),i.point(0,r),i.point(Oo,r),i.point(Oo,0),i.point(Oo,-r),i.point(0,-r),i.point(-Oo,-r),i.point(-Oo,0),i.point(-Oo,r);else if(yo(t[0]-e[0])>Ro){var a=t[0]<e[0]?Oo:-Oo;r=n*a/2,i.point(-a,r),i.point(0,r),i.point(a,r)}else i.point(e[0],e[1])}function je(t,e){var n=t[0],i=t[1],r=[Math.sin(n),-Math.cos(n),0],a=0,o=0;Ts.reset();for(var s=0,u=e.length;s<u;++s){var c=e[s],l=c.length;if(l)for(var h=c[0],d=h[0],f=h[1]/2+Oo/4,p=Math.sin(f),g=Math.cos(f),v=1;;){v===l&&(v=0),t=c[v];var m=t[0],y=t[1]/2+Oo/4,x=Math.sin(y),_=Math.cos(y),b=m-d,S=b>=0?1:-1,T=S*b,w=T>Oo,A=p*x;if(Ts.add(Math.atan2(A*S*Math.sin(T),g*_+A*Math.cos(T))),a+=w?b+S*Go:b,w^d>=n^m>=n){var C=me(ge(h),ge(t));_e(C);var E=me(r,C);_e(E);var P=(w^b>=0?-1:1)*et(E[2]);(i>P||i===P&&(C[0]||C[1]))&&(o+=w^b>=0?1:-1)}if(!v++)break;d=m,p=x,g=_,h=t}}return(a<-Ro||a<Ro&&Ts<-Ro)^1&o}function He(t){function e(t,e){return Math.cos(t)*Math.cos(e)>a}function n(t){var n,a,u,c,l;return{lineStart:function(){c=u=!1,l=1},point:function(h,d){var f,p=[h,d],g=e(h,d),v=o?g?0:r(h,d):g?r(h+(h<0?Oo:-Oo),d):0;if(!n&&(c=u=g)&&t.lineStart(),g!==u&&(f=i(n,p),(Se(n,f)||Se(p,f))&&(p[0]+=Ro,p[1]+=Ro,g=e(p[0],p[1]))),g!==u)l=0,g?(t.lineStart(),f=i(p,n),t.point(f[0],f[1])):(f=i(n,p),t.point(f[0],f[1]),t.lineEnd()),n=f;else if(s&&n&&o^g){var m;v&a||!(m=i(p,n,!0))||(l=0,o?(t.lineStart(),t.point(m[0][0],m[0][1]),t.point(m[1][0],m[1][1]),t.lineEnd()):(t.point(m[1][0],m[1][1]),t.lineEnd(),t.lineStart(),t.point(m[0][0],m[0][1])))}!g||n&&Se(n,p)||t.point(p[0],p[1]),n=p,u=g,a=v},lineEnd:function(){u&&t.lineEnd(),n=null},clean:function(){return l|(c&&u)<<1}}}function i(t,e,n){var i=ge(t),r=ge(e),o=[1,0,0],s=me(i,r),u=ve(s,s),c=s[0],l=u-c*c;if(!l)return!n&&t;var h=a*u/l,d=-a*c/l,f=me(o,s),p=xe(o,h),g=xe(s,d);ye(p,g);var v=f,m=ve(p,v),y=ve(v,v),x=m*m-y*(ve(p,p)-1);if(!(x<0)){var _=Math.sqrt(x),b=xe(v,(-m-_)/y);if(ye(b,p),b=be(b),!n)return b;var S,T=t[0],w=e[0],A=t[1],C=e[1];w<T&&(S=T,T=w,w=S);var E=w-T,P=yo(E-Oo)<Ro,L=P||E<Ro;if(!P&&C<A&&(S=A,A=C,C=S),L?P?A+C>0^b[1]<(yo(b[0]-T)<Ro?A:C):A<=b[1]&&b[1]<=C:E>Oo^(T<=b[0]&&b[0]<=w)){var M=xe(v,(-m+_)/y);return ye(M,p),[b,be(M)]}}}function r(e,n){var i=o?t:Oo-t,r=0;return e<-i?r|=1:e>i&&(r|=2),n<-i?r|=4:n>i&&(r|=8),r}var a=Math.cos(t),o=a>0,s=yo(a)>Ro,u=gn(t,6*Ho);return Ve(e,n,u,o?[0,-t]:[-Oo,t-Oo])}function ze(t,e,n,i){return function(r){var a,o=r.a,s=r.b,u=o.x,c=o.y,l=s.x,h=s.y,d=0,f=1,p=l-u,g=h-c;if(a=t-u,p||!(a>0)){if(a/=p,p<0){if(a<d)return;a<f&&(f=a)}else if(p>0){if(a>f)return;a>d&&(d=a)}if(a=n-u,p||!(a<0)){if(a/=p,p<0){if(a>f)return;a>d&&(d=a)}else if(p>0){if(a<d)return;a<f&&(f=a)}if(a=e-c,g||!(a>0)){if(a/=g,g<0){if(a<d)return;a<f&&(f=a)}else if(g>0){if(a>f)return;a>d&&(d=a)}if(a=i-c,g||!(a<0)){if(a/=g,g<0){if(a>f)return;a>d&&(d=a)}else if(g>0){if(a<d)return;a<f&&(f=a)}return d>0&&(r.a={x:u+d*p,y:c+d*g}),f<1&&(r.b={x:u+f*p,y:c+f*g}),r}}}}}}function Xe(t,e,n,i){function r(i,r){return yo(i[0]-t)<Ro?r>0?0:3:yo(i[0]-n)<Ro?r>0?2:1:yo(i[1]-e)<Ro?r>0?1:0:r>0?3:2}function a(t,e){return o(t.x,e.x)}function o(t,e){var n=r(t,1),i=r(e,1);return n!==i?n-i:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(s){function u(t){for(var e=0,n=v.length,i=t[1],r=0;r<n;++r)for(var a,o=1,s=v[r],u=s.length,c=s[0];o<u;++o)a=s[o],c[1]<=i?a[1]>i&&J(c,a,t)>0&&++e:a[1]<=i&&J(c,a,t)<0&&--e,c=a;return 0!==e}function c(a,s,u,c){var l=0,h=0;if(null==a||(l=r(a,u))!==(h=r(s,u))||o(a,s)<0^u>0){do c.point(0===l||3===l?t:n,l>1?i:e);while((l=(l+u+4)%4)!==h)}else c.point(s[0],s[1])}function l(r,a){return t<=r&&r<=n&&e<=a&&a<=i}function h(t,e){l(t,e)&&s.point(t,e)}function d(){L.point=p,v&&v.push(m=[]),w=!0,T=!1,b=S=NaN}function f(){g&&(p(y,x),_&&T&&E.rejoin(),g.push(E.buffer())),L.point=h,T&&s.lineEnd()}function p(t,e){t=Math.max(-Gs,Math.min(Gs,t)),e=Math.max(-Gs,Math.min(Gs,e));var n=l(t,e);if(v&&m.push([t,e]),w)y=t,x=e,_=n,w=!1,n&&(s.lineStart(),s.point(t,e));else if(n&&T)s.point(t,e);else{var i={a:{x:b,y:S},b:{x:t,y:e}};P(i)?(T||(s.lineStart(),s.point(i.a.x,i.a.y)),s.point(i.b.x,i.b.y),n||s.lineEnd(),A=!1):n&&(s.lineStart(),s.point(t,e),A=!1)}b=t,S=e,T=n}var g,v,m,y,x,_,b,S,T,w,A,C=s,E=Re(),P=ze(t,e,n,i),L={point:h,lineStart:d,lineEnd:f,polygonStart:function(){s=E,g=[],v=[],A=!0},polygonEnd:function(){s=C,g=so.merge(g);var e=u([t,i]),n=A&&e,r=g.length;(n||r)&&(s.polygonStart(),n&&(s.lineStart(),c(null,null,1,s),s.lineEnd()),r&&Me(g,a,e,c,s),s.polygonEnd()),g=v=m=null}};return L}}function $e(t){var e=0,n=Oo/3,i=sn(t),r=i(e,n);return r.parallels=function(t){return arguments.length?i(e=t[0]*Oo/180,n=t[1]*Oo/180):[e/Oo*180,n/Oo*180]},r}function Be(t,e){function n(t,e){var n=Math.sqrt(a-2*r*Math.sin(e))/r;return[n*Math.sin(t*=r),o-n*Math.cos(t)]}var i=Math.sin(t),r=(i+Math.sin(e))/2,a=1+i*(2*r-i),o=Math.sqrt(a)/r;return n.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/r,et((a-(t*t+n*n)*r*r)/(2*r))]},n}function Ye(){function t(t,e){js+=r*t-i*e,i=t,r=e}var e,n,i,r;Bs.point=function(a,o){Bs.point=t,e=i=a,n=r=o},Bs.lineEnd=function(){t(e,n)}}function Ue(t,e){t<Hs&&(Hs=t),t>Xs&&(Xs=t),e<zs&&(zs=e),e>$s&&($s=e)}function qe(){function t(t,e){o.push("M",t,",",e,a)}function e(t,e){o.push("M",t,",",e),s.point=n}function n(t,e){o.push("L",t,",",e)}function i(){s.point=t}function r(){o.push("Z")}var a=We(4.5),o=[],s={point:t,lineStart:function(){s.point=e},lineEnd:i,polygonStart:function(){s.lineEnd=r},polygonEnd:function(){s.lineEnd=i,s.point=t},pointRadius:function(t){return a=We(t),s},result:function(){if(o.length){var t=o.join("");return o=[],t}}};return s}function We(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Qe(t,e){Es+=t,Ps+=e,++Ls}function Ze(){function t(t,i){var r=t-e,a=i-n,o=Math.sqrt(r*r+a*a);Ms+=o*(e+t)/2,ks+=o*(n+i)/2,Is+=o,Qe(e=t,n=i)}var e,n;Us.point=function(i,r){Us.point=t,Qe(e=i,n=r)}}function Ke(){Us.point=Qe}function Je(){function t(t,e){var n=t-i,a=e-r,o=Math.sqrt(n*n+a*a);Ms+=o*(i+t)/2,ks+=o*(r+e)/2,Is+=o,o=r*t-i*e,Vs+=o*(i+t),Ds+=o*(r+e),Rs+=3*o,Qe(i=t,r=e)}var e,n,i,r;Us.point=function(a,o){Us.point=t,Qe(e=i=a,n=r=o)},Us.lineEnd=function(){t(e,n)}}function tn(t){function e(e,n){t.moveTo(e+o,n),t.arc(e,n,o,0,Go)}function n(e,n){t.moveTo(e,n),s.point=i}function i(e,n){t.lineTo(e,n)}function r(){s.point=e}function a(){t.closePath()}var o=4.5,s={point:e,lineStart:function(){s.point=n},lineEnd:r,polygonStart:function(){s.lineEnd=a},polygonEnd:function(){s.lineEnd=r,s.point=e},pointRadius:function(t){return o=t,s},result:b};return s}function en(t){function e(t){return(s?i:n)(t)}function n(e){return an(e,function(n,i){n=t(n,i),e.point(n[0],n[1])})}function i(e){function n(n,i){n=t(n,i),e.point(n[0],n[1])}function i(){x=NaN,w.point=a,e.lineStart()}function a(n,i){var a=ge([n,i]),o=t(n,i);r(x,_,y,b,S,T,x=o[0],_=o[1],y=n,b=a[0],S=a[1],T=a[2],s,e),e.point(x,_)}function o(){w.point=n,e.lineEnd()}function u(){i(),w.point=c,w.lineEnd=l}function c(t,e){a(h=t,d=e),f=x,p=_,g=b,v=S,m=T,w.point=a}function l(){r(x,_,y,b,S,T,f,p,h,g,v,m,s,e),w.lineEnd=o,o()}var h,d,f,p,g,v,m,y,x,_,b,S,T,w={point:n,lineStart:i,lineEnd:o,polygonStart:function(){e.polygonStart(),w.lineStart=u},polygonEnd:function(){e.polygonEnd(),w.lineStart=i}};return w}function r(e,n,i,s,u,c,l,h,d,f,p,g,v,m){var y=l-e,x=h-n,_=y*y+x*x;if(_>4*a&&v--){var b=s+f,S=u+p,T=c+g,w=Math.sqrt(b*b+S*S+T*T),A=Math.asin(T/=w),C=yo(yo(T)-1)<Ro||yo(i-d)<Ro?(i+d)/2:Math.atan2(S,b),E=t(C,A),P=E[0],L=E[1],M=P-e,k=L-n,I=x*M-y*k;(I*I/_>a||yo((y*M+x*k)/_-.5)>.3||s*f+u*p+c*g<o)&&(r(e,n,i,s,u,c,P,L,C,b/=w,S/=w,T,v,m),m.point(P,L),r(P,L,C,b,S,T,l,h,d,f,p,g,v,m))}}var a=.5,o=Math.cos(30*Ho),s=16;return e.precision=function(t){return arguments.length?(s=(a=t*t)>0&&16,e):Math.sqrt(a)},e}function nn(t){var e=en(function(e,n){return t([e*zo,n*zo])});return function(t){return un(e(t))}}function rn(t){this.stream=t}function an(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function on(t){return sn(function(){return t})()}function sn(t){function e(t){return t=s(t[0]*Ho,t[1]*Ho),[t[0]*d+u,c-t[1]*d]}function n(t){return t=s.invert((t[0]-u)/d,(c-t[1])/d),t&&[t[0]*zo,t[1]*zo]}function i(){s=Pe(o=hn(m,x,_),a);var t=a(g,v);return u=f-t[0]*d,c=p+t[1]*d,r()}function r(){return l&&(l.valid=!1,l=null),e}var a,o,s,u,c,l,h=en(function(t,e){return t=a(t,e),[t[0]*d+u,c-t[1]*d]}),d=150,f=480,p=250,g=0,v=0,m=0,x=0,_=0,b=Os,S=y,T=null,w=null;return e.stream=function(t){return l&&(l.valid=!1),l=un(b(o,h(S(t)))),l.valid=!0,l},e.clipAngle=function(t){return arguments.length?(b=null==t?(T=t,Os):He((T=+t)*Ho),r()):T},e.clipExtent=function(t){return arguments.length?(w=t,S=t?Xe(t[0][0],t[0][1],t[1][0],t[1][1]):y,r()):w},e.scale=function(t){return arguments.length?(d=+t,i()):d},e.translate=function(t){return arguments.length?(f=+t[0],p=+t[1],i()):[f,p]},e.center=function(t){return arguments.length?(g=t[0]%360*Ho,v=t[1]%360*Ho,i()):[g*zo,v*zo]},e.rotate=function(t){return arguments.length?(m=t[0]%360*Ho,x=t[1]%360*Ho,_=t.length>2?t[2]%360*Ho:0,i()):[m*zo,x*zo,_*zo]},so.rebind(e,h,"precision"),function(){return a=t.apply(this,arguments),e.invert=a.invert&&n,i()}}function un(t){return an(t,function(e,n){t.point(e*Ho,n*Ho)})}function cn(t,e){return[t,e]}function ln(t,e){return[t>Oo?t-Go:t<-Oo?t+Go:t,e]}function hn(t,e,n){return t?e||n?Pe(fn(t),pn(e,n)):fn(t):e||n?pn(e,n):ln}function dn(t){return function(e,n){return e+=t,[e>Oo?e-Go:e<-Oo?e+Go:e,n]}}function fn(t){var e=dn(t);return e.invert=dn(-t),e}function pn(t,e){function n(t,e){var n=Math.cos(e),s=Math.cos(t)*n,u=Math.sin(t)*n,c=Math.sin(e),l=c*i+s*r;return[Math.atan2(u*a-l*o,s*i-c*r),et(l*a+u*o)]}var i=Math.cos(t),r=Math.sin(t),a=Math.cos(e),o=Math.sin(e);return n.invert=function(t,e){var n=Math.cos(e),s=Math.cos(t)*n,u=Math.sin(t)*n,c=Math.sin(e),l=c*a-u*o;return[Math.atan2(u*a+c*o,s*i+l*r),et(l*i-s*r)]},n}function gn(t,e){var n=Math.cos(t),i=Math.sin(t);return function(r,a,o,s){var u=o*e;null!=r?(r=vn(n,r),a=vn(n,a),(o>0?r<a:r>a)&&(r+=o*Go)):(r=t+o*Go,a=t-.5*u);for(var c,l=r;o>0?l>a:l<a;l-=u)s.point((c=be([n,-i*Math.cos(l),-i*Math.sin(l)]))[0],c[1])}}function vn(t,e){var n=ge(e);n[0]-=t,_e(n);var i=tt(-n[1]);return((-n[2]<0?-i:i)+2*Math.PI-Ro)%(2*Math.PI)}function mn(t,e,n){var i=so.range(t,e-Ro,n).concat(e);return function(t){return i.map(function(e){return[t,e]})}}function yn(t,e,n){var i=so.range(t,e-Ro,n).concat(e);return function(t){return i.map(function(e){return[e,t]})}}function xn(t){return t.source}function _n(t){return t.target}function bn(t,e,n,i){var r=Math.cos(e),a=Math.sin(e),o=Math.cos(i),s=Math.sin(i),u=r*Math.cos(t),c=r*Math.sin(t),l=o*Math.cos(n),h=o*Math.sin(n),d=2*Math.asin(Math.sqrt(at(i-e)+r*o*at(n-t))),f=1/Math.sin(d),p=d?function(t){var e=Math.sin(t*=d)*f,n=Math.sin(d-t)*f,i=n*u+e*l,r=n*c+e*h,o=n*a+e*s;return[Math.atan2(r,i)*zo,Math.atan2(o,Math.sqrt(i*i+r*r))*zo]}:function(){return[t*zo,e*zo]};return p.distance=d,p}function Sn(){function t(t,r){var a=Math.sin(r*=Ho),o=Math.cos(r),s=yo((t*=Ho)-e),u=Math.cos(s);qs+=Math.atan2(Math.sqrt((s=o*Math.sin(s))*s+(s=i*a-n*o*u)*s),n*a+i*o*u),e=t,n=a,i=o}var e,n,i;Ws.point=function(r,a){e=r*Ho,n=Math.sin(a*=Ho),i=Math.cos(a),Ws.point=t},Ws.lineEnd=function(){Ws.point=Ws.lineEnd=b}}function Tn(t,e){function n(e,n){var i=Math.cos(e),r=Math.cos(n),a=t(i*r);return[a*r*Math.sin(e),a*Math.sin(n)]}return n.invert=function(t,n){var i=Math.sqrt(t*t+n*n),r=e(i),a=Math.sin(r),o=Math.cos(r);return[Math.atan2(t*a,i*o),Math.asin(i&&n*a/i)]},n}function wn(t,e){function n(t,e){o>0?e<-jo+Ro&&(e=-jo+Ro):e>jo-Ro&&(e=jo-Ro);var n=o/Math.pow(r(e),a);return[n*Math.sin(a*t),o-n*Math.cos(a*t)]}var i=Math.cos(t),r=function(t){return Math.tan(Oo/4+t/2)},a=t===e?Math.sin(t):Math.log(i/Math.cos(e))/Math.log(r(e)/r(t)),o=i*Math.pow(r(t),a)/a;return a?(n.invert=function(t,e){var n=o-e,i=K(a)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/a,2*Math.atan(Math.pow(o/i,1/a))-jo]},n):Cn}function An(t,e){function n(t,e){var n=a-e;return[n*Math.sin(r*t),a-n*Math.cos(r*t)]}var i=Math.cos(t),r=t===e?Math.sin(t):(i-Math.cos(e))/(e-t),a=i/r+t;return yo(r)<Ro?cn:(n.invert=function(t,e){var n=a-e;return[Math.atan2(t,n)/r,a-K(r)*Math.sqrt(t*t+n*n)]},n)}function Cn(t,e){return[t,Math.log(Math.tan(Oo/4+e/2))]}function En(t){var e,n=on(t),i=n.scale,r=n.translate,a=n.clipExtent;return n.scale=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var o=a.apply(n,arguments);if(o===n){if(e=null==t){var s=Oo*i(),u=r();a([[u[0]-s,u[1]-s],[u[0]+s,u[1]+s]])}}else e&&(o=null);return o},n.clipExtent(null)}function Pn(t,e){return[Math.log(Math.tan(Oo/4+e/2)),-t]}function Ln(t){return t[0]}function Mn(t){return t[1]}function kn(t){for(var e=t.length,n=[0,1],i=2,r=2;r<e;r++){for(;i>1&&J(t[n[i-2]],t[n[i-1]],t[r])<=0;)--i;n[i++]=r}return n.slice(0,i)}function In(t,e){return t[0]-e[0]||t[1]-e[1]}function Vn(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function Dn(t,e,n,i){var r=t[0],a=n[0],o=e[0]-r,s=i[0]-a,u=t[1],c=n[1],l=e[1]-u,h=i[1]-c,d=(s*(u-c)-h*(r-a))/(h*o-s*l);return[r+d*o,u+d*l]}function Rn(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}function Nn(){ii(this),this.edge=this.site=this.circle=null}function On(t){var e=su.pop()||new Nn;return e.site=t,e}function Gn(t){qn(t),ru.remove(t),su.push(t),ii(t)}function Fn(t){var e=t.circle,n=e.x,i=e.cy,r={x:n,y:i},a=t.P,o=t.N,s=[t];Gn(t);for(var u=a;u.circle&&yo(n-u.circle.x)<Ro&&yo(i-u.circle.cy)<Ro;)a=u.P,s.unshift(u),Gn(u),u=a;s.unshift(u),qn(u);for(var c=o;c.circle&&yo(n-c.circle.x)<Ro&&yo(i-c.circle.cy)<Ro;)o=c.N,s.push(c),Gn(c),c=o;s.push(c),qn(c);var l,h=s.length;for(l=1;l<h;++l)c=s[l],u=s[l-1],ti(c.edge,u.site,c.site,r);u=s[0],c=s[h-1],c.edge=Kn(u.site,c.site,null,r),Un(u),Un(c)}function jn(t){for(var e,n,i,r,a=t.x,o=t.y,s=ru._;s;)if(i=Hn(s,o)-a,i>Ro)s=s.L;else{if(r=a-zn(s,o),!(r>Ro)){i>-Ro?(e=s.P,n=s):r>-Ro?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}var u=On(t);if(ru.insert(e,u),e||n){if(e===n)return qn(e),n=On(e.site),ru.insert(u,n),u.edge=n.edge=Kn(e.site,u.site),Un(e),void Un(n);if(!n)return void(u.edge=Kn(e.site,u.site));qn(e),qn(n);var c=e.site,l=c.x,h=c.y,d=t.x-l,f=t.y-h,p=n.site,g=p.x-l,v=p.y-h,m=2*(d*v-f*g),y=d*d+f*f,x=g*g+v*v,_={x:(v*y-f*x)/m+l,y:(d*x-g*y)/m+h};ti(n.edge,c,p,_),u.edge=Kn(c,t,null,_),n.edge=Kn(t,p,null,_),Un(e),Un(n)}}function Hn(t,e){var n=t.site,i=n.x,r=n.y,a=r-e;if(!a)return i;var o=t.P;if(!o)return-(1/0);n=o.site;var s=n.x,u=n.y,c=u-e;if(!c)return s;var l=s-i,h=1/a-1/c,d=l/c;return h?(-d+Math.sqrt(d*d-2*h*(l*l/(-2*c)-u+c/2+r-a/2)))/h+i:(i+s)/2}function zn(t,e){var n=t.N;if(n)return Hn(n,e);var i=t.site;return i.y===e?i.x:1/0}function Xn(t){this.site=t,this.edges=[]}function $n(t){for(var e,n,i,r,a,o,s,u,c,l,h=t[0][0],d=t[1][0],f=t[0][1],p=t[1][1],g=iu,v=g.length;v--;)if(a=g[v],a&&a.prepare())for(s=a.edges,u=s.length,o=0;o<u;)l=s[o].end(),i=l.x,r=l.y,c=s[++o%u].start(),e=c.x,n=c.y,(yo(i-e)>Ro||yo(r-n)>Ro)&&(s.splice(o,0,new ei(Jn(a.site,l,yo(i-h)<Ro&&p-r>Ro?{x:h,y:yo(e-h)<Ro?n:p}:yo(r-p)<Ro&&d-i>Ro?{x:yo(n-p)<Ro?e:d,y:p}:yo(i-d)<Ro&&r-f>Ro?{x:d,y:yo(e-d)<Ro?n:f}:yo(r-f)<Ro&&i-h>Ro?{x:yo(n-f)<Ro?e:h,y:f}:null),a.site,null)),++u)}function Bn(t,e){return e.angle-t.angle}function Yn(){ii(this),this.x=this.y=this.arc=this.site=this.cy=null}function Un(t){var e=t.P,n=t.N;if(e&&n){var i=e.site,r=t.site,a=n.site;if(i!==a){var o=r.x,s=r.y,u=i.x-o,c=i.y-s,l=a.x-o,h=a.y-s,d=2*(u*h-c*l);if(!(d>=-No)){var f=u*u+c*c,p=l*l+h*h,g=(h*f-c*p)/d,v=(u*p-l*f)/d,h=v+s,m=uu.pop()||new Yn;m.arc=t,m.site=r,m.x=g+o,m.y=h+Math.sqrt(g*g+v*v),m.cy=h,t.circle=m;for(var y=null,x=ou._;x;)if(m.y<x.y||m.y===x.y&&m.x<=x.x){if(!x.L){y=x.P;break}x=x.L}else{if(!x.R){y=x;break}x=x.R}ou.insert(y,m),y||(au=m)}}}}function qn(t){var e=t.circle;e&&(e.P||(au=e.N),ou.remove(e),uu.push(e),ii(e),t.circle=null)}function Wn(t){for(var e,n=nu,i=ze(t[0][0],t[0][1],t[1][0],t[1][1]),r=n.length;r--;)e=n[r],(!Qn(e,t)||!i(e)||yo(e.a.x-e.b.x)<Ro&&yo(e.a.y-e.b.y)<Ro)&&(e.a=e.b=null,n.splice(r,1))}function Qn(t,e){var n=t.b;if(n)return!0;var i,r,a=t.a,o=e[0][0],s=e[1][0],u=e[0][1],c=e[1][1],l=t.l,h=t.r,d=l.x,f=l.y,p=h.x,g=h.y,v=(d+p)/2,m=(f+g)/2;if(g===f){if(v<o||v>=s)return;if(d>p){if(a){if(a.y>=c)return}else a={x:v,y:u};n={x:v,y:c}}else{if(a){if(a.y<u)return}else a={x:v,y:c};n={x:v,y:u}}}else if(i=(d-p)/(g-f),r=m-i*v,i<-1||i>1)if(d>p){if(a){if(a.y>=c)return}else a={x:(u-r)/i,y:u};n={x:(c-r)/i,y:c}}else{if(a){if(a.y<u)return}else a={x:(c-r)/i,y:c};n={x:(u-r)/i,y:u}}else if(f<g){if(a){if(a.x>=s)return}else a={x:o,y:i*o+r};n={x:s,y:i*s+r}}else{if(a){if(a.x<o)return}else a={x:s,y:i*s+r};n={x:o,y:i*o+r}}return t.a=a,t.b=n,!0}function Zn(t,e){this.l=t,this.r=e,this.a=this.b=null}function Kn(t,e,n,i){var r=new Zn(t,e);return nu.push(r),n&&ti(r,t,e,n),i&&ti(r,e,t,i),iu[t.i].edges.push(new ei(r,t,e)),iu[e.i].edges.push(new ei(r,e,t)),r}function Jn(t,e,n){var i=new Zn(t,null);return i.a=e,i.b=n,nu.push(i),i}function ti(t,e,n,i){t.a||t.b?t.l===n?t.b=i:t.a=i:(t.a=i,t.l=e,t.r=n)}function ei(t,e,n){var i=t.a,r=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(r.x-i.x,i.y-r.y):Math.atan2(i.x-r.x,r.y-i.y)}function ni(){this._=null}function ii(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function ri(t,e){var n=e,i=e.R,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.R=i.L,n.R&&(n.R.U=n),i.L=n}function ai(t,e){var n=e,i=e.L,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.L=i.R,n.L&&(n.L.U=n),i.R=n}function oi(t){for(;t.L;)t=t.L;return t}function si(t,e){var n,i,r,a=t.sort(ui).pop();for(nu=[],iu=new Array(t.length),ru=new ni,ou=new ni;;)if(r=au,a&&(!r||a.y<r.y||a.y===r.y&&a.x<r.x))a.x===n&&a.y===i||(iu[a.i]=new Xn(a),jn(a),n=a.x,i=a.y),a=t.pop();else{if(!r)break;Fn(r.arc)}e&&(Wn(e),$n(e));var o={cells:iu,edges:nu};return ru=ou=nu=iu=null,o}function ui(t,e){return e.y-t.y||e.x-t.x}function ci(t,e,n){return(t.x-n.x)*(e.y-t.y)-(t.x-e.x)*(n.y-t.y)}function li(t){return t.x}function hi(t){return t.y}function di(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function fi(t,e,n,i,r,a){if(!t(e,n,i,r,a)){var o=.5*(n+r),s=.5*(i+a),u=e.nodes;u[0]&&fi(t,u[0],n,i,o,s),u[1]&&fi(t,u[1],o,i,r,s),u[2]&&fi(t,u[2],n,s,o,a),u[3]&&fi(t,u[3],o,s,r,a)}}function pi(t,e,n,i,r,a,o){var s,u=1/0;return function t(c,l,h,d,f){if(!(l>a||h>o||d<i||f<r)){if(p=c.point){var p,g=e-c.x,v=n-c.y,m=g*g+v*v;if(m<u){var y=Math.sqrt(u=m);i=e-y,r=n-y,a=e+y,o=n+y,s=p}}for(var x=c.nodes,_=.5*(l+d),b=.5*(h+f),S=e>=_,T=n>=b,w=T<<1|S,A=w+4;w<A;++w)if(c=x[3&w])switch(3&w){
case 0:t(c,l,h,_,b);break;case 1:t(c,_,h,d,b);break;case 2:t(c,l,b,_,f);break;case 3:t(c,_,b,d,f)}}}(t,i,r,a,o),s}function gi(t,e){t=so.rgb(t),e=so.rgb(e);var n=t.r,i=t.g,r=t.b,a=e.r-n,o=e.g-i,s=e.b-r;return function(t){return"#"+_t(Math.round(n+a*t))+_t(Math.round(i+o*t))+_t(Math.round(r+s*t))}}function vi(t,e){var n,i={},r={};for(n in t)n in e?i[n]=xi(t[n],e[n]):r[n]=t[n];for(n in e)n in t||(r[n]=e[n]);return function(t){for(n in i)r[n]=i[n](t);return r}}function mi(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function yi(t,e){var n,i,r,a=lu.lastIndex=hu.lastIndex=0,o=-1,s=[],u=[];for(t+="",e+="";(n=lu.exec(t))&&(i=hu.exec(e));)(r=i.index)>a&&(r=e.slice(a,r),s[o]?s[o]+=r:s[++o]=r),(n=n[0])===(i=i[0])?s[o]?s[o]+=i:s[++o]=i:(s[++o]=null,u.push({i:o,x:mi(n,i)})),a=hu.lastIndex;return a<e.length&&(r=e.slice(a),s[o]?s[o]+=r:s[++o]=r),s.length<2?u[0]?(e=u[0].x,function(t){return e(t)+""}):function(){return e}:(e=u.length,function(t){for(var n,i=0;i<e;++i)s[(n=u[i]).i]=n.x(t);return s.join("")})}function xi(t,e){for(var n,i=so.interpolators.length;--i>=0&&!(n=so.interpolators[i](t,e)););return n}function _i(t,e){var n,i=[],r=[],a=t.length,o=e.length,s=Math.min(t.length,e.length);for(n=0;n<s;++n)i.push(xi(t[n],e[n]));for(;n<a;++n)r[n]=t[n];for(;n<o;++n)r[n]=e[n];return function(t){for(n=0;n<s;++n)r[n]=i[n](t);return r}}function bi(t){return function(e){return e<=0?0:e>=1?1:t(e)}}function Si(t){return function(e){return 1-t(1-e)}}function Ti(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function wi(t){return t*t}function Ai(t){return t*t*t}function Ci(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function Ei(t){return function(e){return Math.pow(e,t)}}function Pi(t){return 1-Math.cos(t*jo)}function Li(t){return Math.pow(2,10*(t-1))}function Mi(t){return 1-Math.sqrt(1-t*t)}function ki(t,e){var n;return arguments.length<2&&(e=.45),arguments.length?n=e/Go*Math.asin(1/t):(t=1,n=e/4),function(i){return 1+t*Math.pow(2,-10*i)*Math.sin((i-n)*Go/e)}}function Ii(t){return t||(t=1.70158),function(e){return e*e*((t+1)*e-t)}}function Vi(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function Di(t,e){t=so.hcl(t),e=so.hcl(e);var n=t.h,i=t.c,r=t.l,a=e.h-n,o=e.c-i,s=e.l-r;return isNaN(o)&&(o=0,i=isNaN(i)?e.c:i),isNaN(a)?(a=0,n=isNaN(n)?e.h:n):a>180?a-=360:a<-180&&(a+=360),function(t){return lt(n+a*t,i+o*t,r+s*t)+""}}function Ri(t,e){t=so.hsl(t),e=so.hsl(e);var n=t.h,i=t.s,r=t.l,a=e.h-n,o=e.s-i,s=e.l-r;return isNaN(o)&&(o=0,i=isNaN(i)?e.s:i),isNaN(a)?(a=0,n=isNaN(n)?e.h:n):a>180?a-=360:a<-180&&(a+=360),function(t){return ut(n+a*t,i+o*t,r+s*t)+""}}function Ni(t,e){t=so.lab(t),e=so.lab(e);var n=t.l,i=t.a,r=t.b,a=e.l-n,o=e.a-i,s=e.b-r;return function(t){return dt(n+a*t,i+o*t,r+s*t)+""}}function Oi(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function Gi(t){var e=[t.a,t.b],n=[t.c,t.d],i=ji(e),r=Fi(e,n),a=ji(Hi(n,e,-r))||0;e[0]*n[1]<n[0]*e[1]&&(e[0]*=-1,e[1]*=-1,i*=-1,r*=-1),this.rotate=(i?Math.atan2(e[1],e[0]):Math.atan2(-n[0],n[1]))*zo,this.translate=[t.e,t.f],this.scale=[i,a],this.skew=a?Math.atan2(r,a)*zo:0}function Fi(t,e){return t[0]*e[0]+t[1]*e[1]}function ji(t){var e=Math.sqrt(Fi(t,t));return e&&(t[0]/=e,t[1]/=e),e}function Hi(t,e,n){return t[0]+=n*e[0],t[1]+=n*e[1],t}function zi(t){return t.length?t.pop()+",":""}function Xi(t,e,n,i){if(t[0]!==e[0]||t[1]!==e[1]){var r=n.push("translate(",null,",",null,")");i.push({i:r-4,x:mi(t[0],e[0])},{i:r-2,x:mi(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}function $i(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(zi(n)+"rotate(",null,")")-2,x:mi(t,e)})):e&&n.push(zi(n)+"rotate("+e+")")}function Bi(t,e,n,i){t!==e?i.push({i:n.push(zi(n)+"skewX(",null,")")-2,x:mi(t,e)}):e&&n.push(zi(n)+"skewX("+e+")")}function Yi(t,e,n,i){if(t[0]!==e[0]||t[1]!==e[1]){var r=n.push(zi(n)+"scale(",null,",",null,")");i.push({i:r-4,x:mi(t[0],e[0])},{i:r-2,x:mi(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(zi(n)+"scale("+e+")")}function Ui(t,e){var n=[],i=[];return t=so.transform(t),e=so.transform(e),Xi(t.translate,e.translate,n,i),$i(t.rotate,e.rotate,n,i),Bi(t.skew,e.skew,n,i),Yi(t.scale,e.scale,n,i),t=e=null,function(t){for(var e,r=-1,a=i.length;++r<a;)n[(e=i[r]).i]=e.x(t);return n.join("")}}function qi(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function Wi(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function Qi(t){for(var e=t.source,n=t.target,i=Ki(e,n),r=[e];e!==i;)e=e.parent,r.push(e);for(var a=r.length;n!==i;)r.splice(a,0,n),n=n.parent;return r}function Zi(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function Ki(t,e){if(t===e)return t;for(var n=Zi(t),i=Zi(e),r=n.pop(),a=i.pop(),o=null;r===a;)o=r,r=n.pop(),a=i.pop();return o}function Ji(t){t.fixed|=2}function tr(t){t.fixed&=-7}function er(t){t.fixed|=4,t.px=t.x,t.py=t.y}function nr(t){t.fixed&=-5}function ir(t,e,n){var i=0,r=0;if(t.charge=0,!t.leaf)for(var a,o=t.nodes,s=o.length,u=-1;++u<s;)a=o[u],null!=a&&(ir(a,e,n),t.charge+=a.charge,i+=a.charge*a.cx,r+=a.charge*a.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var c=e*n[t.point.index];t.charge+=t.pointCharge=c,i+=c*t.point.x,r+=c*t.point.y}t.cx=i/t.charge,t.cy=r/t.charge}function rr(t,e){return so.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=lr,t}function ar(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(r=t.children)&&(i=r.length))for(var i,r;--i>=0;)n.push(r[i])}function or(t,e){for(var n=[t],i=[];null!=(t=n.pop());)if(i.push(t),(a=t.children)&&(r=a.length))for(var r,a,o=-1;++o<r;)n.push(a[o]);for(;null!=(t=i.pop());)e(t)}function sr(t){return t.children}function ur(t){return t.value}function cr(t,e){return e.value-t.value}function lr(t){return so.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}function hr(t){return t.x}function dr(t){return t.y}function fr(t,e,n){t.y0=e,t.y=n}function pr(t){return so.range(t.length)}function gr(t){for(var e=-1,n=t[0].length,i=[];++e<n;)i[e]=0;return i}function vr(t){for(var e,n=1,i=0,r=t[0][1],a=t.length;n<a;++n)(e=t[n][1])>r&&(i=n,r=e);return i}function mr(t){return t.reduce(yr,0)}function yr(t,e){return t+e[1]}function xr(t,e){return _r(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function _r(t,e){for(var n=-1,i=+t[0],r=(t[1]-i)/e,a=[];++n<=e;)a[n]=r*n+i;return a}function br(t){return[so.min(t),so.max(t)]}function Sr(t,e){return t.value-e.value}function Tr(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function wr(t,e){t._pack_next=e,e._pack_prev=t}function Ar(t,e){var n=e.x-t.x,i=e.y-t.y,r=t.r+e.r;return.999*r*r>n*n+i*i}function Cr(t){function e(t){l=Math.min(t.x-t.r,l),h=Math.max(t.x+t.r,h),d=Math.min(t.y-t.r,d),f=Math.max(t.y+t.r,f)}if((n=t.children)&&(c=n.length)){var n,i,r,a,o,s,u,c,l=1/0,h=-(1/0),d=1/0,f=-(1/0);if(n.forEach(Er),i=n[0],i.x=-i.r,i.y=0,e(i),c>1&&(r=n[1],r.x=r.r,r.y=0,e(r),c>2))for(a=n[2],Mr(i,r,a),e(a),Tr(i,a),i._pack_prev=a,Tr(a,r),r=i._pack_next,o=3;o<c;o++){Mr(i,r,a=n[o]);var p=0,g=1,v=1;for(s=r._pack_next;s!==r;s=s._pack_next,g++)if(Ar(s,a)){p=1;break}if(1==p)for(u=i._pack_prev;u!==s._pack_prev&&!Ar(u,a);u=u._pack_prev,v++);p?(g<v||g==v&&r.r<i.r?wr(i,r=s):wr(i=u,r),o--):(Tr(i,a),r=a,e(a))}var m=(l+h)/2,y=(d+f)/2,x=0;for(o=0;o<c;o++)a=n[o],a.x-=m,a.y-=y,x=Math.max(x,a.r+Math.sqrt(a.x*a.x+a.y*a.y));t.r=x,n.forEach(Pr)}}function Er(t){t._pack_next=t._pack_prev=t}function Pr(t){delete t._pack_next,delete t._pack_prev}function Lr(t,e,n,i){var r=t.children;if(t.x=e+=i*t.x,t.y=n+=i*t.y,t.r*=i,r)for(var a=-1,o=r.length;++a<o;)Lr(r[a],e,n,i)}function Mr(t,e,n){var i=t.r+n.r,r=e.x-t.x,a=e.y-t.y;if(i&&(r||a)){var o=e.r+n.r,s=r*r+a*a;o*=o,i*=i;var u=.5+(i-o)/(2*s),c=Math.sqrt(Math.max(0,2*o*(i+s)-(i-=s)*i-o*o))/(2*s);n.x=t.x+u*r+c*a,n.y=t.y+u*a-c*r}else n.x=t.x+i,n.y=t.y}function kr(t,e){return t.parent==e.parent?1:2}function Ir(t){var e=t.children;return e.length?e[0]:t.t}function Vr(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function Dr(t,e,n){var i=n/(e.i-t.i);e.c-=i,e.s+=n,t.c+=i,e.z+=n,e.m+=n}function Rr(t){for(var e,n=0,i=0,r=t.children,a=r.length;--a>=0;)e=r[a],e.z+=n,e.m+=n,n+=e.s+(i+=e.c)}function Nr(t,e,n){return t.a.parent===e.parent?t.a:n}function Or(t){return 1+so.max(t,function(t){return t.y})}function Gr(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}function Fr(t){var e=t.children;return e&&e.length?Fr(e[0]):t}function jr(t){var e,n=t.children;return n&&(e=n.length)?jr(n[e-1]):t}function Hr(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function zr(t,e){var n=t.x+e[3],i=t.y+e[0],r=t.dx-e[1]-e[3],a=t.dy-e[0]-e[2];return r<0&&(n+=r/2,r=0),a<0&&(i+=a/2,a=0),{x:n,y:i,dx:r,dy:a}}function Xr(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function $r(t){return t.rangeExtent?t.rangeExtent():Xr(t.range())}function Br(t,e,n,i){var r=n(t[0],t[1]),a=i(e[0],e[1]);return function(t){return a(r(t))}}function Yr(t,e){var n,i=0,r=t.length-1,a=t[i],o=t[r];return o<a&&(n=i,i=r,r=n,n=a,a=o,o=n),t[i]=e.floor(a),t[r]=e.ceil(o),t}function Ur(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:Su}function qr(t,e,n,i){var r=[],a=[],o=0,s=Math.min(t.length,e.length)-1;for(t[s]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++o<=s;)r.push(n(t[o-1],t[o])),a.push(i(e[o-1],e[o]));return function(e){var n=so.bisect(t,e,1,s)-1;return a[n](r[n](e))}}function Wr(t,e,n,i){function r(){var r=Math.min(t.length,e.length)>2?qr:Br,u=i?Wi:qi;return o=r(t,e,u,n),s=r(e,t,u,xi),a}function a(t){return o(t)}var o,s;return a.invert=function(t){return s(t)},a.domain=function(e){return arguments.length?(t=e.map(Number),r()):t},a.range=function(t){return arguments.length?(e=t,r()):e},a.rangeRound=function(t){return a.range(t).interpolate(Oi)},a.clamp=function(t){return arguments.length?(i=t,r()):i},a.interpolate=function(t){return arguments.length?(n=t,r()):n},a.ticks=function(e){return Jr(t,e)},a.tickFormat=function(e,n){return ta(t,e,n)},a.nice=function(e){return Zr(t,e),r()},a.copy=function(){return Wr(t,e,n,i)},r()}function Qr(t,e){return so.rebind(t,e,"range","rangeRound","interpolate","clamp")}function Zr(t,e){return Yr(t,Ur(Kr(t,e)[2])),Yr(t,Ur(Kr(t,e)[2])),t}function Kr(t,e){null==e&&(e=10);var n=Xr(t),i=n[1]-n[0],r=Math.pow(10,Math.floor(Math.log(i/e)/Math.LN10)),a=e/i*r;return a<=.15?r*=10:a<=.35?r*=5:a<=.75&&(r*=2),n[0]=Math.ceil(n[0]/r)*r,n[1]=Math.floor(n[1]/r)*r+.5*r,n[2]=r,n}function Jr(t,e){return so.range.apply(so,Kr(t,e))}function ta(t,e,n){var i=Kr(t,e);if(n){var r=ls.exec(n);if(r.shift(),"s"===r[8]){var a=so.formatPrefix(Math.max(yo(i[0]),yo(i[1])));return r[7]||(r[7]="."+ea(a.scale(i[2]))),r[8]="f",n=so.format(r.join("")),function(t){return n(a.scale(t))+a.symbol}}r[7]||(r[7]="."+na(r[8],i)),n=r.join("")}else n=",."+ea(i[2])+"f";return so.format(n)}function ea(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function na(t,e){var n=ea(e[2]);return t in Tu?Math.abs(n-ea(Math.max(yo(e[0]),yo(e[1]))))+ +("e"!==t):n-2*("%"===t)}function ia(t,e,n,i){function r(t){return(n?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function a(t){return n?Math.pow(e,t):-Math.pow(e,-t)}function o(e){return t(r(e))}return o.invert=function(e){return a(t.invert(e))},o.domain=function(e){return arguments.length?(n=e[0]>=0,t.domain((i=e.map(Number)).map(r)),o):i},o.base=function(n){return arguments.length?(e=+n,t.domain(i.map(r)),o):e},o.nice=function(){var e=Yr(i.map(r),n?Math:Au);return t.domain(e),i=e.map(a),o},o.ticks=function(){var t=Xr(i),o=[],s=t[0],u=t[1],c=Math.floor(r(s)),l=Math.ceil(r(u)),h=e%1?2:e;if(isFinite(l-c)){if(n){for(;c<l;c++)for(var d=1;d<h;d++)o.push(a(c)*d);o.push(a(c))}else for(o.push(a(c));c++<l;)for(var d=h-1;d>0;d--)o.push(a(c)*d);for(c=0;o[c]<s;c++);for(l=o.length;o[l-1]>u;l--);o=o.slice(c,l)}return o},o.tickFormat=function(t,n){if(!arguments.length)return wu;arguments.length<2?n=wu:"function"!=typeof n&&(n=so.format(n));var i=Math.max(1,e*t/o.ticks().length);return function(t){var o=t/a(Math.round(r(t)));return o*e<e-.5&&(o*=e),o<=i?n(t):""}},o.copy=function(){return ia(t.copy(),e,n,i)},Qr(o,t)}function ra(t,e,n){function i(e){return t(r(e))}var r=aa(e),a=aa(1/e);return i.invert=function(e){return a(t.invert(e))},i.domain=function(e){return arguments.length?(t.domain((n=e.map(Number)).map(r)),i):n},i.ticks=function(t){return Jr(n,t)},i.tickFormat=function(t,e){return ta(n,t,e)},i.nice=function(t){return i.domain(Zr(n,t))},i.exponent=function(o){return arguments.length?(r=aa(e=o),a=aa(1/e),t.domain(n.map(r)),i):e},i.copy=function(){return ra(t.copy(),e,n)},Qr(i,t)}function aa(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function oa(t,e){function n(n){return a[((r.get(n)||("range"===e.t?r.set(n,t.push(n)):NaN))-1)%a.length]}function i(e,n){return so.range(t.length).map(function(t){return e+n*t})}var r,a,o;return n.domain=function(i){if(!arguments.length)return t;t=[],r=new c;for(var a,o=-1,s=i.length;++o<s;)r.has(a=i[o])||r.set(a,t.push(a));return n[e.t].apply(n,e.a)},n.range=function(t){return arguments.length?(a=t,o=0,e={t:"range",a:arguments},n):a},n.rangePoints=function(r,s){arguments.length<2&&(s=0);var u=r[0],c=r[1],l=t.length<2?(u=(u+c)/2,0):(c-u)/(t.length-1+s);return a=i(u+l*s/2,l),o=0,e={t:"rangePoints",a:arguments},n},n.rangeRoundPoints=function(r,s){arguments.length<2&&(s=0);var u=r[0],c=r[1],l=t.length<2?(u=c=Math.round((u+c)/2),0):(c-u)/(t.length-1+s)|0;return a=i(u+Math.round(l*s/2+(c-u-(t.length-1+s)*l)/2),l),o=0,e={t:"rangeRoundPoints",a:arguments},n},n.rangeBands=function(r,s,u){arguments.length<2&&(s=0),arguments.length<3&&(u=s);var c=r[1]<r[0],l=r[c-0],h=r[1-c],d=(h-l)/(t.length-s+2*u);return a=i(l+d*u,d),c&&a.reverse(),o=d*(1-s),e={t:"rangeBands",a:arguments},n},n.rangeRoundBands=function(r,s,u){arguments.length<2&&(s=0),arguments.length<3&&(u=s);var c=r[1]<r[0],l=r[c-0],h=r[1-c],d=Math.floor((h-l)/(t.length-s+2*u));return a=i(l+Math.round((h-l-(t.length-s)*d)/2),d),c&&a.reverse(),o=Math.round(d*(1-s)),e={t:"rangeRoundBands",a:arguments},n},n.rangeBand=function(){return o},n.rangeExtent=function(){return Xr(e.a[0])},n.copy=function(){return oa(t,e)},n.domain(t)}function sa(t,e){function a(){var n=0,i=e.length;for(s=[];++n<i;)s[n-1]=so.quantile(t,n/i);return o}function o(t){if(!isNaN(t=+t))return e[so.bisect(s,t)]}var s;return o.domain=function(e){return arguments.length?(t=e.map(i).filter(r).sort(n),a()):t},o.range=function(t){return arguments.length?(e=t,a()):e},o.quantiles=function(){return s},o.invertExtent=function(n){return n=e.indexOf(n),n<0?[NaN,NaN]:[n>0?s[n-1]:t[0],n<s.length?s[n]:t[t.length-1]]},o.copy=function(){return sa(t,e)},a()}function ua(t,e,n){function i(e){return n[Math.max(0,Math.min(o,Math.floor(a*(e-t))))]}function r(){return a=n.length/(e-t),o=n.length-1,i}var a,o;return i.domain=function(n){return arguments.length?(t=+n[0],e=+n[n.length-1],r()):[t,e]},i.range=function(t){return arguments.length?(n=t,r()):n},i.invertExtent=function(e){return e=n.indexOf(e),e=e<0?NaN:e/a+t,[e,e+1/a]},i.copy=function(){return ua(t,e,n)},r()}function ca(t,e){function n(n){if(n<=n)return e[so.bisect(t,n)]}return n.domain=function(e){return arguments.length?(t=e,n):t},n.range=function(t){return arguments.length?(e=t,n):e},n.invertExtent=function(n){return n=e.indexOf(n),[t[n-1],t[n]]},n.copy=function(){return ca(t,e)},n}function la(t){function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=n.map(e),e):t},e.ticks=function(e){return Jr(t,e)},e.tickFormat=function(e,n){return ta(t,e,n)},e.copy=function(){return la(t)},e}function ha(){return 0}function da(t){return t.innerRadius}function fa(t){return t.outerRadius}function pa(t){return t.startAngle}function ga(t){return t.endAngle}function va(t){return t&&t.padAngle}function ma(t,e,n,i){return(t-n)*e-(e-i)*t>0?0:1}function ya(t,e,n,i,r){var a=t[0]-e[0],o=t[1]-e[1],s=(r?i:-i)/Math.sqrt(a*a+o*o),u=s*o,c=-s*a,l=t[0]+u,h=t[1]+c,d=e[0]+u,f=e[1]+c,p=(l+d)/2,g=(h+f)/2,v=d-l,m=f-h,y=v*v+m*m,x=n-i,_=l*f-d*h,b=(m<0?-1:1)*Math.sqrt(Math.max(0,x*x*y-_*_)),S=(_*m-v*b)/y,T=(-_*v-m*b)/y,w=(_*m+v*b)/y,A=(-_*v+m*b)/y,C=S-p,E=T-g,P=w-p,L=A-g;return C*C+E*E>P*P+L*L&&(S=w,T=A),[[S-u,T-c],[S*n/x,T*n/x]]}function xa(t){function e(e){function o(){c.push("M",a(t(l),s))}for(var u,c=[],l=[],h=-1,d=e.length,f=Ct(n),p=Ct(i);++h<d;)r.call(this,u=e[h],h)?l.push([+f.call(this,u,h),+p.call(this,u,h)]):l.length&&(o(),l=[]);return l.length&&o(),c.length?c.join(""):null}var n=Ln,i=Mn,r=Le,a=_a,o=a.key,s=.7;return e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(i=t,e):i},e.defined=function(t){return arguments.length?(r=t,e):r},e.interpolate=function(t){return arguments.length?(o="function"==typeof t?a=t:(a=ku.get(t)||_a).key,e):o},e.tension=function(t){return arguments.length?(s=t,e):s},e}function _a(t){return t.length>1?t.join("L"):t+"Z"}function ba(t){return t.join("L")+"Z"}function Sa(t){for(var e=0,n=t.length,i=t[0],r=[i[0],",",i[1]];++e<n;)r.push("H",(i[0]+(i=t[e])[0])/2,"V",i[1]);return n>1&&r.push("H",i[0]),r.join("")}function Ta(t){for(var e=0,n=t.length,i=t[0],r=[i[0],",",i[1]];++e<n;)r.push("V",(i=t[e])[1],"H",i[0]);return r.join("")}function wa(t){for(var e=0,n=t.length,i=t[0],r=[i[0],",",i[1]];++e<n;)r.push("H",(i=t[e])[0],"V",i[1]);return r.join("")}function Aa(t,e){return t.length<4?_a(t):t[1]+Pa(t.slice(1,-1),La(t,e))}function Ca(t,e){return t.length<3?ba(t):t[0]+Pa((t.push(t[0]),t),La([t[t.length-2]].concat(t,[t[1]]),e))}function Ea(t,e){return t.length<3?_a(t):t[0]+Pa(t,La(t,e))}function Pa(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return _a(t);var n=t.length!=e.length,i="",r=t[0],a=t[1],o=e[0],s=o,u=1;if(n&&(i+="Q"+(a[0]-2*o[0]/3)+","+(a[1]-2*o[1]/3)+","+a[0]+","+a[1],r=t[1],u=2),e.length>1){s=e[1],a=t[u],u++,i+="C"+(r[0]+o[0])+","+(r[1]+o[1])+","+(a[0]-s[0])+","+(a[1]-s[1])+","+a[0]+","+a[1];for(var c=2;c<e.length;c++,u++)a=t[u],s=e[c],i+="S"+(a[0]-s[0])+","+(a[1]-s[1])+","+a[0]+","+a[1]}if(n){var l=t[u];i+="Q"+(a[0]+2*s[0]/3)+","+(a[1]+2*s[1]/3)+","+l[0]+","+l[1]}return i}function La(t,e){for(var n,i=[],r=(1-e)/2,a=t[0],o=t[1],s=1,u=t.length;++s<u;)n=a,a=o,o=t[s],i.push([r*(o[0]-n[0]),r*(o[1]-n[1])]);return i}function Ma(t){if(t.length<3)return _a(t);var e=1,n=t.length,i=t[0],r=i[0],a=i[1],o=[r,r,r,(i=t[1])[0]],s=[a,a,a,i[1]],u=[r,",",a,"L",Da(Du,o),",",Da(Du,s)];for(t.push(t[n-1]);++e<=n;)i=t[e],o.shift(),o.push(i[0]),s.shift(),s.push(i[1]),Ra(u,o,s);return t.pop(),u.push("L",i),u.join("")}function ka(t){if(t.length<4)return _a(t);for(var e,n=[],i=-1,r=t.length,a=[0],o=[0];++i<3;)e=t[i],a.push(e[0]),o.push(e[1]);for(n.push(Da(Du,a)+","+Da(Du,o)),--i;++i<r;)e=t[i],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),Ra(n,a,o);return n.join("")}function Ia(t){for(var e,n,i=-1,r=t.length,a=r+4,o=[],s=[];++i<4;)n=t[i%r],o.push(n[0]),s.push(n[1]);for(e=[Da(Du,o),",",Da(Du,s)],--i;++i<a;)n=t[i%r],o.shift(),o.push(n[0]),s.shift(),s.push(n[1]),Ra(e,o,s);return e.join("")}function Va(t,e){var n=t.length-1;if(n)for(var i,r,a=t[0][0],o=t[0][1],s=t[n][0]-a,u=t[n][1]-o,c=-1;++c<=n;)i=t[c],r=c/n,i[0]=e*i[0]+(1-e)*(a+r*s),i[1]=e*i[1]+(1-e)*(o+r*u);return Ma(t)}function Da(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function Ra(t,e,n){t.push("C",Da(Iu,e),",",Da(Iu,n),",",Da(Vu,e),",",Da(Vu,n),",",Da(Du,e),",",Da(Du,n))}function Na(t,e){return(e[1]-t[1])/(e[0]-t[0])}function Oa(t){for(var e=0,n=t.length-1,i=[],r=t[0],a=t[1],o=i[0]=Na(r,a);++e<n;)i[e]=(o+(o=Na(r=a,a=t[e+1])))/2;return i[e]=o,i}function Ga(t){for(var e,n,i,r,a=[],o=Oa(t),s=-1,u=t.length-1;++s<u;)e=Na(t[s],t[s+1]),yo(e)<Ro?o[s]=o[s+1]=0:(n=o[s]/e,i=o[s+1]/e,r=n*n+i*i,r>9&&(r=3*e/Math.sqrt(r),o[s]=r*n,o[s+1]=r*i));for(s=-1;++s<=u;)r=(t[Math.min(u,s+1)][0]-t[Math.max(0,s-1)][0])/(6*(1+o[s]*o[s])),a.push([r||0,o[s]*r||0]);return a}function Fa(t){return t.length<3?_a(t):t[0]+Pa(t,Ga(t))}function ja(t){for(var e,n,i,r=-1,a=t.length;++r<a;)e=t[r],n=e[0],i=e[1]-jo,e[0]=n*Math.cos(i),e[1]=n*Math.sin(i);return t}function Ha(t){function e(e){function u(){g.push("M",s(t(m),h),l,c(t(v.reverse()),h),"Z")}for(var d,f,p,g=[],v=[],m=[],y=-1,x=e.length,_=Ct(n),b=Ct(r),S=n===i?function(){return f}:Ct(i),T=r===a?function(){return p}:Ct(a);++y<x;)o.call(this,d=e[y],y)?(v.push([f=+_.call(this,d,y),p=+b.call(this,d,y)]),m.push([+S.call(this,d,y),+T.call(this,d,y)])):v.length&&(u(),v=[],m=[]);return v.length&&u(),g.length?g.join(""):null}var n=Ln,i=Ln,r=0,a=Mn,o=Le,s=_a,u=s.key,c=s,l="L",h=.7;return e.x=function(t){return arguments.length?(n=i=t,e):i},e.x0=function(t){return arguments.length?(n=t,e):n},e.x1=function(t){return arguments.length?(i=t,e):i},e.y=function(t){return arguments.length?(r=a=t,e):a},e.y0=function(t){return arguments.length?(r=t,e):r},e.y1=function(t){return arguments.length?(a=t,e):a},e.defined=function(t){return arguments.length?(o=t,e):o},e.interpolate=function(t){return arguments.length?(u="function"==typeof t?s=t:(s=ku.get(t)||_a).key,c=s.reverse||s,l=s.closed?"M":"L",e):u},e.tension=function(t){return arguments.length?(h=t,e):h},e}function za(t){return t.radius}function Xa(t){return[t.x,t.y]}function $a(t){return function(){var e=t.apply(this,arguments),n=e[0],i=e[1]-jo;return[n*Math.cos(i),n*Math.sin(i)]}}function Ba(){return 64}function Ya(){return"circle"}function Ua(t){var e=Math.sqrt(t/Oo);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}function qa(t){return function(){var e,n,i;(e=this[t])&&(i=e[n=e.active])&&(i.timer.c=null,i.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,i.event&&i.event.interrupt.call(this,this.__data__,i.index))}}function Wa(t,e,n){return To(t,Hu),t.namespace=e,t.id=n,t}function Qa(t,e,n,i){var r=t.id,a=t.namespace;return X(t,"function"==typeof n?function(t,o,s){t[a][r].tween.set(e,i(n.call(t,t.__data__,o,s)))}:(n=i(n),function(t){t[a][r].tween.set(e,n)}))}function Za(t){return null==t&&(t=""),function(){this.textContent=t}}function Ka(t){return null==t?"__transition__":"__transition_"+t+"__"}function Ja(t,e,n,i,r){function a(t){var e=g.delay;return l.t=e+u,e<=t?o(t-e):void(l.c=o)}function o(n){var r=p.active,a=p[r];a&&(a.timer.c=null,a.timer.t=NaN,--p.count,delete p[r],a.event&&a.event.interrupt.call(t,t.__data__,a.index));for(var o in p)if(+o<i){var c=p[o];c.timer.c=null,c.timer.t=NaN,--p.count,delete p[o]}l.c=s,kt(function(){return l.c&&s(n||1)&&(l.c=null,l.t=NaN),1},0,u),p.active=i,g.event&&g.event.start.call(t,t.__data__,e),f=[],g.tween.forEach(function(n,i){(i=i.call(t,t.__data__,e))&&f.push(i)}),d=g.ease,h=g.duration}function s(r){for(var a=r/h,o=d(a),s=f.length;s>0;)f[--s].call(t,o);if(a>=1)return g.event&&g.event.end.call(t,t.__data__,e),--p.count?delete p[i]:delete t[n],1}var u,l,h,d,f,p=t[n]||(t[n]={active:0,count:0}),g=p[i];g||(u=r.time,l=kt(a,0,u),g=p[i]={tween:new c,time:u,timer:l,delay:r.delay,duration:r.duration,ease:r.ease,index:e},r=null,++p.count)}function to(t,e,n){t.attr("transform",function(t){var i=e(t);return"translate("+(isFinite(i)?i:n(t))+",0)"})}function eo(t,e,n){t.attr("transform",function(t){var i=e(t);return"translate(0,"+(isFinite(i)?i:n(t))+")"})}function no(t){return t.toISOString()}function io(t,e,n){function i(e){return t(e)}function r(t,n){var i=t[1]-t[0],r=i/n,a=so.bisect(Qu,r);return a==Qu.length?[e.year,Kr(t.map(function(t){return t/31536e6}),n)[2]]:a?e[r/Qu[a-1]<Qu[a]/r?a-1:a]:[Ju,Kr(t,n)[2]]}return i.invert=function(e){return ro(t.invert(e))},i.domain=function(e){return arguments.length?(t.domain(e),i):t.domain().map(ro)},i.nice=function(t,e){function n(n){return!isNaN(n)&&!t.range(n,ro(+n+1),e).length}var a=i.domain(),o=Xr(a),s=null==t?r(o,10):"number"==typeof t&&r(o,t);return s&&(t=s[0],e=s[1]),i.domain(Yr(a,e>1?{floor:function(e){for(;n(e=t.floor(e));)e=ro(e-1);return e},ceil:function(e){for(;n(e=t.ceil(e));)e=ro(+e+1);return e}}:t))},i.ticks=function(t,e){var n=Xr(i.domain()),a=null==t?r(n,10):"number"==typeof t?r(n,t):!t.range&&[{range:t},e];return a&&(t=a[0],e=a[1]),t.range(n[0],ro(+n[1]+1),e<1?1:e)},i.tickFormat=function(){return n},i.copy=function(){return io(t.copy(),e,n)},Qr(i,t)}function ro(t){return new Date(t)}function ao(t){return JSON.parse(t.responseText)}function oo(t){var e=lo.createRange();return e.selectNode(lo.body),e.createContextualFragment(t.responseText)}var so={version:"3.5.17"},uo=[].slice,co=function(t){return uo.call(t)},lo=this.document;if(lo)try{co(lo.documentElement.childNodes)[0].nodeType}catch(t){co=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),lo)try{lo.createElement("DIV").style.setProperty("opacity",0,"")}catch(t){var ho=this.Element.prototype,fo=ho.setAttribute,po=ho.setAttributeNS,go=this.CSSStyleDeclaration.prototype,vo=go.setProperty;ho.setAttribute=function(t,e){fo.call(this,t,e+"")},ho.setAttributeNS=function(t,e,n){po.call(this,t,e,n+"")},go.setProperty=function(t,e,n){vo.call(this,t,e+"",n)}}so.ascending=n,so.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},so.min=function(t,e){var n,i,r=-1,a=t.length;if(1===arguments.length){for(;++r<a;)if(null!=(i=t[r])&&i>=i){n=i;break}for(;++r<a;)null!=(i=t[r])&&n>i&&(n=i)}else{for(;++r<a;)if(null!=(i=e.call(t,t[r],r))&&i>=i){n=i;break}for(;++r<a;)null!=(i=e.call(t,t[r],r))&&n>i&&(n=i)}return n},so.max=function(t,e){var n,i,r=-1,a=t.length;if(1===arguments.length){for(;++r<a;)if(null!=(i=t[r])&&i>=i){n=i;break}for(;++r<a;)null!=(i=t[r])&&i>n&&(n=i)}else{for(;++r<a;)if(null!=(i=e.call(t,t[r],r))&&i>=i){n=i;break}for(;++r<a;)null!=(i=e.call(t,t[r],r))&&i>n&&(n=i)}return n},so.extent=function(t,e){var n,i,r,a=-1,o=t.length;if(1===arguments.length){for(;++a<o;)if(null!=(i=t[a])&&i>=i){n=r=i;break}for(;++a<o;)null!=(i=t[a])&&(n>i&&(n=i),r<i&&(r=i))}else{for(;++a<o;)if(null!=(i=e.call(t,t[a],a))&&i>=i){n=r=i;break}for(;++a<o;)null!=(i=e.call(t,t[a],a))&&(n>i&&(n=i),r<i&&(r=i))}return[n,r]},so.sum=function(t,e){var n,i=0,a=t.length,o=-1;if(1===arguments.length)for(;++o<a;)r(n=+t[o])&&(i+=n);else for(;++o<a;)r(n=+e.call(t,t[o],o))&&(i+=n);return i},so.mean=function(t,e){var n,a=0,o=t.length,s=-1,u=o;if(1===arguments.length)for(;++s<o;)r(n=i(t[s]))?a+=n:--u;else for(;++s<o;)r(n=i(e.call(t,t[s],s)))?a+=n:--u;if(u)return a/u},so.quantile=function(t,e){var n=(t.length-1)*e+1,i=Math.floor(n),r=+t[i-1],a=n-i;return a?r+a*(t[i]-r):r},so.median=function(t,e){var a,o=[],s=t.length,u=-1;if(1===arguments.length)for(;++u<s;)r(a=i(t[u]))&&o.push(a);else for(;++u<s;)r(a=i(e.call(t,t[u],u)))&&o.push(a);if(o.length)return so.quantile(o.sort(n),.5)},so.variance=function(t,e){var n,a,o=t.length,s=0,u=0,c=-1,l=0;if(1===arguments.length)for(;++c<o;)r(n=i(t[c]))&&(a=n-s,s+=a/++l,u+=a*(n-s));else for(;++c<o;)r(n=i(e.call(t,t[c],c)))&&(a=n-s,s+=a/++l,u+=a*(n-s));if(l>1)return u/(l-1)},so.deviation=function(){var t=so.variance.apply(this,arguments);return t?Math.sqrt(t):t};var mo=a(n);so.bisectLeft=mo.left,so.bisect=so.bisectRight=mo.right,so.bisector=function(t){return a(1===t.length?function(e,i){return n(t(e),i)}:t)},so.shuffle=function(t,e,n){(a=arguments.length)<3&&(n=t.length,a<2&&(e=0));for(var i,r,a=n-e;a;)r=Math.random()*a--|0,i=t[a+e],t[a+e]=t[r+e],t[r+e]=i;return t},so.permute=function(t,e){for(var n=e.length,i=new Array(n);n--;)i[n]=t[e[n]];return i},so.pairs=function(t){for(var e,n=0,i=t.length-1,r=t[0],a=new Array(i<0?0:i);n<i;)a[n]=[e=r,r=t[++n]];return a},so.transpose=function(t){if(!(r=t.length))return[];for(var e=-1,n=so.min(t,o),i=new Array(n);++e<n;)for(var r,a=-1,s=i[e]=new Array(r);++a<r;)s[a]=t[a][e];return i},so.zip=function(){return so.transpose(arguments)},so.keys=function(t){var e=[];for(var n in t)e.push(n);return e},so.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},so.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},so.merge=function(t){for(var e,n,i,r=t.length,a=-1,o=0;++a<r;)o+=t[a].length;for(n=new Array(o);--r>=0;)for(i=t[r],e=i.length;--e>=0;)n[--o]=i[e];return n};var yo=Math.abs;so.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n===1/0)throw new Error("infinite range");var i,r=[],a=s(yo(n)),o=-1;if(t*=a,e*=a,n*=a,n<0)for(;(i=t+n*++o)>e;)r.push(i/a);else for(;(i=t+n*++o)<e;)r.push(i/a);return r},so.map=function(t,e){var n=new c;if(t instanceof c)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var i,r=-1,a=t.length;if(1===arguments.length)for(;++r<a;)n.set(r,t[r]);else for(;++r<a;)n.set(e.call(t,i=t[r],r),i)}else for(var o in t)n.set(o,t[o]);return n};var xo="__proto__",_o="\0";u(c,{has:d,get:function(t){return this._[l(t)]},set:function(t,e){return this._[l(t)]=e},remove:f,keys:p,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:h(e),value:this._[e]});return t},size:g,empty:v,forEach:function(t){for(var e in this._)t.call(this,h(e),this._[e])}}),so.nest=function(){function t(e,o,s){if(s>=a.length)return i?i.call(r,o):n?o.sort(n):o;for(var u,l,h,d,f=-1,p=o.length,g=a[s++],v=new c;++f<p;)(d=v.get(u=g(l=o[f])))?d.push(l):v.set(u,[l]);return e?(l=e(),h=function(n,i){l.set(n,t(e,i,s))}):(l={},h=function(n,i){l[n]=t(e,i,s)}),v.forEach(h),l}function e(t,n){if(n>=a.length)return t;var i=[],r=o[n++];return t.forEach(function(t,r){i.push({key:t,values:e(r,n)})}),r?i.sort(function(t,e){return r(t.key,e.key)}):i}var n,i,r={},a=[],o=[];return r.map=function(e,n){return t(n,e,0)},r.entries=function(n){return e(t(so.map,n,0),0)},r.key=function(t){return a.push(t),r},r.sortKeys=function(t){return o[a.length-1]=t,r},r.sortValues=function(t){return n=t,r},r.rollup=function(t){return i=t,r},r},so.set=function(t){var e=new m;if(t)for(var n=0,i=t.length;n<i;++n)e.add(t[n]);return e},u(m,{has:d,add:function(t){return this._[l(t+="")]=!0,t},remove:f,values:p,size:g,empty:v,forEach:function(t){for(var e in this._)t.call(this,h(e))}}),so.behavior={},so.rebind=function(t,e){for(var n,i=1,r=arguments.length;++i<r;)t[n=arguments[i]]=x(t,e,e[n]);return t};var bo=["webkit","ms","moz","Moz","o","O"];so.dispatch=function(){for(var t=new S,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=T(t);return t},S.prototype.on=function(t,e){var n=t.indexOf("."),i="";if(n>=0&&(i=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(i):this[t].on(i,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(i,null);return this}},so.event=null,so.requote=function(t){return t.replace(So,"\\$&")};var So=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,To={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]},wo=function(t,e){return e.querySelector(t)},Ao=function(t,e){return e.querySelectorAll(t)},Co=function(t,e){var n=t.matches||t[_(t,"matchesSelector")];return(Co=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&(wo=function(t,e){return Sizzle(t,e)[0]||null},Ao=Sizzle,Co=Sizzle.matchesSelector),so.selection=function(){return so.select(lo.documentElement)};var Eo=so.selection.prototype=[];Eo.select=function(t){var e,n,i,r,a=[];t=P(t);for(var o=-1,s=this.length;++o<s;){a.push(e=[]),e.parentNode=(i=this[o]).parentNode;for(var u=-1,c=i.length;++u<c;)(r=i[u])?(e.push(n=t.call(r,r.__data__,u,o)),n&&"__data__"in r&&(n.__data__=r.__data__)):e.push(null)}return E(a)},Eo.selectAll=function(t){var e,n,i=[];t=L(t);for(var r=-1,a=this.length;++r<a;)for(var o=this[r],s=-1,u=o.length;++s<u;)(n=o[s])&&(i.push(e=co(t.call(n,n.__data__,s,r))),e.parentNode=n);return E(i)};var Po="http://www.w3.org/1999/xhtml",Lo={svg:"http://www.w3.org/2000/svg",xhtml:Po,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};so.ns={prefix:Lo,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Lo.hasOwnProperty(n)?{space:Lo[n],local:t}:t}},Eo.attr=function(t,e){if(arguments.length<2){
if("string"==typeof t){var n=this.node();return t=so.ns.qualify(t),t.local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(M(e,t[e]));return this}return this.each(M(t,e))},Eo.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),i=(t=V(t)).length,r=-1;if(e=n.classList){for(;++r<i;)if(!e.contains(t[r]))return!1}else for(e=n.getAttribute("class");++r<i;)if(!I(t[r]).test(e))return!1;return!0}for(e in t)this.each(D(e,t[e]));return this}return this.each(D(t,e))},Eo.style=function(t,n,i){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(n="");for(i in t)this.each(N(i,t[i],n));return this}if(r<2){var a=this.node();return e(a).getComputedStyle(a,null).getPropertyValue(t)}i=""}return this.each(N(t,n,i))},Eo.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(O(e,t[e]));return this}return this.each(O(t,e))},Eo.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},Eo.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},Eo.append=function(t){return t=G(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},Eo.insert=function(t,e){return t=G(t),e=P(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},Eo.remove=function(){return this.each(F)},Eo.data=function(t,e){function n(t,n){var i,r,a,o=t.length,h=n.length,d=Math.min(o,h),f=new Array(h),p=new Array(h),g=new Array(o);if(e){var v,m=new c,y=new Array(o);for(i=-1;++i<o;)(r=t[i])&&(m.has(v=e.call(r,r.__data__,i))?g[i]=r:m.set(v,r),y[i]=v);for(i=-1;++i<h;)(r=m.get(v=e.call(n,a=n[i],i)))?r!==!0&&(f[i]=r,r.__data__=a):p[i]=j(a),m.set(v,!0);for(i=-1;++i<o;)i in y&&m.get(y[i])!==!0&&(g[i]=t[i])}else{for(i=-1;++i<d;)r=t[i],a=n[i],r?(r.__data__=a,f[i]=r):p[i]=j(a);for(;i<h;++i)p[i]=j(n[i]);for(;i<o;++i)g[i]=t[i]}p.update=f,p.parentNode=f.parentNode=g.parentNode=t.parentNode,s.push(p),u.push(f),l.push(g)}var i,r,a=-1,o=this.length;if(!arguments.length){for(t=new Array(o=(i=this[0]).length);++a<o;)(r=i[a])&&(t[a]=r.__data__);return t}var s=$([]),u=E([]),l=E([]);if("function"==typeof t)for(;++a<o;)n(i=this[a],t.call(i,i.parentNode.__data__,a));else for(;++a<o;)n(i=this[a],t);return u.enter=function(){return s},u.exit=function(){return l},u},Eo.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},Eo.filter=function(t){var e,n,i,r=[];"function"!=typeof t&&(t=H(t));for(var a=0,o=this.length;a<o;a++){r.push(e=[]),e.parentNode=(n=this[a]).parentNode;for(var s=0,u=n.length;s<u;s++)(i=n[s])&&t.call(i,i.__data__,s,a)&&e.push(i)}return E(r)},Eo.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,i=this[t],r=i.length-1,a=i[r];--r>=0;)(n=i[r])&&(a&&a!==n.nextSibling&&a.parentNode.insertBefore(n,a),a=n);return this},Eo.sort=function(t){t=z.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},Eo.each=function(t){return X(this,function(e,n,i){t.call(e,e.__data__,n,i)})},Eo.call=function(t){var e=co(arguments);return t.apply(e[0]=this,e),this},Eo.empty=function(){return!this.node()},Eo.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],i=0,r=n.length;i<r;i++){var a=n[i];if(a)return a}return null},Eo.size=function(){var t=0;return X(this,function(){++t}),t};var Mo=[];so.selection.enter=$,so.selection.enter.prototype=Mo,Mo.append=Eo.append,Mo.empty=Eo.empty,Mo.node=Eo.node,Mo.call=Eo.call,Mo.size=Eo.size,Mo.select=function(t){for(var e,n,i,r,a,o=[],s=-1,u=this.length;++s<u;){i=(r=this[s]).update,o.push(e=[]),e.parentNode=r.parentNode;for(var c=-1,l=r.length;++c<l;)(a=r[c])?(e.push(i[c]=n=t.call(r.parentNode,a.__data__,c,s)),n.__data__=a.__data__):e.push(null)}return E(o)},Mo.insert=function(t,e){return arguments.length<2&&(e=B(this)),Eo.insert.call(this,t,e)},so.select=function(e){var n;return"string"==typeof e?(n=[wo(e,lo)],n.parentNode=lo.documentElement):(n=[e],n.parentNode=t(e)),E([n])},so.selectAll=function(t){var e;return"string"==typeof t?(e=co(Ao(t,lo)),e.parentNode=lo.documentElement):(e=co(t),e.parentNode=null),E([e])},Eo.on=function(t,e,n){var i=arguments.length;if(i<3){if("string"!=typeof t){i<2&&(e=!1);for(n in t)this.each(Y(n,t[n],e));return this}if(i<2)return(i=this.node()["__on"+t])&&i._;n=!1}return this.each(Y(t,e,n))};var ko=so.map({mouseenter:"mouseover",mouseleave:"mouseout"});lo&&ko.forEach(function(t){"on"+t in lo&&ko.remove(t)});var Io,Vo=0;so.mouse=function(t){return Q(t,A())};var Do=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;so.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=A().changedTouches),e)for(var i,r=0,a=e.length;r<a;++r)if((i=e[r]).identifier===n)return Q(t,i)},so.behavior.drag=function(){function t(){this.on("mousedown.drag",a).on("touchstart.drag",o)}function n(t,e,n,a,o){return function(){function s(){var t,n,i=e(d,g);i&&(t=i[0]-x[0],n=i[1]-x[1],p|=t|n,x=i,f({type:"drag",x:i[0]+c[0],y:i[1]+c[1],dx:t,dy:n}))}function u(){e(d,g)&&(m.on(a+v,null).on(o+v,null),y(p),f({type:"dragend"}))}var c,l=this,h=so.event.target.correspondingElement||so.event.target,d=l.parentNode,f=i.of(l,arguments),p=0,g=t(),v=".drag"+(null==g?"":"-"+g),m=so.select(n(h)).on(a+v,s).on(o+v,u),y=W(h),x=e(d,g);r?(c=r.apply(l,arguments),c=[c.x-x[0],c.y-x[1]]):c=[0,0],f({type:"dragstart"})}}var i=C(t,"drag","dragstart","dragend"),r=null,a=n(b,so.mouse,e,"mousemove","mouseup"),o=n(Z,so.touch,y,"touchmove","touchend");return t.origin=function(e){return arguments.length?(r=e,t):r},so.rebind(t,i,"on")},so.touches=function(t,e){return arguments.length<2&&(e=A().touches),e?co(e).map(function(e){var n=Q(t,e);return n.identifier=e.identifier,n}):[]};var Ro=1e-6,No=Ro*Ro,Oo=Math.PI,Go=2*Oo,Fo=Go-Ro,jo=Oo/2,Ho=Oo/180,zo=180/Oo,Xo=Math.SQRT2,$o=2,Bo=4;so.interpolateZoom=function(t,e){var n,i,r=t[0],a=t[1],o=t[2],s=e[0],u=e[1],c=e[2],l=s-r,h=u-a,d=l*l+h*h;if(d<No)i=Math.log(c/o)/Xo,n=function(t){return[r+t*l,a+t*h,o*Math.exp(Xo*t*i)]};else{var f=Math.sqrt(d),p=(c*c-o*o+Bo*d)/(2*o*$o*f),g=(c*c-o*o-Bo*d)/(2*c*$o*f),v=Math.log(Math.sqrt(p*p+1)-p),m=Math.log(Math.sqrt(g*g+1)-g);i=(m-v)/Xo,n=function(t){var e=t*i,n=it(v),s=o/($o*f)*(n*rt(Xo*e+v)-nt(v));return[r+s*l,a+s*h,o*n/it(Xo*e+v)]}}return n.duration=1e3*i,n},so.behavior.zoom=function(){function t(t){t.on(k,h).on(Uo+".zoom",f).on("dblclick.zoom",p).on(D,d)}function n(t){return[(t[0]-A.x)/A.k,(t[1]-A.y)/A.k]}function i(t){return[t[0]*A.k+A.x,t[1]*A.k+A.y]}function r(t){A.k=Math.max(P[0],Math.min(P[1],t))}function a(t,e){e=i(e),A.x+=t[0]-e[0],A.y+=t[1]-e[1]}function o(e,n,i,o){e.__chart__={x:A.x,y:A.y,k:A.k},r(Math.pow(2,o)),a(v=n,i),e=so.select(e),L>0&&(e=e.transition().duration(L)),e.call(t.event)}function s(){b&&b.domain(_.range().map(function(t){return(t-A.x)/A.k}).map(_.invert)),T&&T.domain(S.range().map(function(t){return(t-A.y)/A.k}).map(S.invert))}function u(t){M++||t({type:"zoomstart"})}function c(t){s(),t({type:"zoom",scale:A.k,translate:[A.x,A.y]})}function l(t){--M||(t({type:"zoomend"}),v=null)}function h(){function t(){s=1,a(so.mouse(r),d),c(o)}function i(){h.on(I,null).on(V,null),f(s),l(o)}var r=this,o=R.of(r,arguments),s=0,h=so.select(e(r)).on(I,t).on(V,i),d=n(so.mouse(r)),f=W(r);ju.call(r),u(o)}function d(){function t(){var t=so.touches(p);return f=A.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=n(t))}),t}function e(){var e=so.event.target;so.select(e).on(_,i).on(b,s),S.push(e);for(var n=so.event.changedTouches,r=0,a=n.length;r<a;++r)v[n[r].identifier]=null;var u=t(),c=Date.now();if(1===u.length){if(c-x<500){var l=u[0];o(p,l,v[l.identifier],Math.floor(Math.log(A.k)/Math.LN2)+1),w()}x=c}else if(u.length>1){var l=u[0],h=u[1],d=l[0]-h[0],f=l[1]-h[1];m=d*d+f*f}}function i(){var t,e,n,i,o=so.touches(p);ju.call(p);for(var s=0,u=o.length;s<u;++s,i=null)if(n=o[s],i=v[n.identifier]){if(e)break;t=n,e=i}if(i){var l=(l=n[0]-t[0])*l+(l=n[1]-t[1])*l,h=m&&Math.sqrt(l/m);t=[(t[0]+n[0])/2,(t[1]+n[1])/2],e=[(e[0]+i[0])/2,(e[1]+i[1])/2],r(h*f)}x=null,a(t,e),c(g)}function s(){if(so.event.touches.length){for(var e=so.event.changedTouches,n=0,i=e.length;n<i;++n)delete v[e[n].identifier];for(var r in v)return void t()}so.selectAll(S).on(y,null),T.on(k,h).on(D,d),C(),l(g)}var f,p=this,g=R.of(p,arguments),v={},m=0,y=".zoom-"+so.event.changedTouches[0].identifier,_="touchmove"+y,b="touchend"+y,S=[],T=so.select(p),C=W(p);e(),u(g),T.on(k,null).on(D,e)}function f(){var t=R.of(this,arguments);y?clearTimeout(y):(ju.call(this),g=n(v=m||so.mouse(this)),u(t)),y=setTimeout(function(){y=null,l(t)},50),w(),r(Math.pow(2,.002*Yo())*A.k),a(v,g),c(t)}function p(){var t=so.mouse(this),e=Math.log(A.k)/Math.LN2;o(this,t,n(t),so.event.shiftKey?Math.ceil(e)-1:Math.floor(e)+1)}var g,v,m,y,x,_,b,S,T,A={x:0,y:0,k:1},E=[960,500],P=qo,L=250,M=0,k="mousedown.zoom",I="mousemove.zoom",V="mouseup.zoom",D="touchstart.zoom",R=C(t,"zoomstart","zoom","zoomend");return Uo||(Uo="onwheel"in lo?(Yo=function(){return-so.event.deltaY*(so.event.deltaMode?120:1)},"wheel"):"onmousewheel"in lo?(Yo=function(){return so.event.wheelDelta},"mousewheel"):(Yo=function(){return-so.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=R.of(this,arguments),e=A;Gu?so.select(this).transition().each("start.zoom",function(){A=this.__chart__||{x:0,y:0,k:1},u(t)}).tween("zoom:zoom",function(){var n=E[0],i=E[1],r=v?v[0]:n/2,a=v?v[1]:i/2,o=so.interpolateZoom([(r-A.x)/A.k,(a-A.y)/A.k,n/A.k],[(r-e.x)/e.k,(a-e.y)/e.k,n/e.k]);return function(e){var i=o(e),s=n/i[2];this.__chart__=A={x:r-i[0]*s,y:a-i[1]*s,k:s},c(t)}}).each("interrupt.zoom",function(){l(t)}).each("end.zoom",function(){l(t)}):(this.__chart__=A,u(t),c(t),l(t))})},t.translate=function(e){return arguments.length?(A={x:+e[0],y:+e[1],k:A.k},s(),t):[A.x,A.y]},t.scale=function(e){return arguments.length?(A={x:A.x,y:A.y,k:null},r(+e),s(),t):A.k},t.scaleExtent=function(e){return arguments.length?(P=null==e?qo:[+e[0],+e[1]],t):P},t.center=function(e){return arguments.length?(m=e&&[+e[0],+e[1]],t):m},t.size=function(e){return arguments.length?(E=e&&[+e[0],+e[1]],t):E},t.duration=function(e){return arguments.length?(L=+e,t):L},t.x=function(e){return arguments.length?(b=e,_=e.copy(),A={x:0,y:0,k:1},t):b},t.y=function(e){return arguments.length?(T=e,S=e.copy(),A={x:0,y:0,k:1},t):T},so.rebind(t,R,"on")};var Yo,Uo,qo=[0,1/0];so.color=ot,ot.prototype.toString=function(){return this.rgb()+""},so.hsl=st;var Wo=st.prototype=new ot;Wo.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new st(this.h,this.s,this.l/t)},Wo.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new st(this.h,this.s,t*this.l)},Wo.rgb=function(){return ut(this.h,this.s,this.l)},so.hcl=ct;var Qo=ct.prototype=new ot;Qo.brighter=function(t){return new ct(this.h,this.c,Math.min(100,this.l+Zo*(arguments.length?t:1)))},Qo.darker=function(t){return new ct(this.h,this.c,Math.max(0,this.l-Zo*(arguments.length?t:1)))},Qo.rgb=function(){return lt(this.h,this.c,this.l).rgb()},so.lab=ht;var Zo=18,Ko=.95047,Jo=1,ts=1.08883,es=ht.prototype=new ot;es.brighter=function(t){return new ht(Math.min(100,this.l+Zo*(arguments.length?t:1)),this.a,this.b)},es.darker=function(t){return new ht(Math.max(0,this.l-Zo*(arguments.length?t:1)),this.a,this.b)},es.rgb=function(){return dt(this.l,this.a,this.b)},so.rgb=mt;var ns=mt.prototype=new ot;ns.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,i=this.b,r=30;return e||n||i?(e&&e<r&&(e=r),n&&n<r&&(n=r),i&&i<r&&(i=r),new mt(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,i/t))):new mt(r,r,r)},ns.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new mt(t*this.r,t*this.g,t*this.b)},ns.hsl=function(){return St(this.r,this.g,this.b)},ns.toString=function(){return"#"+_t(this.r)+_t(this.g)+_t(this.b)};var is=so.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});is.forEach(function(t,e){is.set(t,yt(e))}),so.functor=Ct,so.xhr=Et(y),so.dsv=function(t,e){function n(t,n,a){arguments.length<3&&(a=n,n=null);var o=Pt(t,e,null==n?i:r(n),a);return o.row=function(t){return arguments.length?o.response(null==(n=t)?i:r(t)):n},o}function i(t){return n.parse(t.responseText)}function r(t){return function(e){return n.parse(e.responseText,t)}}function a(e){return e.map(o).join(t)}function o(t){return s.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var s=new RegExp('["'+t+"\n]"),u=t.charCodeAt(0);return n.parse=function(t,e){var i;return n.parseRows(t,function(t,n){if(i)return i(t,n-1);var r=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");i=e?function(t,n){return e(r(t),n)}:r})},n.parseRows=function(t,e){function n(){if(l>=c)return o;if(r)return r=!1,a;var e=l;if(34===t.charCodeAt(e)){for(var n=e;n++<c;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}l=n+2;var i=t.charCodeAt(n+1);return 13===i?(r=!0,10===t.charCodeAt(n+2)&&++l):10===i&&(r=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;l<c;){var i=t.charCodeAt(l++),s=1;if(10===i)r=!0;else if(13===i)r=!0,10===t.charCodeAt(l)&&(++l,++s);else if(i!==u)continue;return t.slice(e,l-s)}return t.slice(e)}for(var i,r,a={},o={},s=[],c=t.length,l=0,h=0;(i=n())!==o;){for(var d=[];i!==a&&i!==o;)d.push(i),i=n();e&&null==(d=e(d,h++))||s.push(d)}return s},n.format=function(e){if(Array.isArray(e[0]))return n.formatRows(e);var i=new m,r=[];return e.forEach(function(t){for(var e in t)i.has(e)||r.push(i.add(e))}),[r.map(o).join(t)].concat(e.map(function(e){return r.map(function(t){return o(e[t])}).join(t)})).join("\n")},n.formatRows=function(t){return t.map(a).join("\n")},n},so.csv=so.dsv(",","text/csv"),so.tsv=so.dsv("\t","text/tab-separated-values");var rs,as,os,ss,us=this[_(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};so.timer=function(){kt.apply(this,arguments)},so.timer.flush=function(){Vt(),Dt()},so.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var cs=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(Nt);so.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=so.round(t,Rt(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),cs[8+n/3]};var ls=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,hs=so.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=so.round(t,Rt(t,e))).toFixed(Math.max(0,Math.min(20,Rt(t*(1+1e-15),e))))}}),ds=so.time={},fs=Date;Ft.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){ps.setUTCDate.apply(this._,arguments)},setDay:function(){ps.setUTCDay.apply(this._,arguments)},setFullYear:function(){ps.setUTCFullYear.apply(this._,arguments)},setHours:function(){ps.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){ps.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){ps.setUTCMinutes.apply(this._,arguments)},setMonth:function(){ps.setUTCMonth.apply(this._,arguments)},setSeconds:function(){ps.setUTCSeconds.apply(this._,arguments)},setTime:function(){ps.setTime.apply(this._,arguments)}};var ps=Date.prototype;ds.year=jt(function(t){return t=ds.day(t),t.setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),ds.years=ds.year.range,ds.years.utc=ds.year.utc.range,ds.day=jt(function(t){var e=new fs(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),ds.days=ds.day.range,ds.days.utc=ds.day.utc.range,ds.dayOfYear=function(t){var e=ds.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=ds[t]=jt(function(t){return(t=ds.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=ds.year(t).getDay();return Math.floor((ds.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});ds[t+"s"]=n.range,ds[t+"s"].utc=n.utc.range,ds[t+"OfYear"]=function(t){var n=ds.year(t).getDay();return Math.floor((ds.dayOfYear(t)+(n+e)%7)/7)}}),ds.week=ds.sunday,ds.weeks=ds.sunday.range,ds.weeks.utc=ds.sunday.utc.range,ds.weekOfYear=ds.sundayOfYear;var gs={"-":"",_:" ",0:"0"},vs=/^\s*\d+/,ms=/^%/;so.locale=function(t){return{numberFormat:Ot(t),timeFormat:zt(t)}};var ys=so.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});so.format=ys.numberFormat,so.geo={},ce.prototype={s:0,t:0,add:function(t){le(t,this.t,xs),le(xs.s,this.s,this),this.s?this.t+=xs.t:this.s=xs.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var xs=new ce;so.geo.stream=function(t,e){t&&_s.hasOwnProperty(t.type)?_s[t.type](t,e):he(t,e)};var _s={Feature:function(t,e){he(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,r=n.length;++i<r;)he(n[i].geometry,e)}},bs={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)t=n[i],e.point(t[0],t[1],t[2])},LineString:function(t,e){de(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)de(n[i],e,0)},Polygon:function(t,e){fe(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,r=n.length;++i<r;)fe(n[i],e)},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,r=n.length;++i<r;)he(n[i],e)}};so.geo.area=function(t){return Ss=0,so.geo.stream(t,ws),Ss};var Ss,Ts=new ce,ws={sphere:function(){Ss+=4*Oo},point:b,lineStart:b,lineEnd:b,polygonStart:function(){Ts.reset(),ws.lineStart=pe},polygonEnd:function(){var t=2*Ts;Ss+=t<0?4*Oo+t:t,ws.lineStart=ws.lineEnd=ws.point=b}};so.geo.bounds=function(){function t(t,e){x.push(_=[l=t,d=t]),e<h&&(h=e),e>f&&(f=e)}function e(e,n){var i=ge([e*Ho,n*Ho]);if(m){var r=me(m,i),a=[r[1],-r[0],0],o=me(a,r);_e(o),o=be(o);var u=e-p,c=u>0?1:-1,g=o[0]*zo*c,v=yo(u)>180;if(v^(c*p<g&&g<c*e)){var y=o[1]*zo;y>f&&(f=y)}else if(g=(g+360)%360-180,v^(c*p<g&&g<c*e)){var y=-o[1]*zo;y<h&&(h=y)}else n<h&&(h=n),n>f&&(f=n);v?e<p?s(l,e)>s(l,d)&&(d=e):s(e,d)>s(l,d)&&(l=e):d>=l?(e<l&&(l=e),e>d&&(d=e)):e>p?s(l,e)>s(l,d)&&(d=e):s(e,d)>s(l,d)&&(l=e)}else t(e,n);m=i,p=e}function n(){b.point=e}function i(){_[0]=l,_[1]=d,b.point=t,m=null}function r(t,n){if(m){var i=t-p;y+=yo(i)>180?i+(i>0?360:-360):i}else g=t,v=n;ws.point(t,n),e(t,n)}function a(){ws.lineStart()}function o(){r(g,v),ws.lineEnd(),yo(y)>Ro&&(l=-(d=180)),_[0]=l,_[1]=d,m=null}function s(t,e){return(e-=t)<0?e+360:e}function u(t,e){return t[0]-e[0]}function c(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var l,h,d,f,p,g,v,m,y,x,_,b={point:t,lineStart:n,lineEnd:i,polygonStart:function(){b.point=r,b.lineStart=a,b.lineEnd=o,y=0,ws.polygonStart()},polygonEnd:function(){ws.polygonEnd(),b.point=t,b.lineStart=n,b.lineEnd=i,Ts<0?(l=-(d=180),h=-(f=90)):y>Ro?f=90:y<-Ro&&(h=-90),_[0]=l,_[1]=d}};return function(t){f=d=-(l=h=1/0),x=[],so.geo.stream(t,b);var e=x.length;if(e){x.sort(u);for(var n,i=1,r=x[0],a=[r];i<e;++i)n=x[i],c(n[0],r)||c(n[1],r)?(s(r[0],n[1])>s(r[0],r[1])&&(r[1]=n[1]),s(n[0],r[1])>s(r[0],r[1])&&(r[0]=n[0])):a.push(r=n);for(var o,n,p=-(1/0),e=a.length-1,i=0,r=a[e];i<=e;r=n,++i)n=a[i],(o=s(r[1],n[0]))>p&&(p=o,l=n[0],d=r[1])}return x=_=null,l===1/0||h===1/0?[[NaN,NaN],[NaN,NaN]]:[[l,h],[d,f]]}}(),so.geo.centroid=function(t){As=Cs=Es=Ps=Ls=Ms=ks=Is=Vs=Ds=Rs=0,so.geo.stream(t,Ns);var e=Vs,n=Ds,i=Rs,r=e*e+n*n+i*i;return r<No&&(e=Ms,n=ks,i=Is,Cs<Ro&&(e=Es,n=Ps,i=Ls),r=e*e+n*n+i*i,r<No)?[NaN,NaN]:[Math.atan2(n,e)*zo,et(i/Math.sqrt(r))*zo]};var As,Cs,Es,Ps,Ls,Ms,ks,Is,Vs,Ds,Rs,Ns={sphere:b,point:Te,lineStart:Ae,lineEnd:Ce,polygonStart:function(){Ns.lineStart=Ee},polygonEnd:function(){Ns.lineStart=Ae}},Os=Ve(Le,Oe,Fe,[-Oo,-Oo/2]),Gs=1e9;so.geo.clipExtent=function(){var t,e,n,i,r,a,o={stream:function(t){return r&&(r.valid=!1),r=a(t),r.valid=!0,r},extent:function(s){return arguments.length?(a=Xe(t=+s[0][0],e=+s[0][1],n=+s[1][0],i=+s[1][1]),r&&(r.valid=!1,r=null),o):[[t,e],[n,i]]}};return o.extent([[0,0],[960,500]])},(so.geo.conicEqualArea=function(){return $e(Be)}).raw=Be,so.geo.albers=function(){return so.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},so.geo.albersUsa=function(){function t(t){var a=t[0],o=t[1];return e=null,n(a,o),e||(i(a,o),e)||r(a,o),e}var e,n,i,r,a=so.geo.albers(),o=so.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),s=so.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),u={point:function(t,n){e=[t,n]}};return t.invert=function(t){var e=a.scale(),n=a.translate(),i=(t[0]-n[0])/e,r=(t[1]-n[1])/e;return(r>=.12&&r<.234&&i>=-.425&&i<-.214?o:r>=.166&&r<.234&&i>=-.214&&i<-.115?s:a).invert(t)},t.stream=function(t){var e=a.stream(t),n=o.stream(t),i=s.stream(t);return{point:function(t,r){e.point(t,r),n.point(t,r),i.point(t,r)},sphere:function(){e.sphere(),n.sphere(),i.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),i.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),i.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),i.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),i.polygonEnd()}}},t.precision=function(e){return arguments.length?(a.precision(e),o.precision(e),s.precision(e),t):a.precision()},t.scale=function(e){return arguments.length?(a.scale(e),o.scale(.35*e),s.scale(e),t.translate(a.translate())):a.scale()},t.translate=function(e){if(!arguments.length)return a.translate();var c=a.scale(),l=+e[0],h=+e[1];return n=a.translate(e).clipExtent([[l-.455*c,h-.238*c],[l+.455*c,h+.238*c]]).stream(u).point,i=o.translate([l-.307*c,h+.201*c]).clipExtent([[l-.425*c+Ro,h+.12*c+Ro],[l-.214*c-Ro,h+.234*c-Ro]]).stream(u).point,r=s.translate([l-.205*c,h+.212*c]).clipExtent([[l-.214*c+Ro,h+.166*c+Ro],[l-.115*c-Ro,h+.234*c-Ro]]).stream(u).point,t},t.scale(1070)};var Fs,js,Hs,zs,Xs,$s,Bs={point:b,lineStart:b,lineEnd:b,polygonStart:function(){js=0,Bs.lineStart=Ye},polygonEnd:function(){Bs.lineStart=Bs.lineEnd=Bs.point=b,Fs+=yo(js/2)}},Ys={point:Ue,lineStart:b,lineEnd:b,polygonStart:b,polygonEnd:b},Us={point:Qe,lineStart:Ze,lineEnd:Ke,polygonStart:function(){Us.lineStart=Je},polygonEnd:function(){Us.point=Qe,Us.lineStart=Ze,Us.lineEnd=Ke}};so.geo.path=function(){function t(t){return t&&("function"==typeof s&&a.pointRadius(+s.apply(this,arguments)),o&&o.valid||(o=r(a)),so.geo.stream(t,o)),a.result()}function e(){return o=null,t}var n,i,r,a,o,s=4.5;return t.area=function(t){return Fs=0,so.geo.stream(t,r(Bs)),Fs},t.centroid=function(t){return Es=Ps=Ls=Ms=ks=Is=Vs=Ds=Rs=0,so.geo.stream(t,r(Us)),Rs?[Vs/Rs,Ds/Rs]:Is?[Ms/Is,ks/Is]:Ls?[Es/Ls,Ps/Ls]:[NaN,NaN]},t.bounds=function(t){return Xs=$s=-(Hs=zs=1/0),so.geo.stream(t,r(Ys)),[[Hs,zs],[Xs,$s]]},t.projection=function(t){return arguments.length?(r=(n=t)?t.stream||nn(t):y,e()):n},t.context=function(t){return arguments.length?(a=null==(i=t)?new qe:new tn(t),"function"!=typeof s&&a.pointRadius(s),e()):i},t.pointRadius=function(e){return arguments.length?(s="function"==typeof e?e:(a.pointRadius(+e),+e),t):s},t.projection(so.geo.albersUsa()).context(null)},so.geo.transform=function(t){return{stream:function(e){var n=new rn(e);for(var i in t)n[i]=t[i];return n}}},rn.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},so.geo.projection=on,so.geo.projectionMutator=sn,(so.geo.equirectangular=function(){return on(cn)}).raw=cn.invert=cn,so.geo.rotation=function(t){function e(e){return e=t(e[0]*Ho,e[1]*Ho),e[0]*=zo,e[1]*=zo,e}return t=hn(t[0]%360*Ho,t[1]*Ho,t.length>2?t[2]*Ho:0),e.invert=function(e){return e=t.invert(e[0]*Ho,e[1]*Ho),e[0]*=zo,e[1]*=zo,e},e},ln.invert=cn,so.geo.circle=function(){function t(){var t="function"==typeof i?i.apply(this,arguments):i,e=hn(-t[0]*Ho,-t[1]*Ho,0).invert,r=[];return n(null,null,1,{point:function(t,n){r.push(t=e(t,n)),t[0]*=zo,t[1]*=zo}}),{type:"Polygon",coordinates:[r]}}var e,n,i=[0,0],r=6;return t.origin=function(e){return arguments.length?(i=e,t):i},t.angle=function(i){return arguments.length?(n=gn((e=+i)*Ho,r*Ho),t):e},t.precision=function(i){return arguments.length?(n=gn(e*Ho,(r=+i)*Ho),t):r},t.angle(90)},so.geo.distance=function(t,e){var n,i=(e[0]-t[0])*Ho,r=t[1]*Ho,a=e[1]*Ho,o=Math.sin(i),s=Math.cos(i),u=Math.sin(r),c=Math.cos(r),l=Math.sin(a),h=Math.cos(a);return Math.atan2(Math.sqrt((n=h*o)*n+(n=c*l-u*h*s)*n),u*l+c*h*s)},so.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return so.range(Math.ceil(a/v)*v,r,v).map(d).concat(so.range(Math.ceil(c/m)*m,u,m).map(f)).concat(so.range(Math.ceil(i/p)*p,n,p).filter(function(t){return yo(t%v)>Ro}).map(l)).concat(so.range(Math.ceil(s/g)*g,o,g).filter(function(t){return yo(t%m)>Ro}).map(h))}var n,i,r,a,o,s,u,c,l,h,d,f,p=10,g=p,v=90,m=360,y=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[d(a).concat(f(u).slice(1),d(r).reverse().slice(1),f(c).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.majorExtent(e).minorExtent(e):t.minorExtent()},t.majorExtent=function(e){return arguments.length?(a=+e[0][0],r=+e[1][0],c=+e[0][1],u=+e[1][1],a>r&&(e=a,a=r,r=e),c>u&&(e=c,c=u,u=e),t.precision(y)):[[a,c],[r,u]]},t.minorExtent=function(e){return arguments.length?(i=+e[0][0],n=+e[1][0],s=+e[0][1],o=+e[1][1],i>n&&(e=i,i=n,n=e),s>o&&(e=s,s=o,o=e),t.precision(y)):[[i,s],[n,o]]},t.step=function(e){return arguments.length?t.majorStep(e).minorStep(e):t.minorStep()},t.majorStep=function(e){return arguments.length?(v=+e[0],m=+e[1],t):[v,m]},t.minorStep=function(e){return arguments.length?(p=+e[0],g=+e[1],t):[p,g]},t.precision=function(e){return arguments.length?(y=+e,l=mn(s,o,90),h=yn(i,n,y),d=mn(c,u,90),f=yn(a,r,y),t):y},t.majorExtent([[-180,-90+Ro],[180,90-Ro]]).minorExtent([[-180,-80-Ro],[180,80+Ro]])},so.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[e||i.apply(this,arguments),n||r.apply(this,arguments)]}}var e,n,i=xn,r=_n;return t.distance=function(){return so.geo.distance(e||i.apply(this,arguments),n||r.apply(this,arguments))},t.source=function(n){return arguments.length?(i=n,e="function"==typeof n?null:n,t):i},t.target=function(e){return arguments.length?(r=e,n="function"==typeof e?null:e,t):r},t.precision=function(){return arguments.length?t:0},t},so.geo.interpolate=function(t,e){return bn(t[0]*Ho,t[1]*Ho,e[0]*Ho,e[1]*Ho)},so.geo.length=function(t){return qs=0,so.geo.stream(t,Ws),qs};var qs,Ws={sphere:b,point:b,lineStart:Sn,lineEnd:b,polygonStart:b,polygonEnd:b},Qs=Tn(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(so.geo.azimuthalEqualArea=function(){return on(Qs)}).raw=Qs;var Zs=Tn(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},y);(so.geo.azimuthalEquidistant=function(){return on(Zs)}).raw=Zs,(so.geo.conicConformal=function(){return $e(wn)}).raw=wn,(so.geo.conicEquidistant=function(){return $e(An)}).raw=An;var Ks=Tn(function(t){return 1/t},Math.atan);(so.geo.gnomonic=function(){return on(Ks)}).raw=Ks,Cn.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-jo]},(so.geo.mercator=function(){return En(Cn)}).raw=Cn;var Js=Tn(function(){return 1},Math.asin);(so.geo.orthographic=function(){return on(Js)}).raw=Js;var tu=Tn(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(so.geo.stereographic=function(){return on(tu)}).raw=tu,Pn.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-jo]},(so.geo.transverseMercator=function(){var t=En(Pn),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):(t=e(),
[t[1],-t[0]])},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90])}).raw=Pn,so.geom={},so.geom.hull=function(t){function e(t){if(t.length<3)return[];var e,r=Ct(n),a=Ct(i),o=t.length,s=[],u=[];for(e=0;e<o;e++)s.push([+r.call(this,t[e],e),+a.call(this,t[e],e),e]);for(s.sort(In),e=0;e<o;e++)u.push([s[e][0],-s[e][1]]);var c=kn(s),l=kn(u),h=l[0]===c[0],d=l[l.length-1]===c[c.length-1],f=[];for(e=c.length-1;e>=0;--e)f.push(t[s[c[e]][2]]);for(e=+h;e<l.length-d;++e)f.push(t[s[l[e]][2]]);return f}var n=Ln,i=Mn;return arguments.length?e(t):(e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(i=t,e):i},e)},so.geom.polygon=function(t){return To(t,eu),t};var eu=so.geom.polygon.prototype=[];eu.area=function(){for(var t,e=-1,n=this.length,i=this[n-1],r=0;++e<n;)t=i,i=this[e],r+=t[1]*i[0]-t[0]*i[1];return.5*r},eu.centroid=function(t){var e,n,i=-1,r=this.length,a=0,o=0,s=this[r-1];for(arguments.length||(t=-1/(6*this.area()));++i<r;)e=s,s=this[i],n=e[0]*s[1]-s[0]*e[1],a+=(e[0]+s[0])*n,o+=(e[1]+s[1])*n;return[a*t,o*t]},eu.clip=function(t){for(var e,n,i,r,a,o,s=Rn(t),u=-1,c=this.length-Rn(this),l=this[c-1];++u<c;){for(e=t.slice(),t.length=0,r=this[u],a=e[(i=e.length-s)-1],n=-1;++n<i;)o=e[n],Vn(o,l,r)?(Vn(a,l,r)||t.push(Dn(a,o,l,r)),t.push(o)):Vn(a,l,r)&&t.push(Dn(a,o,l,r)),a=o;s&&t.push(t[0]),l=r}return t};var nu,iu,ru,au,ou,su=[],uu=[];Xn.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)t=e[n].edge,t.b&&t.a||e.splice(n,1);return e.sort(Bn),e.length},ei.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},ni.prototype={insert:function(t,e){var n,i,r;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=oi(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)i=n.U,n===i.L?(r=i.R,r&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.R&&(ri(this,n),t=n,n=t.U),n.C=!1,i.C=!0,ai(this,i))):(r=i.L,r&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.L&&(ai(this,n),t=n,n=t.U),n.C=!1,i.C=!0,ri(this,i))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,i,r=t.U,a=t.L,o=t.R;if(n=a?o?oi(o):a:o,r?r.L===t?r.L=n:r.R=n:this._=n,a&&o?(i=n.C,n.C=t.C,n.L=a,a.U=n,n!==o?(r=n.U,n.U=t.U,t=n.R,r.L=t,n.R=o,o.U=n):(n.U=r,r=n,t=n.R)):(i=t.C,t=n),t&&(t.U=r),!i){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===r.L){if(e=r.R,e.C&&(e.C=!1,r.C=!0,ri(this,r),e=r.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,ai(this,e),e=r.R),e.C=r.C,r.C=e.R.C=!1,ri(this,r),t=this._;break}}else if(e=r.L,e.C&&(e.C=!1,r.C=!0,ai(this,r),e=r.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,ri(this,e),e=r.L),e.C=r.C,r.C=e.L.C=!1,ai(this,r),t=this._;break}e.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}},so.geom.voronoi=function(t){function e(t){var e=new Array(t.length),i=s[0][0],r=s[0][1],a=s[1][0],o=s[1][1];return si(n(t),s).cells.forEach(function(n,s){var u=n.edges,c=n.site,l=e[s]=u.length?u.map(function(t){var e=t.start();return[e.x,e.y]}):c.x>=i&&c.x<=a&&c.y>=r&&c.y<=o?[[i,o],[a,o],[a,r],[i,r]]:[];l.point=t[s]}),e}function n(t){return t.map(function(t,e){return{x:Math.round(a(t,e)/Ro)*Ro,y:Math.round(o(t,e)/Ro)*Ro,i:e}})}var i=Ln,r=Mn,a=i,o=r,s=cu;return t?e(t):(e.links=function(t){return si(n(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},e.triangles=function(t){var e=[];return si(n(t)).cells.forEach(function(n,i){for(var r,a,o=n.site,s=n.edges.sort(Bn),u=-1,c=s.length,l=s[c-1].edge,h=l.l===o?l.r:l.l;++u<c;)r=l,a=h,l=s[u].edge,h=l.l===o?l.r:l.l,i<a.i&&i<h.i&&ci(o,a,h)<0&&e.push([t[i],t[a.i],t[h.i]])}),e},e.x=function(t){return arguments.length?(a=Ct(i=t),e):i},e.y=function(t){return arguments.length?(o=Ct(r=t),e):r},e.clipExtent=function(t){return arguments.length?(s=null==t?cu:t,e):s===cu?null:s},e.size=function(t){return arguments.length?e.clipExtent(t&&[[0,0],t]):s===cu?null:s&&s[1]},e)};var cu=[[-1e6,-1e6],[1e6,1e6]];so.geom.delaunay=function(t){return so.geom.voronoi().triangles(t)},so.geom.quadtree=function(t,e,n,i,r){function a(t){function a(t,e,n,i,r,a,o,s){if(!isNaN(n)&&!isNaN(i))if(t.leaf){var u=t.x,l=t.y;if(null!=u)if(yo(u-n)+yo(l-i)<.01)c(t,e,n,i,r,a,o,s);else{var h=t.point;t.x=t.y=t.point=null,c(t,h,u,l,r,a,o,s),c(t,e,n,i,r,a,o,s)}else t.x=n,t.y=i,t.point=e}else c(t,e,n,i,r,a,o,s)}function c(t,e,n,i,r,o,s,u){var c=.5*(r+s),l=.5*(o+u),h=n>=c,d=i>=l,f=d<<1|h;t.leaf=!1,t=t.nodes[f]||(t.nodes[f]=di()),h?r=c:s=c,d?o=l:u=l,a(t,e,n,i,r,o,s,u)}var l,h,d,f,p,g,v,m,y,x=Ct(s),_=Ct(u);if(null!=e)g=e,v=n,m=i,y=r;else if(m=y=-(g=v=1/0),h=[],d=[],p=t.length,o)for(f=0;f<p;++f)l=t[f],l.x<g&&(g=l.x),l.y<v&&(v=l.y),l.x>m&&(m=l.x),l.y>y&&(y=l.y),h.push(l.x),d.push(l.y);else for(f=0;f<p;++f){var b=+x(l=t[f],f),S=+_(l,f);b<g&&(g=b),S<v&&(v=S),b>m&&(m=b),S>y&&(y=S),h.push(b),d.push(S)}var T=m-g,w=y-v;T>w?y=v+T:m=g+w;var A=di();if(A.add=function(t){a(A,t,+x(t,++f),+_(t,f),g,v,m,y)},A.visit=function(t){fi(t,A,g,v,m,y)},A.find=function(t){return pi(A,t[0],t[1],g,v,m,y)},f=-1,null==e){for(;++f<p;)a(A,t[f],h[f],d[f],g,v,m,y);--f}else t.forEach(A.add);return h=d=t=l=null,A}var o,s=Ln,u=Mn;return(o=arguments.length)?(s=li,u=hi,3===o&&(r=n,i=e,n=e=0),a(t)):(a.x=function(t){return arguments.length?(s=t,a):s},a.y=function(t){return arguments.length?(u=t,a):u},a.extent=function(t){return arguments.length?(null==t?e=n=i=r=null:(e=+t[0][0],n=+t[0][1],i=+t[1][0],r=+t[1][1]),a):null==e?null:[[e,n],[i,r]]},a.size=function(t){return arguments.length?(null==t?e=n=i=r=null:(e=n=0,i=+t[0],r=+t[1]),a):null==e?null:[i-e,r-n]},a)},so.interpolateRgb=gi,so.interpolateObject=vi,so.interpolateNumber=mi,so.interpolateString=yi;var lu=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,hu=new RegExp(lu.source,"g");so.interpolate=xi,so.interpolators=[function(t,e){var n=typeof e;return("string"===n?is.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?gi:yi:e instanceof ot?gi:Array.isArray(e)?_i:"object"===n&&isNaN(e)?vi:mi)(t,e)}],so.interpolateArray=_i;var du=function(){return y},fu=so.map({linear:du,poly:Ei,quad:function(){return wi},cubic:function(){return Ai},sin:function(){return Pi},exp:function(){return Li},circle:function(){return Mi},elastic:ki,back:Ii,bounce:function(){return Vi}}),pu=so.map({in:y,out:Si,"in-out":Ti,"out-in":function(t){return Ti(Si(t))}});so.ease=function(t){var e=t.indexOf("-"),n=e>=0?t.slice(0,e):t,i=e>=0?t.slice(e+1):"in";return n=fu.get(n)||du,i=pu.get(i)||y,bi(i(n.apply(null,uo.call(arguments,1))))},so.interpolateHcl=Di,so.interpolateHsl=Ri,so.interpolateLab=Ni,so.interpolateRound=Oi,so.transform=function(t){var e=lo.createElementNS(so.ns.prefix.svg,"g");return(so.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new Gi(n?n.matrix:gu)})(t)},Gi.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var gu={a:1,b:0,c:0,d:1,e:0,f:0};so.interpolateTransform=Ui,so.layout={},so.layout.bundle=function(){return function(t){for(var e=[],n=-1,i=t.length;++n<i;)e.push(Qi(t[n]));return e}},so.layout.chord=function(){function t(){var t,c,h,d,f,p={},g=[],v=so.range(a),m=[];for(n=[],i=[],t=0,d=-1;++d<a;){for(c=0,f=-1;++f<a;)c+=r[d][f];g.push(c),m.push(so.range(a)),t+=c}for(o&&v.sort(function(t,e){return o(g[t],g[e])}),s&&m.forEach(function(t,e){t.sort(function(t,n){return s(r[e][t],r[e][n])})}),t=(Go-l*a)/t,c=0,d=-1;++d<a;){for(h=c,f=-1;++f<a;){var y=v[d],x=m[y][f],_=r[y][x],b=c,S=c+=_*t;p[y+"-"+x]={index:y,subindex:x,startAngle:b,endAngle:S,value:_}}i[y]={index:y,startAngle:h,endAngle:c,value:g[y]},c+=l}for(d=-1;++d<a;)for(f=d-1;++f<a;){var T=p[d+"-"+f],w=p[f+"-"+d];(T.value||w.value)&&n.push(T.value<w.value?{source:w,target:T}:{source:T,target:w})}u&&e()}function e(){n.sort(function(t,e){return u((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}var n,i,r,a,o,s,u,c={},l=0;return c.matrix=function(t){return arguments.length?(a=(r=t)&&r.length,n=i=null,c):r},c.padding=function(t){return arguments.length?(l=t,n=i=null,c):l},c.sortGroups=function(t){return arguments.length?(o=t,n=i=null,c):o},c.sortSubgroups=function(t){return arguments.length?(s=t,n=null,c):s},c.sortChords=function(t){return arguments.length?(u=t,n&&e(),c):u},c.chords=function(){return n||t(),n},c.groups=function(){return i||t(),i},c},so.layout.force=function(){function t(t){return function(e,n,i,r){if(e.point!==t){var a=e.cx-t.x,o=e.cy-t.y,s=r-n,u=a*a+o*o;if(s*s/m<u){if(u<g){var c=e.charge/u;t.px-=a*c,t.py-=o*c}return!0}if(e.point&&u&&u<g){var c=e.pointCharge/u;t.px-=a*c,t.py-=o*c}}return!e.charge}}function e(t){t.px=so.event.x,t.py=so.event.y,u.resume()}var n,i,r,a,o,s,u={},c=so.dispatch("start","tick","end"),l=[1,1],h=.9,d=vu,f=mu,p=-30,g=yu,v=.1,m=.64,x=[],_=[];return u.tick=function(){if((r*=.99)<.005)return n=null,c.end({type:"end",alpha:r=0}),!0;var e,i,u,d,f,g,m,y,b,S=x.length,T=_.length;for(i=0;i<T;++i)u=_[i],d=u.source,f=u.target,y=f.x-d.x,b=f.y-d.y,(g=y*y+b*b)&&(g=r*o[i]*((g=Math.sqrt(g))-a[i])/g,y*=g,b*=g,f.x-=y*(m=d.weight+f.weight?d.weight/(d.weight+f.weight):.5),f.y-=b*m,d.x+=y*(m=1-m),d.y+=b*m);if((m=r*v)&&(y=l[0]/2,b=l[1]/2,i=-1,m))for(;++i<S;)u=x[i],u.x+=(y-u.x)*m,u.y+=(b-u.y)*m;if(p)for(ir(e=so.geom.quadtree(x),r,s),i=-1;++i<S;)(u=x[i]).fixed||e.visit(t(u));for(i=-1;++i<S;)u=x[i],u.fixed?(u.x=u.px,u.y=u.py):(u.x-=(u.px-(u.px=u.x))*h,u.y-=(u.py-(u.py=u.y))*h);c.tick({type:"tick",alpha:r})},u.nodes=function(t){return arguments.length?(x=t,u):x},u.links=function(t){return arguments.length?(_=t,u):_},u.size=function(t){return arguments.length?(l=t,u):l},u.linkDistance=function(t){return arguments.length?(d="function"==typeof t?t:+t,u):d},u.distance=u.linkDistance,u.linkStrength=function(t){return arguments.length?(f="function"==typeof t?t:+t,u):f},u.friction=function(t){return arguments.length?(h=+t,u):h},u.charge=function(t){return arguments.length?(p="function"==typeof t?t:+t,u):p},u.chargeDistance=function(t){return arguments.length?(g=t*t,u):Math.sqrt(g)},u.gravity=function(t){return arguments.length?(v=+t,u):v},u.theta=function(t){return arguments.length?(m=t*t,u):Math.sqrt(m)},u.alpha=function(t){return arguments.length?(t=+t,r?t>0?r=t:(n.c=null,n.t=NaN,n=null,c.end({type:"end",alpha:r=0})):t>0&&(c.start({type:"start",alpha:r=t}),n=kt(u.tick)),u):r},u.start=function(){function t(t,i){if(!n){for(n=new Array(r),u=0;u<r;++u)n[u]=[];for(u=0;u<c;++u){var a=_[u];n[a.source.index].push(a.target),n[a.target.index].push(a.source)}}for(var o,s=n[e],u=-1,l=s.length;++u<l;)if(!isNaN(o=s[u][t]))return o;return Math.random()*i}var e,n,i,r=x.length,c=_.length,h=l[0],g=l[1];for(e=0;e<r;++e)(i=x[e]).index=e,i.weight=0;for(e=0;e<c;++e)i=_[e],"number"==typeof i.source&&(i.source=x[i.source]),"number"==typeof i.target&&(i.target=x[i.target]),++i.source.weight,++i.target.weight;for(e=0;e<r;++e)i=x[e],isNaN(i.x)&&(i.x=t("x",h)),isNaN(i.y)&&(i.y=t("y",g)),isNaN(i.px)&&(i.px=i.x),isNaN(i.py)&&(i.py=i.y);if(a=[],"function"==typeof d)for(e=0;e<c;++e)a[e]=+d.call(this,_[e],e);else for(e=0;e<c;++e)a[e]=d;if(o=[],"function"==typeof f)for(e=0;e<c;++e)o[e]=+f.call(this,_[e],e);else for(e=0;e<c;++e)o[e]=f;if(s=[],"function"==typeof p)for(e=0;e<r;++e)s[e]=+p.call(this,x[e],e);else for(e=0;e<r;++e)s[e]=p;return u.resume()},u.resume=function(){return u.alpha(.1)},u.stop=function(){return u.alpha(0)},u.drag=function(){return i||(i=so.behavior.drag().origin(y).on("dragstart.force",Ji).on("drag.force",e).on("dragend.force",tr)),arguments.length?void this.on("mouseover.force",er).on("mouseout.force",nr).call(i):i},so.rebind(u,c,"on")};var vu=20,mu=1,yu=1/0;so.layout.hierarchy=function(){function t(r){var a,o=[r],s=[];for(r.depth=0;null!=(a=o.pop());)if(s.push(a),(c=n.call(t,a,a.depth))&&(u=c.length)){for(var u,c,l;--u>=0;)o.push(l=c[u]),l.parent=a,l.depth=a.depth+1;i&&(a.value=0),a.children=c}else i&&(a.value=+i.call(t,a,a.depth)||0),delete a.children;return or(r,function(t){var n,r;e&&(n=t.children)&&n.sort(e),i&&(r=t.parent)&&(r.value+=t.value)}),s}var e=cr,n=sr,i=ur;return t.sort=function(n){return arguments.length?(e=n,t):e},t.children=function(e){return arguments.length?(n=e,t):n},t.value=function(e){return arguments.length?(i=e,t):i},t.revalue=function(e){return i&&(ar(e,function(t){t.children&&(t.value=0)}),or(e,function(e){var n;e.children||(e.value=+i.call(t,e,e.depth)||0),(n=e.parent)&&(n.value+=e.value)})),e},t},so.layout.partition=function(){function t(e,n,i,r){var a=e.children;if(e.x=n,e.y=e.depth*r,e.dx=i,e.dy=r,a&&(o=a.length)){var o,s,u,c=-1;for(i=e.value?i/e.value:0;++c<o;)t(s=a[c],n,u=s.value*i,r),n+=u}}function e(t){var n=t.children,i=0;if(n&&(r=n.length))for(var r,a=-1;++a<r;)i=Math.max(i,e(n[a]));return 1+i}function n(n,a){var o=i.call(this,n,a);return t(o[0],0,r[0],r[1]/e(o[0])),o}var i=so.layout.hierarchy(),r=[1,1];return n.size=function(t){return arguments.length?(r=t,n):r},rr(n,i)},so.layout.pie=function(){function t(o){var s,u=o.length,c=o.map(function(n,i){return+e.call(t,n,i)}),l=+("function"==typeof i?i.apply(this,arguments):i),h=("function"==typeof r?r.apply(this,arguments):r)-l,d=Math.min(Math.abs(h)/u,+("function"==typeof a?a.apply(this,arguments):a)),f=d*(h<0?-1:1),p=so.sum(c),g=p?(h-u*f)/p:0,v=so.range(u),m=[];return null!=n&&v.sort(n===xu?function(t,e){return c[e]-c[t]}:function(t,e){return n(o[t],o[e])}),v.forEach(function(t){m[t]={data:o[t],value:s=c[t],startAngle:l,endAngle:l+=s*g+f,padAngle:d}}),m}var e=Number,n=xu,i=0,r=Go,a=0;return t.value=function(n){return arguments.length?(e=n,t):e},t.sort=function(e){return arguments.length?(n=e,t):n},t.startAngle=function(e){return arguments.length?(i=e,t):i},t.endAngle=function(e){return arguments.length?(r=e,t):r},t.padAngle=function(e){return arguments.length?(a=e,t):a},t};var xu={};so.layout.stack=function(){function t(s,u){if(!(d=s.length))return s;var c=s.map(function(n,i){return e.call(t,n,i)}),l=c.map(function(e){return e.map(function(e,n){return[a.call(t,e,n),o.call(t,e,n)]})}),h=n.call(t,l,u);c=so.permute(c,h),l=so.permute(l,h);var d,f,p,g,v=i.call(t,l,u),m=c[0].length;for(p=0;p<m;++p)for(r.call(t,c[0][p],g=v[p],l[0][p][1]),f=1;f<d;++f)r.call(t,c[f][p],g+=l[f-1][p][1],l[f][p][1]);return s}var e=y,n=pr,i=gr,r=fr,a=hr,o=dr;return t.values=function(n){return arguments.length?(e=n,t):e},t.order=function(e){return arguments.length?(n="function"==typeof e?e:_u.get(e)||pr,t):n},t.offset=function(e){return arguments.length?(i="function"==typeof e?e:bu.get(e)||gr,t):i},t.x=function(e){return arguments.length?(a=e,t):a},t.y=function(e){return arguments.length?(o=e,t):o},t.out=function(e){return arguments.length?(r=e,t):r},t};var _u=so.map({"inside-out":function(t){var e,n,i=t.length,r=t.map(vr),a=t.map(mr),o=so.range(i).sort(function(t,e){return r[t]-r[e]}),s=0,u=0,c=[],l=[];for(e=0;e<i;++e)n=o[e],s<u?(s+=a[n],c.push(n)):(u+=a[n],l.push(n));return l.reverse().concat(c)},reverse:function(t){return so.range(t.length).reverse()},default:pr}),bu=so.map({silhouette:function(t){var e,n,i,r=t.length,a=t[0].length,o=[],s=0,u=[];for(n=0;n<a;++n){for(e=0,i=0;e<r;e++)i+=t[e][n][1];i>s&&(s=i),o.push(i)}for(n=0;n<a;++n)u[n]=(s-o[n])/2;return u},wiggle:function(t){var e,n,i,r,a,o,s,u,c,l=t.length,h=t[0],d=h.length,f=[];for(f[0]=u=c=0,n=1;n<d;++n){for(e=0,r=0;e<l;++e)r+=t[e][n][1];for(e=0,a=0,s=h[n][0]-h[n-1][0];e<l;++e){for(i=0,o=(t[e][n][1]-t[e][n-1][1])/(2*s);i<e;++i)o+=(t[i][n][1]-t[i][n-1][1])/s;a+=o*t[e][n][1]}f[n]=u-=r?a/r*s:0,u<c&&(c=u)}for(n=0;n<d;++n)f[n]-=c;return f},expand:function(t){var e,n,i,r=t.length,a=t[0].length,o=1/r,s=[];for(n=0;n<a;++n){for(e=0,i=0;e<r;e++)i+=t[e][n][1];if(i)for(e=0;e<r;e++)t[e][n][1]/=i;else for(e=0;e<r;e++)t[e][n][1]=o}for(n=0;n<a;++n)s[n]=0;return s},zero:gr});so.layout.histogram=function(){function t(t,a){for(var o,s,u=[],c=t.map(n,this),l=i.call(this,c,a),h=r.call(this,l,c,a),a=-1,d=c.length,f=h.length-1,p=e?1:1/d;++a<f;)o=u[a]=[],o.dx=h[a+1]-(o.x=h[a]),o.y=0;if(f>0)for(a=-1;++a<d;)s=c[a],s>=l[0]&&s<=l[1]&&(o=u[so.bisect(h,s,1,f)-1],o.y+=p,o.push(t[a]));return u}var e=!0,n=Number,i=br,r=xr;return t.value=function(e){return arguments.length?(n=e,t):n},t.range=function(e){return arguments.length?(i=Ct(e),t):i},t.bins=function(e){return arguments.length?(r="number"==typeof e?function(t){return _r(t,e)}:Ct(e),t):r},t.frequency=function(n){return arguments.length?(e=!!n,t):e},t},so.layout.pack=function(){function t(t,a){var o=n.call(this,t,a),s=o[0],u=r[0],c=r[1],l=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(s.x=s.y=0,or(s,function(t){t.r=+l(t.value)}),or(s,Cr),i){var h=i*(e?1:Math.max(2*s.r/u,2*s.r/c))/2;or(s,function(t){t.r+=h}),or(s,Cr),or(s,function(t){t.r-=h})}return Lr(s,u/2,c/2,e?1:1/Math.max(2*s.r/u,2*s.r/c)),o}var e,n=so.layout.hierarchy().sort(Sr),i=0,r=[1,1];return t.size=function(e){return arguments.length?(r=e,t):r},t.radius=function(n){return arguments.length?(e=null==n||"function"==typeof n?n:+n,t):e},t.padding=function(e){return arguments.length?(i=+e,t):i},rr(t,n)},so.layout.tree=function(){function t(t,r){var l=o.call(this,t,r),h=l[0],d=e(h);if(or(d,n),d.parent.m=-d.z,ar(d,i),c)ar(h,a);else{var f=h,p=h,g=h;ar(h,function(t){t.x<f.x&&(f=t),t.x>p.x&&(p=t),t.depth>g.depth&&(g=t)});var v=s(f,p)/2-f.x,m=u[0]/(p.x+s(p,f)/2+v),y=u[1]/(g.depth||1);ar(h,function(t){t.x=(t.x+v)*m,t.y=t.depth*y})}return l}function e(t){for(var e,n={A:null,children:[t]},i=[n];null!=(e=i.pop());)for(var r,a=e.children,o=0,s=a.length;o<s;++o)i.push((a[o]=r={_:a[o],parent:e,children:(r=a[o].children)&&r.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=r);return n.children[0]}function n(t){var e=t.children,n=t.parent.children,i=t.i?n[t.i-1]:null;if(e.length){Rr(t);var a=(e[0].z+e[e.length-1].z)/2;i?(t.z=i.z+s(t._,i._),t.m=t.z-a):t.z=a}else i&&(t.z=i.z+s(t._,i._));t.parent.A=r(t,i,t.parent.A||n[0])}function i(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,e,n){if(e){for(var i,r=t,a=t,o=e,u=r.parent.children[0],c=r.m,l=a.m,h=o.m,d=u.m;o=Vr(o),r=Ir(r),o&&r;)u=Ir(u),a=Vr(a),a.a=t,i=o.z+h-r.z-c+s(o._,r._),i>0&&(Dr(Nr(o,t,n),t,i),c+=i,l+=i),h+=o.m,c+=r.m,d+=u.m,l+=a.m;o&&!Vr(a)&&(a.t=o,a.m+=h-l),r&&!Ir(u)&&(u.t=r,u.m+=c-d,n=t)}return n}function a(t){t.x*=u[0],t.y=t.depth*u[1]}var o=so.layout.hierarchy().sort(null).value(null),s=kr,u=[1,1],c=null;return t.separation=function(e){return arguments.length?(s=e,t):s},t.size=function(e){return arguments.length?(c=null==(u=e)?a:null,t):c?null:u},t.nodeSize=function(e){return arguments.length?(c=null==(u=e)?null:a,t):c?u:null},rr(t,o)},so.layout.cluster=function(){function t(t,a){var o,s=e.call(this,t,a),u=s[0],c=0;or(u,function(t){var e=t.children;e&&e.length?(t.x=Gr(e),t.y=Or(e)):(t.x=o?c+=n(t,o):0,t.y=0,o=t)});var l=Fr(u),h=jr(u),d=l.x-n(l,h)/2,f=h.x+n(h,l)/2;return or(u,r?function(t){t.x=(t.x-u.x)*i[0],t.y=(u.y-t.y)*i[1]}:function(t){t.x=(t.x-d)/(f-d)*i[0],t.y=(1-(u.y?t.y/u.y:1))*i[1]}),s}var e=so.layout.hierarchy().sort(null).value(null),n=kr,i=[1,1],r=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(e){return arguments.length?(r=null==(i=e),t):r?null:i},t.nodeSize=function(e){return arguments.length?(r=null!=(i=e),t):r?i:null},rr(t,e)},so.layout.treemap=function(){function t(t,e){for(var n,i,r=-1,a=t.length;++r<a;)i=(n=t[r]).value*(e<0?0:e),n.area=isNaN(i)||i<=0?0:i}function e(n){var a=n.children;if(a&&a.length){var o,s,u,c=h(n),l=[],d=a.slice(),p=1/0,g="slice"===f?c.dx:"dice"===f?c.dy:"slice-dice"===f?1&n.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(t(d,c.dx*c.dy/n.value),l.area=0;(u=d.length)>0;)l.push(o=d[u-1]),l.area+=o.area,"squarify"!==f||(s=i(l,g))<=p?(d.pop(),p=s):(l.area-=l.pop().area,r(l,g,c,!1),g=Math.min(c.dx,c.dy),l.length=l.area=0,p=1/0);l.length&&(r(l,g,c,!0),l.length=l.area=0),a.forEach(e)}}function n(e){var i=e.children;if(i&&i.length){var a,o=h(e),s=i.slice(),u=[];for(t(s,o.dx*o.dy/e.value),u.area=0;a=s.pop();)u.push(a),u.area+=a.area,null!=a.z&&(r(u,a.z?o.dx:o.dy,o,!s.length),u.length=u.area=0);i.forEach(n)}}function i(t,e){for(var n,i=t.area,r=0,a=1/0,o=-1,s=t.length;++o<s;)(n=t[o].area)&&(n<a&&(a=n),n>r&&(r=n));return i*=i,e*=e,i?Math.max(e*r*p/i,i/(e*a*p)):1/0}function r(t,e,n,i){var r,a=-1,o=t.length,s=n.x,c=n.y,l=e?u(t.area/e):0;if(e==n.dx){for((i||l>n.dy)&&(l=n.dy);++a<o;)r=t[a],r.x=s,r.y=c,r.dy=l,s+=r.dx=Math.min(n.x+n.dx-s,l?u(r.area/l):0);r.z=!0,r.dx+=n.x+n.dx-s,n.y+=l,n.dy-=l}else{for((i||l>n.dx)&&(l=n.dx);++a<o;)r=t[a],r.x=s,r.y=c,r.dx=l,c+=r.dy=Math.min(n.y+n.dy-c,l?u(r.area/l):0);r.z=!1,r.dy+=n.y+n.dy-c,n.x+=l,n.dx-=l}}function a(i){var r=o||s(i),a=r[0];return a.x=a.y=0,a.value?(a.dx=c[0],a.dy=c[1]):a.dx=a.dy=0,o&&s.revalue(a),t([a],a.dx*a.dy/a.value),(o?n:e)(a),d&&(o=r),r}var o,s=so.layout.hierarchy(),u=Math.round,c=[1,1],l=null,h=Hr,d=!1,f="squarify",p=.5*(1+Math.sqrt(5));return a.size=function(t){return arguments.length?(c=t,a):c},a.padding=function(t){function e(e){var n=t.call(a,e,e.depth);return null==n?Hr(e):zr(e,"number"==typeof n?[n,n,n,n]:n)}function n(e){return zr(e,t)}if(!arguments.length)return l;var i;return h=null==(l=t)?Hr:"function"==(i=typeof t)?e:"number"===i?(t=[t,t,t,t],n):n,a},a.round=function(t){return arguments.length?(u=t?Math.round:Number,a):u!=Number},a.sticky=function(t){return arguments.length?(d=t,o=null,a):d},a.ratio=function(t){return arguments.length?(p=t,a):p},a.mode=function(t){return arguments.length?(f=t+"",a):f},rr(a,s)},so.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,i,r;do n=2*Math.random()-1,i=2*Math.random()-1,r=n*n+i*i;while(!r||r>1);return t+e*n*Math.sqrt(-2*Math.log(r)/r)}},logNormal:function(){var t=so.random.normal.apply(so,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=so.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},so.scale={};var Su={floor:y,ceil:y};so.scale.linear=function(){return Wr([0,1],[0,1],xi,!1)};var Tu={s:1,g:1,p:1,r:1,e:1};so.scale.log=function(){return ia(so.scale.linear().domain([0,1]),10,!0,[1,10])};var wu=so.format(".0e"),Au={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};so.scale.pow=function(){return ra(so.scale.linear(),1,[0,1])},so.scale.sqrt=function(){return so.scale.pow().exponent(.5)},so.scale.ordinal=function(){return oa([],{t:"range",a:[[]]})},so.scale.category10=function(){return so.scale.ordinal().range(Cu)},so.scale.category20=function(){return so.scale.ordinal().range(Eu)},so.scale.category20b=function(){return so.scale.ordinal().range(Pu)},so.scale.category20c=function(){return so.scale.ordinal().range(Lu)};var Cu=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(xt),Eu=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(xt),Pu=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(xt),Lu=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(xt);so.scale.quantile=function(){return sa([],[])},so.scale.quantize=function(){return ua(0,1,[0,1])},so.scale.threshold=function(){return ca([.5],[0,1])},so.scale.identity=function(){return la([0,1])},so.svg={},so.svg.arc=function(){function t(){var t=Math.max(0,+n.apply(this,arguments)),c=Math.max(0,+i.apply(this,arguments)),l=o.apply(this,arguments)-jo,h=s.apply(this,arguments)-jo,d=Math.abs(h-l),f=l>h?0:1;if(c<t&&(p=c,c=t,t=p),d>=Fo)return e(c,f)+(t?e(t,1-f):"")+"Z";var p,g,v,m,y,x,_,b,S,T,w,A,C=0,E=0,P=[];if((m=(+u.apply(this,arguments)||0)/2)&&(v=a===Mu?Math.sqrt(t*t+c*c):+a.apply(this,arguments),f||(E*=-1),c&&(E=et(v/c*Math.sin(m))),t&&(C=et(v/t*Math.sin(m)))),c){y=c*Math.cos(l+E),x=c*Math.sin(l+E),_=c*Math.cos(h-E),b=c*Math.sin(h-E);var L=Math.abs(h-l-2*E)<=Oo?0:1;if(E&&ma(y,x,_,b)===f^L){var M=(l+h)/2;y=c*Math.cos(M),x=c*Math.sin(M),_=b=null}}else y=x=0;if(t){S=t*Math.cos(h-C),T=t*Math.sin(h-C),w=t*Math.cos(l+C),A=t*Math.sin(l+C);var k=Math.abs(l-h+2*C)<=Oo?0:1;if(C&&ma(S,T,w,A)===1-f^k){var I=(l+h)/2;S=t*Math.cos(I),T=t*Math.sin(I),w=A=null}}else S=T=0;if(d>Ro&&(p=Math.min(Math.abs(c-t)/2,+r.apply(this,arguments)))>.001){g=t<c^f?0:1;var V=p,D=p;if(d<Oo){var R=null==w?[S,T]:null==_?[y,x]:Dn([y,x],[w,A],[_,b],[S,T]),N=y-R[0],O=x-R[1],G=_-R[0],F=b-R[1],j=1/Math.sin(Math.acos((N*G+O*F)/(Math.sqrt(N*N+O*O)*Math.sqrt(G*G+F*F)))/2),H=Math.sqrt(R[0]*R[0]+R[1]*R[1]);D=Math.min(p,(t-H)/(j-1)),V=Math.min(p,(c-H)/(j+1))}if(null!=_){var z=ya(null==w?[S,T]:[w,A],[y,x],c,V,f),X=ya([_,b],[S,T],c,V,f);p===V?P.push("M",z[0],"A",V,",",V," 0 0,",g," ",z[1],"A",c,",",c," 0 ",1-f^ma(z[1][0],z[1][1],X[1][0],X[1][1]),",",f," ",X[1],"A",V,",",V," 0 0,",g," ",X[0]):P.push("M",z[0],"A",V,",",V," 0 1,",g," ",X[0])}else P.push("M",y,",",x);if(null!=w){var $=ya([y,x],[w,A],t,-D,f),B=ya([S,T],null==_?[y,x]:[_,b],t,-D,f);p===D?P.push("L",B[0],"A",D,",",D," 0 0,",g," ",B[1],"A",t,",",t," 0 ",f^ma(B[1][0],B[1][1],$[1][0],$[1][1]),",",1-f," ",$[1],"A",D,",",D," 0 0,",g," ",$[0]):P.push("L",B[0],"A",D,",",D," 0 0,",g," ",$[0])}else P.push("L",S,",",T)}else P.push("M",y,",",x),null!=_&&P.push("A",c,",",c," 0 ",L,",",f," ",_,",",b),P.push("L",S,",",T),null!=w&&P.push("A",t,",",t," 0 ",k,",",1-f," ",w,",",A);return P.push("Z"),P.join("")}function e(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}var n=da,i=fa,r=ha,a=Mu,o=pa,s=ga,u=va;return t.innerRadius=function(e){return arguments.length?(n=Ct(e),t):n},t.outerRadius=function(e){return arguments.length?(i=Ct(e),t):i},t.cornerRadius=function(e){return arguments.length?(r=Ct(e),t):r},t.padRadius=function(e){return arguments.length?(a=e==Mu?Mu:Ct(e),t):a},t.startAngle=function(e){return arguments.length?(o=Ct(e),t):o},t.endAngle=function(e){return arguments.length?(s=Ct(e),t):s},t.padAngle=function(e){return arguments.length?(u=Ct(e),t):u},t.centroid=function(){var t=(+n.apply(this,arguments)+ +i.apply(this,arguments))/2,e=(+o.apply(this,arguments)+ +s.apply(this,arguments))/2-jo;return[Math.cos(e)*t,Math.sin(e)*t]},t};var Mu="auto";so.svg.line=function(){return xa(y)};var ku=so.map({linear:_a,"linear-closed":ba,step:Sa,"step-before":Ta,"step-after":wa,basis:Ma,"basis-open":ka,"basis-closed":Ia,bundle:Va,cardinal:Ea,"cardinal-open":Aa,"cardinal-closed":Ca,monotone:Fa});ku.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var Iu=[0,2/3,1/3,0],Vu=[0,1/3,2/3,0],Du=[0,1/6,2/3,1/6];so.svg.line.radial=function(){var t=xa(ja);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},Ta.reverse=wa,wa.reverse=Ta,so.svg.area=function(){return Ha(y)},so.svg.area.radial=function(){var t=Ha(ja);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},so.svg.chord=function(){function t(t,s){var u=e(this,a,t,s),c=e(this,o,t,s);return"M"+u.p0+i(u.r,u.p1,u.a1-u.a0)+(n(u,c)?r(u.r,u.p1,u.r,u.p0):r(u.r,u.p1,c.r,c.p0)+i(c.r,c.p1,c.a1-c.a0)+r(c.r,c.p1,u.r,u.p0))+"Z"}function e(t,e,n,i){var r=e.call(t,n,i),a=s.call(t,r,i),o=u.call(t,r,i)-jo,l=c.call(t,r,i)-jo;return{r:a,a0:o,a1:l,p0:[a*Math.cos(o),a*Math.sin(o)],p1:[a*Math.cos(l),a*Math.sin(l)]}}function n(t,e){return t.a0==e.a0&&t.a1==e.a1}function i(t,e,n){return"A"+t+","+t+" 0 "+ +(n>Oo)+",1 "+e}function r(t,e,n,i){return"Q 0,0 "+i}var a=xn,o=_n,s=za,u=pa,c=ga;return t.radius=function(e){return arguments.length?(s=Ct(e),t):s},t.source=function(e){return arguments.length?(a=Ct(e),t):a},t.target=function(e){return arguments.length?(o=Ct(e),t):o},t.startAngle=function(e){return arguments.length?(u=Ct(e),t):u},t.endAngle=function(e){return arguments.length?(c=Ct(e),t):c},t},so.svg.diagonal=function(){function t(t,r){var a=e.call(this,t,r),o=n.call(this,t,r),s=(a.y+o.y)/2,u=[a,{x:a.x,y:s},{x:o.x,y:s},o];return u=u.map(i),"M"+u[0]+"C"+u[1]+" "+u[2]+" "+u[3]}var e=xn,n=_n,i=Xa;return t.source=function(n){return arguments.length?(e=Ct(n),t):e},t.target=function(e){return arguments.length?(n=Ct(e),t):n},t.projection=function(e){return arguments.length?(i=e,t):i},t},so.svg.diagonal.radial=function(){var t=so.svg.diagonal(),e=Xa,n=t.projection;return t.projection=function(t){return arguments.length?n($a(e=t)):e},t},so.svg.symbol=function(){function t(t,i){return(Ru.get(e.call(this,t,i))||Ua)(n.call(this,t,i))}var e=Ya,n=Ba;return t.type=function(n){return arguments.length?(e=Ct(n),t):e},t.size=function(e){return arguments.length?(n=Ct(e),t):n},t};var Ru=so.map({circle:Ua,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*Ou)),n=e*Ou;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/Nu),n=e*Nu/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/Nu),n=e*Nu/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});so.svg.symbolTypes=Ru.keys();var Nu=Math.sqrt(3),Ou=Math.tan(30*Ho);Eo.transition=function(t){for(var e,n,i=Gu||++zu,r=Ka(t),a=[],o=Fu||{time:Date.now(),ease:Ci,delay:0,duration:250},s=-1,u=this.length;++s<u;){a.push(e=[]);for(var c=this[s],l=-1,h=c.length;++l<h;)(n=c[l])&&Ja(n,l,r,i,o),e.push(n)}return Wa(a,r,i)},Eo.interrupt=function(t){return this.each(null==t?ju:qa(Ka(t)))};var Gu,Fu,ju=qa(Ka()),Hu=[],zu=0;Hu.call=Eo.call,Hu.empty=Eo.empty,Hu.node=Eo.node,Hu.size=Eo.size,so.transition=function(t,e){return t&&t.transition?Gu?t.transition(e):t:so.selection().transition(t)},so.transition.prototype=Hu,Hu.select=function(t){var e,n,i,r=this.id,a=this.namespace,o=[];t=P(t);for(var s=-1,u=this.length;++s<u;){o.push(e=[]);for(var c=this[s],l=-1,h=c.length;++l<h;)(i=c[l])&&(n=t.call(i,i.__data__,l,s))?("__data__"in i&&(n.__data__=i.__data__),Ja(n,l,a,r,i[a][r]),e.push(n)):e.push(null)}return Wa(o,a,r)},Hu.selectAll=function(t){var e,n,i,r,a,o=this.id,s=this.namespace,u=[];t=L(t);for(var c=-1,l=this.length;++c<l;)for(var h=this[c],d=-1,f=h.length;++d<f;)if(i=h[d]){a=i[s][o],n=t.call(i,i.__data__,d,c),u.push(e=[]);for(var p=-1,g=n.length;++p<g;)(r=n[p])&&Ja(r,p,s,o,a),e.push(r)}return Wa(u,s,o)},Hu.filter=function(t){var e,n,i,r=[];"function"!=typeof t&&(t=H(t));for(var a=0,o=this.length;a<o;a++){r.push(e=[]);for(var n=this[a],s=0,u=n.length;s<u;s++)(i=n[s])&&t.call(i,i.__data__,s,a)&&e.push(i)}return Wa(r,this.namespace,this.id)},Hu.tween=function(t,e){var n=this.id,i=this.namespace;return arguments.length<2?this.node()[i][n].tween.get(t):X(this,null==e?function(e){e[i][n].tween.remove(t)}:function(r){r[i][n].tween.set(t,e)})},Hu.attr=function(t,e){function n(){this.removeAttribute(s)}function i(){this.removeAttributeNS(s.space,s.local)}function r(t){return null==t?n:(t+="",function(){var e,n=this.getAttribute(s);return n!==t&&(e=o(n,t),function(t){this.setAttribute(s,e(t))})})}function a(t){return null==t?i:(t+="",function(){var e,n=this.getAttributeNS(s.space,s.local);return n!==t&&(e=o(n,t),function(t){this.setAttributeNS(s.space,s.local,e(t))})})}if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var o="transform"==t?Ui:xi,s=so.ns.qualify(t);return Qa(this,"attr."+t,e,s.local?a:r)},Hu.attrTween=function(t,e){function n(t,n){var i=e.call(this,t,n,this.getAttribute(r));return i&&function(t){this.setAttribute(r,i(t))}}function i(t,n){var i=e.call(this,t,n,this.getAttributeNS(r.space,r.local));return i&&function(t){this.setAttributeNS(r.space,r.local,i(t))}}var r=so.ns.qualify(t);return this.tween("attr."+t,r.local?i:n);
},Hu.style=function(t,n,i){function r(){this.style.removeProperty(t)}function a(n){return null==n?r:(n+="",function(){var r,a=e(this).getComputedStyle(this,null).getPropertyValue(t);return a!==n&&(r=xi(a,n),function(e){this.style.setProperty(t,r(e),i)})})}var o=arguments.length;if(o<3){if("string"!=typeof t){o<2&&(n="");for(i in t)this.style(i,t[i],n);return this}i=""}return Qa(this,"style."+t,n,a)},Hu.styleTween=function(t,n,i){function r(r,a){var o=n.call(this,r,a,e(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(e){this.style.setProperty(t,o(e),i)}}return arguments.length<3&&(i=""),this.tween("style."+t,r)},Hu.text=function(t){return Qa(this,"text",t,Za)},Hu.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},Hu.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=so.ease.apply(so,arguments)),X(this,function(i){i[n][e].ease=t}))},Hu.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:X(this,"function"==typeof t?function(i,r,a){i[n][e].delay=+t.call(i,i.__data__,r,a)}:(t=+t,function(i){i[n][e].delay=t}))},Hu.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:X(this,"function"==typeof t?function(i,r,a){i[n][e].duration=Math.max(1,t.call(i,i.__data__,r,a))}:(t=Math.max(1,t),function(i){i[n][e].duration=t}))},Hu.each=function(t,e){var n=this.id,i=this.namespace;if(arguments.length<2){var r=Fu,a=Gu;try{Gu=n,X(this,function(e,r,a){Fu=e[i][n],t.call(e,e.__data__,r,a)})}finally{Fu=r,Gu=a}}else X(this,function(r){var a=r[i][n];(a.event||(a.event=so.dispatch("start","end","interrupt"))).on(t,e)});return this},Hu.transition=function(){for(var t,e,n,i,r=this.id,a=++zu,o=this.namespace,s=[],u=0,c=this.length;u<c;u++){s.push(t=[]);for(var e=this[u],l=0,h=e.length;l<h;l++)(n=e[l])&&(i=n[o][r],Ja(n,l,o,a,{time:i.time,ease:i.ease,delay:i.delay+i.duration,duration:i.duration})),t.push(n)}return Wa(s,o,a)},so.svg.axis=function(){function t(t){t.each(function(){var t,c=so.select(this),l=this.__chart__||n,h=this.__chart__=n.copy(),d=null==u?h.ticks?h.ticks.apply(h,s):h.domain():u,f=null==e?h.tickFormat?h.tickFormat.apply(h,s):y:e,p=c.selectAll(".tick").data(d,h),g=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Ro),v=so.transition(p.exit()).style("opacity",Ro).remove(),m=so.transition(p.order()).style("opacity",1),x=Math.max(r,0)+o,_=$r(h),b=c.selectAll(".domain").data([0]),S=(b.enter().append("path").attr("class","domain"),so.transition(b));g.append("line"),g.append("text");var T,w,A,C,E=g.select("line"),P=m.select("line"),L=p.select("text").text(f),M=g.select("text"),k=m.select("text"),I="top"===i||"left"===i?-1:1;if("bottom"===i||"top"===i?(t=to,T="x",A="y",w="x2",C="y2",L.attr("dy",I<0?"0em":".71em").style("text-anchor","middle"),S.attr("d","M"+_[0]+","+I*a+"V0H"+_[1]+"V"+I*a)):(t=eo,T="y",A="x",w="y2",C="x2",L.attr("dy",".32em").style("text-anchor",I<0?"end":"start"),S.attr("d","M"+I*a+","+_[0]+"H0V"+_[1]+"H"+I*a)),E.attr(C,I*r),M.attr(A,I*x),P.attr(w,0).attr(C,I*r),k.attr(T,0).attr(A,I*x),h.rangeBand){var V=h,D=V.rangeBand()/2;l=h=function(t){return V(t)+D}}else l.rangeBand?l=h:v.call(t,h,l);g.call(t,l,h),m.call(t,h,h)})}var e,n=so.scale.linear(),i=Xu,r=6,a=6,o=3,s=[10],u=null;return t.scale=function(e){return arguments.length?(n=e,t):n},t.orient=function(e){return arguments.length?(i=e in $u?e+"":Xu,t):i},t.ticks=function(){return arguments.length?(s=co(arguments),t):s},t.tickValues=function(e){return arguments.length?(u=e,t):u},t.tickFormat=function(n){return arguments.length?(e=n,t):e},t.tickSize=function(e){var n=arguments.length;return n?(r=+e,a=+arguments[n-1],t):r},t.innerTickSize=function(e){return arguments.length?(r=+e,t):r},t.outerTickSize=function(e){return arguments.length?(a=+e,t):a},t.tickPadding=function(e){return arguments.length?(o=+e,t):o},t.tickSubdivide=function(){return arguments.length&&t},t};var Xu="bottom",$u={top:1,right:1,bottom:1,left:1};so.svg.brush=function(){function t(e){e.each(function(){var e=so.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",a).on("touchstart.brush",a),o=e.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),e.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var s=e.selectAll(".resize").data(g,y);s.exit().remove(),s.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Bu[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),s.style("display",t.empty()?"none":null);var u,h=so.transition(e),d=so.transition(o);c&&(u=$r(c),d.attr("x",u[0]).attr("width",u[1]-u[0]),i(h)),l&&(u=$r(l),d.attr("y",u[0]).attr("height",u[1]-u[0]),r(h)),n(h)})}function n(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+h[+/e$/.test(t)]+","+d[+/^s/.test(t)]+")"})}function i(t){t.select(".extent").attr("x",h[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",h[1]-h[0])}function r(t){t.select(".extent").attr("y",d[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",d[1]-d[0])}function a(){function a(){32==so.event.keyCode&&(L||(x=null,k[0]-=h[1],k[1]-=d[1],L=2),w())}function g(){32==so.event.keyCode&&2==L&&(k[0]+=h[1],k[1]+=d[1],L=0,w())}function v(){var t=so.mouse(b),e=!1;_&&(t[0]+=_[0],t[1]+=_[1]),L||(so.event.altKey?(x||(x=[(h[0]+h[1])/2,(d[0]+d[1])/2]),k[0]=h[+(t[0]<x[0])],k[1]=d[+(t[1]<x[1])]):x=null),E&&m(t,c,0)&&(i(A),e=!0),P&&m(t,l,1)&&(r(A),e=!0),e&&(n(A),T({type:"brush",mode:L?"move":"resize"}))}function m(t,e,n){var i,r,a=$r(e),u=a[0],c=a[1],l=k[n],g=n?d:h,v=g[1]-g[0];if(L&&(u-=l,c-=v+l),i=(n?p:f)?Math.max(u,Math.min(c,t[n])):t[n],L?r=(i+=l)+v:(x&&(l=Math.max(u,Math.min(c,2*x[n]-i))),l<i?(r=i,i=l):r=l),g[0]!=i||g[1]!=r)return n?s=null:o=null,g[0]=i,g[1]=r,!0}function y(){v(),A.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),so.select("body").style("cursor",null),I.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),M(),T({type:"brushend"})}var x,_,b=this,S=so.select(so.event.target),T=u.of(b,arguments),A=so.select(b),C=S.datum(),E=!/^(n|s)$/.test(C)&&c,P=!/^(e|w)$/.test(C)&&l,L=S.classed("extent"),M=W(b),k=so.mouse(b),I=so.select(e(b)).on("keydown.brush",a).on("keyup.brush",g);if(so.event.changedTouches?I.on("touchmove.brush",v).on("touchend.brush",y):I.on("mousemove.brush",v).on("mouseup.brush",y),A.interrupt().selectAll("*").interrupt(),L)k[0]=h[0]-k[0],k[1]=d[0]-k[1];else if(C){var V=+/w$/.test(C),D=+/^n/.test(C);_=[h[1-V]-k[0],d[1-D]-k[1]],k[0]=h[V],k[1]=d[D]}else so.event.altKey&&(x=k.slice());A.style("pointer-events","none").selectAll(".resize").style("display",null),so.select("body").style("cursor",S.style("cursor")),T({type:"brushstart"}),v()}var o,s,u=C(t,"brushstart","brush","brushend"),c=null,l=null,h=[0,0],d=[0,0],f=!0,p=!0,g=Yu[0];return t.event=function(t){t.each(function(){var t=u.of(this,arguments),e={x:h,y:d,i:o,j:s},n=this.__chart__||e;this.__chart__=e,Gu?so.select(this).transition().each("start.brush",function(){o=n.i,s=n.j,h=n.x,d=n.y,t({type:"brushstart"})}).tween("brush:brush",function(){var n=_i(h,e.x),i=_i(d,e.y);return o=s=null,function(r){h=e.x=n(r),d=e.y=i(r),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=e.i,s=e.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(e){return arguments.length?(c=e,g=Yu[!c<<1|!l],t):c},t.y=function(e){return arguments.length?(l=e,g=Yu[!c<<1|!l],t):l},t.clamp=function(e){return arguments.length?(c&&l?(f=!!e[0],p=!!e[1]):c?f=!!e:l&&(p=!!e),t):c&&l?[f,p]:c?f:l?p:null},t.extent=function(e){var n,i,r,a,u;return arguments.length?(c&&(n=e[0],i=e[1],l&&(n=n[0],i=i[0]),o=[n,i],c.invert&&(n=c(n),i=c(i)),i<n&&(u=n,n=i,i=u),n==h[0]&&i==h[1]||(h=[n,i])),l&&(r=e[0],a=e[1],c&&(r=r[1],a=a[1]),s=[r,a],l.invert&&(r=l(r),a=l(a)),a<r&&(u=r,r=a,a=u),r==d[0]&&a==d[1]||(d=[r,a])),t):(c&&(o?(n=o[0],i=o[1]):(n=h[0],i=h[1],c.invert&&(n=c.invert(n),i=c.invert(i)),i<n&&(u=n,n=i,i=u))),l&&(s?(r=s[0],a=s[1]):(r=d[0],a=d[1],l.invert&&(r=l.invert(r),a=l.invert(a)),a<r&&(u=r,r=a,a=u))),c&&l?[[n,r],[i,a]]:c?[n,i]:l&&[r,a])},t.clear=function(){return t.empty()||(h=[0,0],d=[0,0],o=s=null),t},t.empty=function(){return!!c&&h[0]==h[1]||!!l&&d[0]==d[1]},so.rebind(t,u,"on")};var Bu={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Yu=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Uu=ds.format=ys.timeFormat,qu=Uu.utc,Wu=qu("%Y-%m-%dT%H:%M:%S.%LZ");Uu.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?no:Wu,no.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},no.toString=Wu.toString,ds.second=jt(function(t){return new fs(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),ds.seconds=ds.second.range,ds.seconds.utc=ds.second.utc.range,ds.minute=jt(function(t){return new fs(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),ds.minutes=ds.minute.range,ds.minutes.utc=ds.minute.utc.range,ds.hour=jt(function(t){var e=t.getTimezoneOffset()/60;return new fs(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),ds.hours=ds.hour.range,ds.hours.utc=ds.hour.utc.range,ds.month=jt(function(t){return t=ds.day(t),t.setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),ds.months=ds.month.range,ds.months.utc=ds.month.utc.range;var Qu=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Zu=[[ds.second,1],[ds.second,5],[ds.second,15],[ds.second,30],[ds.minute,1],[ds.minute,5],[ds.minute,15],[ds.minute,30],[ds.hour,1],[ds.hour,3],[ds.hour,6],[ds.hour,12],[ds.day,1],[ds.day,2],[ds.week,1],[ds.month,1],[ds.month,3],[ds.year,1]],Ku=Uu.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",Le]]),Ju={range:function(t,e,n){return so.range(Math.ceil(t/n)*n,+e,n).map(ro)},floor:y,ceil:y};Zu.year=ds.year,ds.scale=function(){return io(so.scale.linear(),Zu,Ku)};var tc=Zu.map(function(t){return[t[0].utc,t[1]]}),ec=qu.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",Le]]);tc.year=ds.year.utc,ds.scale.utc=function(){return io(so.scale.linear(),tc,ec)},so.text=Et(function(t){return t.responseText}),so.json=function(t,e){return Pt(t,"application/json",ao,e)},so.html=function(t,e){return Pt(t,"text/html",oo,e)},so.xml=Et(function(t){return t.responseXML}),"function"==typeof define&&define.amd?(this.d3=so,define(so)):"object"==typeof module&&module.exports?module.exports=so:this.d3=so}(),function(t){"use strict";function e(t){this.owner=t}function n(t,e){if(Object.create)e.prototype=Object.create(t.prototype);else{var n=function(){};n.prototype=t.prototype,e.prototype=new n}return e.prototype.constructor=e,e}function i(t){var e=this.internal=new r(this);e.loadConfig(t),e.beforeInit(t),e.init(),e.afterInit(t),function t(e,n,i){Object.keys(e).forEach(function(r){n[r]=e[r].bind(i),Object.keys(e[r]).length>0&&t(e[r],n[r],i)})}(s,this,this)}function r(e){var n=this;n.d3=t.d3?t.d3:"undefined"!=typeof require?require("d3"):void 0,n.api=e,n.config=n.getDefaultConfig(),n.data={},n.cache={},n.axes={}}function a(t){e.call(this,t)}function o(t,e){function n(t,e){t.attr("transform",function(t){return"translate("+Math.ceil(e(t)+_)+", 0)"})}function i(t,e){t.attr("transform",function(t){return"translate(0,"+Math.ceil(e(t))+")"})}function r(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function a(t){var e,n,i=[];if(t.ticks)return t.ticks.apply(t,f);for(n=t.domain(),e=Math.ceil(n[0]);e<n[1];e++)i.push(e);return i.length>0&&i[0]>0&&i.unshift(i[0]-(i[1]-i[0])),i}function o(){var t,n=g.copy();return e.isCategory&&(t=g.domain(),n.domain([t[0],t[1]-1])),n}function s(t){var e=d?d(t):t;return"undefined"!=typeof e?e:""}function u(t){if(C)return C;var e={h:11.5,w:5.5};return t.select("text").text(s).each(function(t){var n=this.getBoundingClientRect(),i=s(t),r=n.height,a=i?n.width/i.length:void 0;r&&a&&(e.h=r,e.w=a)}).text(""),C=e,e}function c(n){return e.withoutTransition?n:t.transition(n)}function l(d){d.each(function(){function d(t,n){function i(t,e){a=void 0;for(var s=1;s<e.length;s++)if(" "===e.charAt(s)&&(a=s),r=e.substr(0,s+1),o=Y.w*r.length,n<o)return i(t.concat(e.substr(0,a?a:s)),e.slice(a?a+1:s));return t.concat(e)}var r,a,o,u=s(t),c=[];return"[object Array]"===Object.prototype.toString.call(u)?u:((!n||n<=0)&&(n=W?95:e.isCategory?Math.ceil(k(I[1])-k(I[0]))-12:110),i(c,u+""))}function f(t,e){var n=Y.h;return 0===e&&(n="left"===v||"right"===v?-((U[t.index]-1)*(Y.h/2)-3):".71em"),n}function b(t){var e=g(t)+(p?0:_);return O[0]<e&&e<O[1]?m:0}function S(t){return t?t>0?"start":"end":"middle"}function T(t){return t?"rotate("+t+")":""}function w(t){return t?8*Math.sin(Math.PI*(t/180)):0}function A(t){return t?11.5-2.5*(t/15)*(t>0?1:-1):q}var C,E,P,L=l.g=t.select(this),M=this.__chart__||g,k=this.__chart__=o(),I=x?x:a(k),V=L.selectAll(".tick").data(I,k),D=V.enter().insert("g",".domain").attr("class","tick").style("opacity",1e-6),R=V.exit().remove(),N=c(V).style("opacity",1),O=g.rangeExtent?g.rangeExtent():r(g.range()),G=L.selectAll(".domain").data([0]),F=(G.enter().append("path").attr("class","domain"),c(G));D.append("line"),D.append("text");var j=D.select("line"),H=N.select("line"),z=D.select("text"),X=N.select("text");e.isCategory?(_=Math.ceil((k(1)-k(0))/2),E=p?0:_,P=p?_:0):_=E=0;var $,B,Y=u(L.select(".tick")),U=[],q=Math.max(m,0)+y,W="left"===v||"right"===v;$=V.select("text"),B=$.selectAll("tspan").data(function(t,n){var i=e.tickMultiline?d(t,e.tickWidth):[].concat(s(t));return U[n]=i.length,i.map(function(t){return{index:n,splitted:t}})}),B.enter().append("tspan"),B.exit().remove(),B.text(function(t){return t.splitted});var Q=e.tickTextRotate;switch(v){case"bottom":C=n,j.attr("y2",m),z.attr("y",q),H.attr("x1",E).attr("x2",E).attr("y2",b),X.attr("x",0).attr("y",A(Q)).style("text-anchor",S(Q)).attr("transform",T(Q)),B.attr("x",0).attr("dy",f).attr("dx",w(Q)),F.attr("d","M"+O[0]+","+h+"V0H"+O[1]+"V"+h);break;case"top":C=n,j.attr("y2",-m),z.attr("y",-q),H.attr("x2",0).attr("y2",-m),X.attr("x",0).attr("y",-q),$.style("text-anchor","middle"),B.attr("x",0).attr("dy","0em"),F.attr("d","M"+O[0]+","+-h+"V0H"+O[1]+"V"+-h);break;case"left":C=i,j.attr("x2",-m),z.attr("x",-q),H.attr("x2",-m).attr("y1",P).attr("y2",P),X.attr("x",-q).attr("y",_),$.style("text-anchor","end"),B.attr("x",-q).attr("dy",f),F.attr("d","M"+-h+","+O[0]+"H0V"+O[1]+"H"+-h);break;case"right":C=i,j.attr("x2",m),z.attr("x",q),H.attr("x2",m).attr("y2",0),X.attr("x",q).attr("y",0),$.style("text-anchor","start"),B.attr("x",q).attr("dy",f),F.attr("d","M"+h+","+O[0]+"H0V"+O[1]+"H"+h)}if(k.rangeBand){var Z=k,K=Z.rangeBand()/2;M=k=function(t){return Z(t)+K}}else M.rangeBand?M=k:R.call(C,k);D.call(C,M),N.call(C,k)})}var h,d,f,p,g=t.scale.linear(),v="bottom",m=6,y=3,x=null,_=0,b=!0;return e=e||{},h=e.withOuterTick?6:0,l.scale=function(t){return arguments.length?(g=t,l):g},l.orient=function(t){return arguments.length?(v=t in{top:1,right:1,bottom:1,left:1}?t+"":"bottom",l):v},l.tickFormat=function(t){return arguments.length?(d=t,l):d},l.tickCentered=function(t){return arguments.length?(p=t,l):p},l.tickOffset=function(){return _},l.tickInterval=function(){var t,n;return e.isCategory?t=2*_:(n=l.g.select("path.domain").node().getTotalLength()-2*h,t=n/l.g.selectAll("line").size()),t===1/0?0:t},l.ticks=function(){return arguments.length?(f=arguments,l):f},l.tickCulling=function(t){return arguments.length?(b=t,l):b},l.tickValues=function(t){if("function"==typeof t)x=function(){return t(g.domain())};else{if(!arguments.length)return x;x=t}return l},l}var s,u,c,l={version:"0.4.11"};l.generate=function(t){return new i(t)},l.chart={fn:i.prototype,internal:{fn:r.prototype,axis:{fn:a.prototype}}},s=l.chart.fn,u=l.chart.internal.fn,c=l.chart.internal.axis.fn,u.beforeInit=function(){},u.afterInit=function(){},u.init=function(){var t=this,e=t.config;if(t.initParams(),e.data_url)t.convertUrlToData(e.data_url,e.data_mimeType,e.data_headers,e.data_keys,t.initWithData);else if(e.data_json)t.initWithData(t.convertJsonToData(e.data_json,e.data_keys));else if(e.data_rows)t.initWithData(t.convertRowsToData(e.data_rows));else{if(!e.data_columns)throw Error("url or json or rows or columns is required.");t.initWithData(t.convertColumnsToData(e.data_columns))}},u.initParams=function(){var t=this,e=t.d3,n=t.config;t.clipId="c3-"+ +new Date+"-clip",t.clipIdForXAxis=t.clipId+"-xaxis",t.clipIdForYAxis=t.clipId+"-yaxis",t.clipIdForGrid=t.clipId+"-grid",t.clipIdForSubchart=t.clipId+"-subchart",t.clipPath=t.getClipPath(t.clipId),t.clipPathForXAxis=t.getClipPath(t.clipIdForXAxis),t.clipPathForYAxis=t.getClipPath(t.clipIdForYAxis),t.clipPathForGrid=t.getClipPath(t.clipIdForGrid),t.clipPathForSubchart=t.getClipPath(t.clipIdForSubchart),t.dragStart=null,t.dragging=!1,t.flowing=!1,t.cancelClick=!1,t.mouseover=!1,t.transiting=!1,t.color=t.generateColor(),t.levelColor=t.generateLevelColor(),t.dataTimeFormat=n.data_xLocaltime?e.time.format:e.time.format.utc,t.axisTimeFormat=n.axis_x_localtime?e.time.format:e.time.format.utc,t.defaultAxisTimeFormat=t.axisTimeFormat.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%-m/%-d",function(t){return t.getDay()&&1!==t.getDate()}],["%-m/%-d",function(t){return 1!==t.getDate()}],["%-m/%-d",function(t){return t.getMonth()}],["%Y/%-m/%-d",function(){return!0}]]),t.hiddenTargetIds=[],t.hiddenLegendIds=[],t.focusedTargetIds=[],t.defocusedTargetIds=[],t.xOrient=n.axis_rotated?"left":"bottom",t.yOrient=n.axis_rotated?n.axis_y_inner?"top":"bottom":n.axis_y_inner?"right":"left",t.y2Orient=n.axis_rotated?n.axis_y2_inner?"bottom":"top":n.axis_y2_inner?"left":"right",t.subXOrient=n.axis_rotated?"left":"bottom",t.isLegendRight="right"===n.legend_position,t.isLegendInset="inset"===n.legend_position,t.isLegendTop="top-left"===n.legend_inset_anchor||"top-right"===n.legend_inset_anchor,t.isLegendLeft="top-left"===n.legend_inset_anchor||"bottom-left"===n.legend_inset_anchor,t.legendStep=0,t.legendItemWidth=0,t.legendItemHeight=0,t.currentMaxTickWidths={x:0,y:0,y2:0},t.rotated_padding_left=30,t.rotated_padding_right=n.axis_rotated&&!n.axis_x_show?0:30,t.rotated_padding_top=5,t.withoutFadeIn={},t.intervalForObserveInserted=void 0,t.axes.subx=e.selectAll([])},u.initChartElements=function(){this.initBar&&this.initBar(),this.initLine&&this.initLine(),this.initArc&&this.initArc(),this.initGauge&&this.initGauge(),this.initText&&this.initText()},u.initWithData=function(t){var e,n,i=this,r=i.d3,o=i.config,s=!0;i.axis=new a(i),i.initPie&&i.initPie(),i.initBrush&&i.initBrush(),i.initZoom&&i.initZoom(),o.bindto?"function"==typeof o.bindto.node?i.selectChart=o.bindto:i.selectChart=r.select(o.bindto):i.selectChart=r.selectAll([]),i.selectChart.empty()&&(i.selectChart=r.select(document.createElement("div")).style("opacity",0),i.observeInserted(i.selectChart),s=!1),i.selectChart.html("").classed("c3",!0),i.data.xs={},i.data.targets=i.convertDataToTargets(t),o.data_filter&&(i.data.targets=i.data.targets.filter(o.data_filter)),o.data_hide&&i.addHiddenTargetIds(o.data_hide===!0?i.mapToIds(i.data.targets):o.data_hide),o.legend_hide&&i.addHiddenLegendIds(o.legend_hide===!0?i.mapToIds(i.data.targets):o.legend_hide),i.hasType("gauge")&&(o.legend_show=!1),i.updateSizes(),i.updateScales(),i.x.domain(r.extent(i.getXDomain(i.data.targets))),i.y.domain(i.getYDomain(i.data.targets,"y")),i.y2.domain(i.getYDomain(i.data.targets,"y2")),i.subX.domain(i.x.domain()),i.subY.domain(i.y.domain()),i.subY2.domain(i.y2.domain()),i.orgXDomain=i.x.domain(),i.brush&&i.brush.scale(i.subX),o.zoom_enabled&&i.zoom.scale(i.x),i.svg=i.selectChart.append("svg").style("overflow","hidden").on("mouseenter",function(){return o.onmouseover.call(i)}).on("mouseleave",function(){return o.onmouseout.call(i)}),i.config.svg_classname&&i.svg.attr("class",i.config.svg_classname),e=i.svg.append("defs"),i.clipChart=i.appendClip(e,i.clipId),i.clipXAxis=i.appendClip(e,i.clipIdForXAxis),i.clipYAxis=i.appendClip(e,i.clipIdForYAxis),i.clipGrid=i.appendClip(e,i.clipIdForGrid),i.clipSubchart=i.appendClip(e,i.clipIdForSubchart),i.updateSvgSize(),n=i.main=i.svg.append("g").attr("transform",i.getTranslate("main")),i.initSubchart&&i.initSubchart(),i.initTooltip&&i.initTooltip(),i.initLegend&&i.initLegend(),i.initTitle&&i.initTitle(),n.append("text").attr("class",h.text+" "+h.empty).attr("text-anchor","middle").attr("dominant-baseline","middle"),i.initRegion(),i.initGrid(),n.append("g").attr("clip-path",i.clipPath).attr("class",h.chart),o.grid_lines_front&&i.initGridLines(),i.initEventRect(),i.initChartElements(),n.insert("rect",o.zoom_privileged?null:"g."+h.regions).attr("class",h.zoomRect).attr("width",i.width).attr("height",i.height).style("opacity",0).on("dblclick.zoom",null),o.axis_x_extent&&i.brush.extent(i.getDefaultExtent()),i.axis.init(),i.updateTargets(i.data.targets),s&&(i.updateDimension(),i.config.oninit.call(i),i.redraw({withTransition:!1,withTransform:!0,withUpdateXDomain:!0,withUpdateOrgXDomain:!0,withTransitionForAxis:!1})),i.bindResize(),i.api.element=i.selectChart.node()},u.smoothLines=function(t,e){var n=this;"grid"===e&&t.each(function(){var t=n.d3.select(this),e=t.attr("x1"),i=t.attr("x2"),r=t.attr("y1"),a=t.attr("y2");t.attr({x1:Math.ceil(e),x2:Math.ceil(i),y1:Math.ceil(r),y2:Math.ceil(a)})})},u.updateSizes=function(){var t=this,e=t.config,n=t.legend?t.getLegendHeight():0,i=t.legend?t.getLegendWidth():0,r=t.isLegendRight||t.isLegendInset?0:n,a=t.hasArcType(),o=e.axis_rotated||a?0:t.getHorizontalAxisHeight("x"),s=e.subchart_show&&!a?e.subchart_size_height+o:0;t.currentWidth=t.getCurrentWidth(),t.currentHeight=t.getCurrentHeight(),t.margin=e.axis_rotated?{top:t.getHorizontalAxisHeight("y2")+t.getCurrentPaddingTop(),right:a?0:t.getCurrentPaddingRight(),bottom:t.getHorizontalAxisHeight("y")+r+t.getCurrentPaddingBottom(),left:s+(a?0:t.getCurrentPaddingLeft())}:{top:4+t.getCurrentPaddingTop(),right:a?0:t.getCurrentPaddingRight(),bottom:o+s+r+t.getCurrentPaddingBottom(),left:a?0:t.getCurrentPaddingLeft()},t.margin2=e.axis_rotated?{top:t.margin.top,right:NaN,bottom:20+r,left:t.rotated_padding_left}:{top:t.currentHeight-s-r,right:NaN,bottom:o+r,left:t.margin.left},t.margin3={top:0,right:NaN,bottom:0,left:0},t.updateSizeForLegend&&t.updateSizeForLegend(n,i),t.width=t.currentWidth-t.margin.left-t.margin.right,t.height=t.currentHeight-t.margin.top-t.margin.bottom,t.width<0&&(t.width=0),t.height<0&&(t.height=0),t.width2=e.axis_rotated?t.margin.left-t.rotated_padding_left-t.rotated_padding_right:t.width,t.height2=e.axis_rotated?t.height:t.currentHeight-t.margin2.top-t.margin2.bottom,t.width2<0&&(t.width2=0),t.height2<0&&(t.height2=0),t.arcWidth=t.width-(t.isLegendRight?i+10:0),t.arcHeight=t.height-(t.isLegendRight?0:10),t.hasType("gauge")&&!e.gauge_fullCircle&&(t.arcHeight+=t.height-t.getGaugeLabelHeight()),t.updateRadius&&t.updateRadius(),t.isLegendRight&&a&&(t.margin3.left=t.arcWidth/2+1.1*t.radiusExpanded)},u.updateTargets=function(t){var e=this;e.updateTargetsForText(t),e.updateTargetsForBar(t),e.updateTargetsForLine(t),e.hasArcType()&&e.updateTargetsForArc&&e.updateTargetsForArc(t),e.updateTargetsForSubchart&&e.updateTargetsForSubchart(t),e.showTargets()},u.showTargets=function(){var t=this;t.svg.selectAll("."+h.target).filter(function(e){return t.isTargetToShow(e.id)}).transition().duration(t.config.transition_duration).style("opacity",1)},u.redraw=function(t,e){var n,i,r,a,o,s,u,c,l,d,f,p,g,v,m,y,x,_,b,T,w,A,C,E,P,L,M,k,I,V=this,D=V.main,R=V.d3,N=V.config,O=V.getShapeIndices(V.isAreaType),G=V.getShapeIndices(V.isBarType),F=V.getShapeIndices(V.isLineType),j=V.hasArcType(),H=V.filterTargetsToShow(V.data.targets),z=V.xv.bind(V);if(t=t||{},n=S(t,"withY",!0),i=S(t,"withSubchart",!0),r=S(t,"withTransition",!0),s=S(t,"withTransform",!1),u=S(t,"withUpdateXDomain",!1),c=S(t,"withUpdateOrgXDomain",!1),l=S(t,"withTrimXDomain",!0),g=S(t,"withUpdateXAxis",u),d=S(t,"withLegend",!1),f=S(t,"withEventRect",!0),p=S(t,"withDimension",!0),a=S(t,"withTransitionForExit",r),o=S(t,"withTransitionForAxis",r),b=r?N.transition_duration:0,T=a?b:0,w=o?b:0,e=e||V.axis.generateTransitions(w),d&&N.legend_show?V.updateLegend(V.mapToIds(V.data.targets),t,e):p&&V.updateDimension(!0),V.isCategorized()&&0===H.length&&V.x.domain([0,V.axes.x.selectAll(".tick").size()]),H.length?(V.updateXDomain(H,u,c,l),N.axis_x_tick_values||(E=V.axis.updateXAxisTickValues(H))):(V.xAxis.tickValues([]),V.subXAxis.tickValues([])),N.zoom_rescale&&!t.flow&&(M=V.x.orgDomain()),V.y.domain(V.getYDomain(H,"y",M)),V.y2.domain(V.getYDomain(H,"y2",M)),!N.axis_y_tick_values&&N.axis_y_tick_count&&V.yAxis.tickValues(V.axis.generateTickValues(V.y.domain(),N.axis_y_tick_count)),!N.axis_y2_tick_values&&N.axis_y2_tick_count&&V.y2Axis.tickValues(V.axis.generateTickValues(V.y2.domain(),N.axis_y2_tick_count)),V.axis.redraw(e,j),V.axis.updateLabels(r),(u||g)&&H.length)if(N.axis_x_tick_culling&&E){for(P=1;P<E.length;P++)if(E.length/P<N.axis_x_tick_culling_max){L=P;break}V.svg.selectAll("."+h.axisX+" .tick text").each(function(t){var e=E.indexOf(t);e>=0&&R.select(this).style("display",e%L?"none":"block")})}else V.svg.selectAll("."+h.axisX+" .tick text").style("display","block");v=V.generateDrawArea?V.generateDrawArea(O,!1):void 0,m=V.generateDrawBar?V.generateDrawBar(G):void 0,y=V.generateDrawLine?V.generateDrawLine(F,!1):void 0,x=V.generateXYForText(O,G,F,!0),_=V.generateXYForText(O,G,F,!1),n&&(V.subY.domain(V.getYDomain(H,"y")),V.subY2.domain(V.getYDomain(H,"y2"))),V.updateXgridFocus(),D.select("text."+h.text+"."+h.empty).attr("x",V.width/2).attr("y",V.height/2).text(N.data_empty_label_text).transition().style("opacity",H.length?0:1),V.updateGrid(b),V.updateRegion(b),V.updateBar(T),V.updateLine(T),V.updateArea(T),V.updateCircle(),V.hasDataLabel()&&V.updateText(T),V.redrawTitle&&V.redrawTitle(),V.redrawArc&&V.redrawArc(b,T,s),V.redrawSubchart&&V.redrawSubchart(i,e,b,T,O,G,F),D.selectAll("."+h.selectedCircles).filter(V.isBarType.bind(V)).selectAll("circle").remove(),N.interaction_enabled&&!t.flow&&f&&(V.redrawEventRect(),V.updateZoom&&V.updateZoom()),V.updateCircleY(),k=(V.config.axis_rotated?V.circleY:V.circleX).bind(V),I=(V.config.axis_rotated?V.circleX:V.circleY).bind(V),t.flow&&(C=V.generateFlow({targets:H,flow:t.flow,duration:t.flow.duration,drawBar:m,drawLine:y,drawArea:v,cx:k,cy:I,xv:z,xForText:x,yForText:_})),(b||C)&&V.isTabVisible()?R.transition().duration(b).each(function(){var e=[];[V.redrawBar(m,!0),V.redrawLine(y,!0),V.redrawArea(v,!0),V.redrawCircle(k,I,!0),V.redrawText(x,_,t.flow,!0),V.redrawRegion(!0),V.redrawGrid(!0)].forEach(function(t){t.forEach(function(t){e.push(t)})}),A=V.generateWait(),e.forEach(function(t){A.add(t)})}).call(A,function(){C&&C(),N.onrendered&&N.onrendered.call(V)}):(V.redrawBar(m),V.redrawLine(y),V.redrawArea(v),V.redrawCircle(k,I),V.redrawText(x,_,t.flow),V.redrawRegion(),V.redrawGrid(),N.onrendered&&N.onrendered.call(V)),V.mapToIds(V.data.targets).forEach(function(t){V.withoutFadeIn[t]=!0})},u.updateAndRedraw=function(t){var e,n=this,i=n.config;t=t||{},t.withTransition=S(t,"withTransition",!0),t.withTransform=S(t,"withTransform",!1),t.withLegend=S(t,"withLegend",!1),t.withUpdateXDomain=!0,t.withUpdateOrgXDomain=!0,t.withTransitionForExit=!1,t.withTransitionForTransform=S(t,"withTransitionForTransform",t.withTransition),n.updateSizes(),t.withLegend&&i.legend_show||(e=n.axis.generateTransitions(t.withTransitionForAxis?i.transition_duration:0),n.updateScales(),n.updateSvgSize(),n.transformAll(t.withTransitionForTransform,e)),n.redraw(t,e)},u.redrawWithoutRescale=function(){this.redraw({withY:!1,withSubchart:!1,withEventRect:!1,withTransitionForAxis:!1})},u.isTimeSeries=function(){return"timeseries"===this.config.axis_x_type},u.isCategorized=function(){return this.config.axis_x_type.indexOf("categor")>=0},u.isCustomX=function(){var t=this,e=t.config;return!t.isTimeSeries()&&(e.data_x||b(e.data_xs))},u.isTimeSeriesY=function(){return"timeseries"===this.config.axis_y_type},u.getTranslate=function(t){var e,n,i=this,r=i.config;return"main"===t?(e=y(i.margin.left),n=y(i.margin.top)):"context"===t?(e=y(i.margin2.left),n=y(i.margin2.top)):"legend"===t?(e=i.margin3.left,n=i.margin3.top):"x"===t?(e=0,n=r.axis_rotated?0:i.height):"y"===t?(e=0,n=r.axis_rotated?i.height:0):"y2"===t?(e=r.axis_rotated?0:i.width,n=r.axis_rotated?1:0):"subx"===t?(e=0,n=r.axis_rotated?0:i.height2):"arc"===t&&(e=i.arcWidth/2,n=i.arcHeight/2),"translate("+e+","+n+")"},u.initialOpacity=function(t){return null!==t.value&&this.withoutFadeIn[t.id]?1:0},u.initialOpacityForCircle=function(t){return null!==t.value&&this.withoutFadeIn[t.id]?this.opacityForCircle(t):0},u.opacityForCircle=function(t){var e=this.config.point_show?1:0;return d(t.value)?this.isScatterType(t)?.5:e:0},u.opacityForText=function(){return this.hasDataLabel()?1:0},u.xx=function(t){return t?this.x(t.x):null},u.xv=function(t){var e=this,n=t.value;return e.isTimeSeries()?n=e.parseDate(t.value):e.isCategorized()&&"string"==typeof t.value&&(n=e.config.axis_x_categories.indexOf(t.value)),Math.ceil(e.x(n))},u.yv=function(t){var e=this,n=t.axis&&"y2"===t.axis?e.y2:e.y;return Math.ceil(n(t.value))},u.subxx=function(t){return t?this.subX(t.x):null},u.transformMain=function(t,e){var n,i,r,a=this;e&&e.axisX?n=e.axisX:(n=a.main.select("."+h.axisX),t&&(n=n.transition())),e&&e.axisY?i=e.axisY:(i=a.main.select("."+h.axisY),t&&(i=i.transition())),e&&e.axisY2?r=e.axisY2:(r=a.main.select("."+h.axisY2),t&&(r=r.transition())),(t?a.main.transition():a.main).attr("transform",a.getTranslate("main")),n.attr("transform",a.getTranslate("x")),i.attr("transform",a.getTranslate("y")),r.attr("transform",a.getTranslate("y2")),a.main.select("."+h.chartArcs).attr("transform",a.getTranslate("arc"))},u.transformAll=function(t,e){var n=this;n.transformMain(t,e),n.config.subchart_show&&n.transformContext(t,e),n.legend&&n.transformLegend(t)},u.updateSvgSize=function(){var t=this,e=t.svg.select(".c3-brush .background");t.svg.attr("width",t.currentWidth).attr("height",t.currentHeight),t.svg.selectAll(["#"+t.clipId,"#"+t.clipIdForGrid]).select("rect").attr("width",t.width).attr("height",t.height),t.svg.select("#"+t.clipIdForXAxis).select("rect").attr("x",t.getXAxisClipX.bind(t)).attr("y",t.getXAxisClipY.bind(t)).attr("width",t.getXAxisClipWidth.bind(t)).attr("height",t.getXAxisClipHeight.bind(t)),t.svg.select("#"+t.clipIdForYAxis).select("rect").attr("x",t.getYAxisClipX.bind(t)).attr("y",t.getYAxisClipY.bind(t)).attr("width",t.getYAxisClipWidth.bind(t)).attr("height",t.getYAxisClipHeight.bind(t)),t.svg.select("#"+t.clipIdForSubchart).select("rect").attr("width",t.width).attr("height",e.size()?e.attr("height"):0),
t.svg.select("."+h.zoomRect).attr("width",t.width).attr("height",t.height),t.selectChart.style("max-height",t.currentHeight+"px")},u.updateDimension=function(t){var e=this;t||(e.config.axis_rotated?(e.axes.x.call(e.xAxis),e.axes.subx.call(e.subXAxis)):(e.axes.y.call(e.yAxis),e.axes.y2.call(e.y2Axis))),e.updateSizes(),e.updateScales(),e.updateSvgSize(),e.transformAll(!1)},u.observeInserted=function(e){var n,i=this;return"undefined"==typeof MutationObserver?void t.console.error("MutationObserver not defined."):(n=new MutationObserver(function(r){r.forEach(function(r){"childList"===r.type&&r.previousSibling&&(n.disconnect(),i.intervalForObserveInserted=t.setInterval(function(){e.node().parentNode&&(t.clearInterval(i.intervalForObserveInserted),i.updateDimension(),i.brush&&i.brush.update(),i.config.oninit.call(i),i.redraw({withTransform:!0,withUpdateXDomain:!0,withUpdateOrgXDomain:!0,withTransition:!1,withTransitionForTransform:!1,withLegend:!0}),e.transition().style("opacity",1))},10))})}),void n.observe(e.node(),{attributes:!0,childList:!0,characterData:!0}))},u.bindResize=function(){var e=this,n=e.config;if(e.resizeFunction=e.generateResize(),e.resizeFunction.add(function(){n.onresize.call(e)}),n.resize_auto&&e.resizeFunction.add(function(){void 0!==e.resizeTimeout&&t.clearTimeout(e.resizeTimeout),e.resizeTimeout=t.setTimeout(function(){delete e.resizeTimeout,e.api.flush()},100)}),e.resizeFunction.add(function(){n.onresized.call(e)}),t.attachEvent)t.attachEvent("onresize",e.resizeFunction);else if(t.addEventListener)t.addEventListener("resize",e.resizeFunction,!1);else{var i=t.onresize;i?i.add&&i.remove||(i=e.generateResize(),i.add(t.onresize)):i=e.generateResize(),i.add(e.resizeFunction),t.onresize=i}},u.generateResize=function(){function t(){e.forEach(function(t){t()})}var e=[];return t.add=function(t){e.push(t)},t.remove=function(t){for(var n=0;n<e.length;n++)if(e[n]===t){e.splice(n,1);break}},t},u.endall=function(t,e){var n=0;t.each(function(){++n}).each("end",function(){--n||e.apply(this,arguments)})},u.generateWait=function(){var t=[],e=function(e,n){var i=setInterval(function(){var e=0;t.forEach(function(t){if(t.empty())return void(e+=1);try{t.transition()}catch(t){e+=1}}),e===t.length&&(clearInterval(i),n&&n())},10)};return e.add=function(e){t.push(e)},e},u.parseDate=function(e){var n,i=this;return e instanceof Date?n=e:"string"==typeof e?n=i.dataTimeFormat(i.config.data_xFormat).parse(e):"number"!=typeof e||isNaN(e)||(n=new Date((+e))),n&&!isNaN(+n)||t.console.error("Failed to parse x '"+e+"' to Date object"),n},u.isTabVisible=function(){var t;return"undefined"!=typeof document.hidden?t="hidden":"undefined"!=typeof document.mozHidden?t="mozHidden":"undefined"!=typeof document.msHidden?t="msHidden":"undefined"!=typeof document.webkitHidden&&(t="webkitHidden"),!document[t]},u.getDefaultConfig=function(){var t={bindto:"#chart",svg_classname:void 0,size_width:void 0,size_height:void 0,padding_left:void 0,padding_right:void 0,padding_top:void 0,padding_bottom:void 0,resize_auto:!0,zoom_enabled:!1,zoom_extent:void 0,zoom_privileged:!1,zoom_rescale:!1,zoom_onzoom:function(){},zoom_onzoomstart:function(){},zoom_onzoomend:function(){},zoom_x_min:void 0,zoom_x_max:void 0,interaction_brighten:!0,interaction_enabled:!0,onmouseover:function(){},onmouseout:function(){},onresize:function(){},onresized:function(){},oninit:function(){},onrendered:function(){},transition_duration:350,data_x:void 0,data_xs:{},data_xFormat:"%Y-%m-%d",data_xLocaltime:!0,data_xSort:!0,data_idConverter:function(t){return t},data_names:{},data_classes:{},data_groups:[],data_axes:{},data_type:void 0,data_types:{},data_labels:{},data_order:"desc",data_regions:{},data_color:void 0,data_colors:{},data_hide:!1,data_filter:void 0,data_selection_enabled:!1,data_selection_grouped:!1,data_selection_isselectable:function(){return!0},data_selection_multiple:!0,data_selection_draggable:!1,data_onclick:function(){},data_onmouseover:function(){},data_onmouseout:function(){},data_onselected:function(){},data_onunselected:function(){},data_url:void 0,data_headers:void 0,data_json:void 0,data_rows:void 0,data_columns:void 0,data_mimeType:void 0,data_keys:void 0,data_empty_label_text:"",subchart_show:!1,subchart_size_height:60,subchart_axis_x_show:!0,subchart_onbrush:function(){},color_pattern:[],color_threshold:{},legend_show:!0,legend_hide:!1,legend_position:"bottom",legend_inset_anchor:"top-left",legend_inset_x:10,legend_inset_y:0,legend_inset_step:void 0,legend_item_onclick:void 0,legend_item_onmouseover:void 0,legend_item_onmouseout:void 0,legend_equally:!1,legend_padding:0,legend_item_tile_width:10,legend_item_tile_height:10,axis_rotated:!1,axis_x_show:!0,axis_x_type:"indexed",axis_x_localtime:!0,axis_x_categories:[],axis_x_tick_centered:!1,axis_x_tick_format:void 0,axis_x_tick_culling:{},axis_x_tick_culling_max:10,axis_x_tick_count:void 0,axis_x_tick_fit:!0,axis_x_tick_values:null,axis_x_tick_rotate:0,axis_x_tick_outer:!0,axis_x_tick_multiline:!0,axis_x_tick_width:null,axis_x_max:void 0,axis_x_min:void 0,axis_x_padding:{},axis_x_height:void 0,axis_x_extent:void 0,axis_x_label:{},axis_y_show:!0,axis_y_type:void 0,axis_y_max:void 0,axis_y_min:void 0,axis_y_inverted:!1,axis_y_center:void 0,axis_y_inner:void 0,axis_y_label:{},axis_y_tick_format:void 0,axis_y_tick_outer:!0,axis_y_tick_values:null,axis_y_tick_rotate:0,axis_y_tick_count:void 0,axis_y_tick_time_value:void 0,axis_y_tick_time_interval:void 0,axis_y_padding:{},axis_y_default:void 0,axis_y2_show:!1,axis_y2_max:void 0,axis_y2_min:void 0,axis_y2_inverted:!1,axis_y2_center:void 0,axis_y2_inner:void 0,axis_y2_label:{},axis_y2_tick_format:void 0,axis_y2_tick_outer:!0,axis_y2_tick_values:null,axis_y2_tick_count:void 0,axis_y2_padding:{},axis_y2_default:void 0,grid_x_show:!1,grid_x_type:"tick",grid_x_lines:[],grid_y_show:!1,grid_y_lines:[],grid_y_ticks:10,grid_focus_show:!0,grid_lines_front:!0,point_show:!0,point_r:2.5,point_sensitivity:10,point_focus_expand_enabled:!0,point_focus_expand_r:void 0,point_select_r:void 0,line_connectNull:!1,line_step_type:"step",bar_width:void 0,bar_width_ratio:.6,bar_width_max:void 0,bar_zerobased:!0,area_zerobased:!0,area_above:!1,pie_label_show:!0,pie_label_format:void 0,pie_label_threshold:.05,pie_label_ratio:void 0,pie_expand:{},pie_expand_duration:50,gauge_fullCircle:!1,gauge_label_show:!0,gauge_label_format:void 0,gauge_min:0,gauge_max:100,gauge_startingAngle:-1*Math.PI/2,gauge_units:void 0,gauge_width:void 0,gauge_expand:{},gauge_expand_duration:50,donut_label_show:!0,donut_label_format:void 0,donut_label_threshold:.05,donut_label_ratio:void 0,donut_width:void 0,donut_title:"",donut_expand:{},donut_expand_duration:50,spline_interpolation_type:"cardinal",regions:[],tooltip_show:!0,tooltip_grouped:!0,tooltip_format_title:void 0,tooltip_format_name:void 0,tooltip_format_value:void 0,tooltip_position:void 0,tooltip_contents:function(t,e,n,i){return this.getTooltipContent?this.getTooltipContent(t,e,n,i):""},tooltip_init_show:!1,tooltip_init_x:0,tooltip_init_position:{top:"0px",left:"50px"},tooltip_onshow:function(){},tooltip_onhide:function(){},title_text:void 0,title_padding:{top:0,right:0,bottom:0,left:0},title_position:"top-center"};return Object.keys(this.additionalConfig).forEach(function(e){t[e]=this.additionalConfig[e]},this),t},u.additionalConfig={},u.loadConfig=function(t){function e(){var t=i.shift();return t&&n&&"object"==typeof n&&t in n?(n=n[t],e()):t?void 0:n}var n,i,r,a=this.config;Object.keys(a).forEach(function(o){n=t,i=o.split("_"),r=e(),v(r)&&(a[o]=r)})},u.getScale=function(t,e,n){return(n?this.d3.time.scale():this.d3.scale.linear()).range([t,e])},u.getX=function(t,e,n,i){var r,a=this,o=a.getScale(t,e,a.isTimeSeries()),s=n?o.domain(n):o;a.isCategorized()?(i=i||function(){return 0},o=function(t,e){var n=s(t)+i(t);return e?n:Math.ceil(n)}):o=function(t,e){var n=s(t);return e?n:Math.ceil(n)};for(r in s)o[r]=s[r];return o.orgDomain=function(){return s.domain()},a.isCategorized()&&(o.domain=function(t){return arguments.length?(s.domain(t),o):(t=this.orgDomain(),[t[0],t[1]+1])}),o},u.getY=function(t,e,n){var i=this.getScale(t,e,this.isTimeSeriesY());return n&&i.domain(n),i},u.getYScale=function(t){return"y2"===this.axis.getId(t)?this.y2:this.y},u.getSubYScale=function(t){return"y2"===this.axis.getId(t)?this.subY2:this.subY},u.updateScales=function(){var t=this,e=t.config,n=!t.x;t.xMin=e.axis_rotated?1:0,t.xMax=e.axis_rotated?t.height:t.width,t.yMin=e.axis_rotated?0:t.height,t.yMax=e.axis_rotated?t.width:1,t.subXMin=t.xMin,t.subXMax=t.xMax,t.subYMin=e.axis_rotated?0:t.height2,t.subYMax=e.axis_rotated?t.width2:1,t.x=t.getX(t.xMin,t.xMax,n?void 0:t.x.orgDomain(),function(){return t.xAxis.tickOffset()}),t.y=t.getY(t.yMin,t.yMax,n?e.axis_y_default:t.y.domain()),t.y2=t.getY(t.yMin,t.yMax,n?e.axis_y2_default:t.y2.domain()),t.subX=t.getX(t.xMin,t.xMax,t.orgXDomain,function(e){return e%1?0:t.subXAxis.tickOffset()}),t.subY=t.getY(t.subYMin,t.subYMax,n?e.axis_y_default:t.subY.domain()),t.subY2=t.getY(t.subYMin,t.subYMax,n?e.axis_y2_default:t.subY2.domain()),t.xAxisTickFormat=t.axis.getXAxisTickFormat(),t.xAxisTickValues=t.axis.getXAxisTickValues(),t.yAxisTickValues=t.axis.getYAxisTickValues(),t.y2AxisTickValues=t.axis.getY2AxisTickValues(),t.xAxis=t.axis.getXAxis(t.x,t.xOrient,t.xAxisTickFormat,t.xAxisTickValues,e.axis_x_tick_outer),t.subXAxis=t.axis.getXAxis(t.subX,t.subXOrient,t.xAxisTickFormat,t.xAxisTickValues,e.axis_x_tick_outer),t.yAxis=t.axis.getYAxis(t.y,t.yOrient,e.axis_y_tick_format,t.yAxisTickValues,e.axis_y_tick_outer),t.y2Axis=t.axis.getYAxis(t.y2,t.y2Orient,e.axis_y2_tick_format,t.y2AxisTickValues,e.axis_y2_tick_outer),n||(t.brush&&t.brush.scale(t.subX),e.zoom_enabled&&t.zoom.scale(t.x)),t.updateArc&&t.updateArc()},u.getYDomainMin=function(t){var e,n,i,r,a,o,s=this,u=s.config,c=s.mapToIds(t),l=s.getValuesAsIdKeyed(t);if(u.data_groups.length>0)for(o=s.hasNegativeValueInTargets(t),e=0;e<u.data_groups.length;e++)if(r=u.data_groups[e].filter(function(t){return c.indexOf(t)>=0}),0!==r.length)for(i=r[0],o&&l[i]&&l[i].forEach(function(t,e){l[i][e]=t<0?t:0}),n=1;n<r.length;n++)a=r[n],l[a]&&l[a].forEach(function(t,e){s.axis.getId(a)!==s.axis.getId(i)||!l[i]||o&&+t>0||(l[i][e]+=+t)});return s.d3.min(Object.keys(l).map(function(t){return s.d3.min(l[t])}))},u.getYDomainMax=function(t){var e,n,i,r,a,o,s=this,u=s.config,c=s.mapToIds(t),l=s.getValuesAsIdKeyed(t);if(u.data_groups.length>0)for(o=s.hasPositiveValueInTargets(t),e=0;e<u.data_groups.length;e++)if(r=u.data_groups[e].filter(function(t){return c.indexOf(t)>=0}),0!==r.length)for(i=r[0],o&&l[i]&&l[i].forEach(function(t,e){l[i][e]=t>0?t:0}),n=1;n<r.length;n++)a=r[n],l[a]&&l[a].forEach(function(t,e){s.axis.getId(a)!==s.axis.getId(i)||!l[i]||o&&+t<0||(l[i][e]+=+t)});return s.d3.max(Object.keys(l).map(function(t){return s.d3.max(l[t])}))},u.getYDomain=function(t,e,n){var i,r,a,o,s,u,c,l,h,f,p,g=this,v=g.config,m=t.filter(function(t){return g.axis.getId(t.id)===e}),y=n?g.filterByXDomain(m,n):m,_="y2"===e?v.axis_y2_min:v.axis_y_min,S="y2"===e?v.axis_y2_max:v.axis_y_max,T=g.getYDomainMin(y),w=g.getYDomainMax(y),A="y2"===e?v.axis_y2_center:v.axis_y_center,C=g.hasType("bar",y)&&v.bar_zerobased||g.hasType("area",y)&&v.area_zerobased,E="y2"===e?v.axis_y2_inverted:v.axis_y_inverted,P=g.hasDataLabel()&&v.axis_rotated,L=g.hasDataLabel()&&!v.axis_rotated;return T=d(_)?_:d(S)?T<S?T:S-10:T,w=d(S)?S:d(_)?_<w?w:_+10:w,0===y.length?"y2"===e?g.y2.domain():g.y.domain():(isNaN(T)&&(T=0),isNaN(w)&&(w=T),T===w&&(T<0?w=0:T=0),f=T>=0&&w>=0,p=T<=0&&w<=0,(d(_)&&f||d(S)&&p)&&(C=!1),C&&(f&&(T=0),p&&(w=0)),r=Math.abs(w-T),a=o=s=.1*r,"undefined"!=typeof A&&(u=Math.max(Math.abs(T),Math.abs(w)),w=A+u,T=A-u),P?(c=g.getDataLabelLength(T,w,"width"),l=x(g.y.range()),h=[c[0]/l,c[1]/l],o+=r*(h[1]/(1-h[0]-h[1])),s+=r*(h[0]/(1-h[0]-h[1]))):L&&(c=g.getDataLabelLength(T,w,"height"),o+=g.axis.convertPixelsToAxisPadding(c[1],r),s+=g.axis.convertPixelsToAxisPadding(c[0],r)),"y"===e&&b(v.axis_y_padding)&&(o=g.axis.getPadding(v.axis_y_padding,"top",o,r),s=g.axis.getPadding(v.axis_y_padding,"bottom",s,r)),"y2"===e&&b(v.axis_y2_padding)&&(o=g.axis.getPadding(v.axis_y2_padding,"top",o,r),s=g.axis.getPadding(v.axis_y2_padding,"bottom",s,r)),C&&(f&&(s=T),p&&(o=-w)),i=[T-s,w+o],E?i.reverse():i)},u.getXDomainMin=function(t){var e=this,n=e.config;return v(n.axis_x_min)?e.isTimeSeries()?this.parseDate(n.axis_x_min):n.axis_x_min:e.d3.min(t,function(t){return e.d3.min(t.values,function(t){return t.x})})},u.getXDomainMax=function(t){var e=this,n=e.config;return v(n.axis_x_max)?e.isTimeSeries()?this.parseDate(n.axis_x_max):n.axis_x_max:e.d3.max(t,function(t){return e.d3.max(t.values,function(t){return t.x})})},u.getXDomainPadding=function(t){var e,n,i,r,a=this,o=a.config,s=t[1]-t[0];return a.isCategorized()?n=0:a.hasType("bar")?(e=a.getMaxDataCount(),n=e>1?s/(e-1)/2:.5):n=.01*s,"object"==typeof o.axis_x_padding&&b(o.axis_x_padding)?(i=d(o.axis_x_padding.left)?o.axis_x_padding.left:n,r=d(o.axis_x_padding.right)?o.axis_x_padding.right:n):i=r="number"==typeof o.axis_x_padding?o.axis_x_padding:n,{left:i,right:r}},u.getXDomain=function(t){var e=this,n=[e.getXDomainMin(t),e.getXDomainMax(t)],i=n[0],r=n[1],a=e.getXDomainPadding(n),o=0,s=0;return i-r!==0||e.isCategorized()||(e.isTimeSeries()?(i=new Date(.5*i.getTime()),r=new Date(1.5*r.getTime())):(i=0===i?1:.5*i,r=0===r?-1:1.5*r)),(i||0===i)&&(o=e.isTimeSeries()?new Date(i.getTime()-a.left):i-a.left),(r||0===r)&&(s=e.isTimeSeries()?new Date(r.getTime()+a.right):r+a.right),[o,s]},u.updateXDomain=function(t,e,n,i,r){var a=this,o=a.config;return n&&(a.x.domain(r?r:a.d3.extent(a.getXDomain(t))),a.orgXDomain=a.x.domain(),o.zoom_enabled&&a.zoom.scale(a.x).updateScaleExtent(),a.subX.domain(a.x.domain()),a.brush&&a.brush.scale(a.subX)),e&&(a.x.domain(r?r:!a.brush||a.brush.empty()?a.orgXDomain:a.brush.extent()),o.zoom_enabled&&a.zoom.scale(a.x).updateScaleExtent()),i&&a.x.domain(a.trimXDomain(a.x.orgDomain())),a.x.domain()},u.trimXDomain=function(t){var e=this.getZoomDomain(),n=e[0],i=e[1];return t[0]<=n&&(t[1]=+t[1]+(n-t[0]),t[0]=n),i<=t[1]&&(t[0]=+t[0]-(t[1]-i),t[1]=i),t},u.isX=function(t){var e=this,n=e.config;return n.data_x&&t===n.data_x||b(n.data_xs)&&T(n.data_xs,t)},u.isNotX=function(t){return!this.isX(t)},u.getXKey=function(t){var e=this,n=e.config;return n.data_x?n.data_x:b(n.data_xs)?n.data_xs[t]:null},u.getXValuesOfXKey=function(t,e){var n,i=this,r=e&&b(e)?i.mapToIds(e):[];return r.forEach(function(e){i.getXKey(e)===t&&(n=i.data.xs[e])}),n},u.getIndexByX=function(t){var e=this,n=e.filterByX(e.data.targets,t);return n.length?n[0].index:null},u.getXValue=function(t,e){var n=this;return t in n.data.xs&&n.data.xs[t]&&d(n.data.xs[t][e])?n.data.xs[t][e]:e},u.getOtherTargetXs=function(){var t=this,e=Object.keys(t.data.xs);return e.length?t.data.xs[e[0]]:null},u.getOtherTargetX=function(t){var e=this.getOtherTargetXs();return e&&t<e.length?e[t]:null},u.addXs=function(t){var e=this;Object.keys(t).forEach(function(n){e.config.data_xs[n]=t[n]})},u.hasMultipleX=function(t){return this.d3.set(Object.keys(t).map(function(e){return t[e]})).size()>1},u.isMultipleX=function(){return b(this.config.data_xs)||!this.config.data_xSort||this.hasType("scatter")},u.addName=function(t){var e,n=this;return t&&(e=n.config.data_names[t.id],t.name=void 0!==e?e:t.id),t},u.getValueOnIndex=function(t,e){var n=t.filter(function(t){return t.index===e});return n.length?n[0]:null},u.updateTargetX=function(t,e){var n=this;t.forEach(function(t){t.values.forEach(function(i,r){i.x=n.generateTargetX(e[r],t.id,r)}),n.data.xs[t.id]=e})},u.updateTargetXs=function(t,e){var n=this;t.forEach(function(t){e[t.id]&&n.updateTargetX([t],e[t.id])})},u.generateTargetX=function(t,e,n){var i,r=this;return i=r.isTimeSeries()?t?r.parseDate(t):r.parseDate(r.getXValue(e,n)):r.isCustomX()&&!r.isCategorized()?d(t)?+t:r.getXValue(e,n):n},u.cloneTarget=function(t){return{id:t.id,id_org:t.id_org,values:t.values.map(function(t){return{x:t.x,value:t.value,id:t.id}})}},u.updateXs=function(){var t=this;t.data.targets.length&&(t.xs=[],t.data.targets[0].values.forEach(function(e){t.xs[e.index]=e.x}))},u.getPrevX=function(t){var e=this.xs[t-1];return"undefined"!=typeof e?e:null},u.getNextX=function(t){var e=this.xs[t+1];return"undefined"!=typeof e?e:null},u.getMaxDataCount=function(){var t=this;return t.d3.max(t.data.targets,function(t){return t.values.length})},u.getMaxDataCountTarget=function(t){var e,n=t.length,i=0;return n>1?t.forEach(function(t){t.values.length>i&&(e=t,i=t.values.length)}):e=n?t[0]:null,e},u.getEdgeX=function(t){var e=this;return t.length?[e.d3.min(t,function(t){return t.values[0].x}),e.d3.max(t,function(t){return t.values[t.values.length-1].x})]:[0,0]},u.mapToIds=function(t){return t.map(function(t){return t.id})},u.mapToTargetIds=function(t){var e=this;return t?[].concat(t):e.mapToIds(e.data.targets)},u.hasTarget=function(t,e){var n,i=this.mapToIds(t);for(n=0;n<i.length;n++)if(i[n]===e)return!0;return!1},u.isTargetToShow=function(t){return this.hiddenTargetIds.indexOf(t)<0},u.isLegendToShow=function(t){return this.hiddenLegendIds.indexOf(t)<0},u.filterTargetsToShow=function(t){var e=this;return t.filter(function(t){return e.isTargetToShow(t.id)})},u.mapTargetsToUniqueXs=function(t){var e=this,n=e.d3.set(e.d3.merge(t.map(function(t){return t.values.map(function(t){return+t.x})}))).values();return n=e.isTimeSeries()?n.map(function(t){return new Date((+t))}):n.map(function(t){return+t}),n.sort(function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN})},u.addHiddenTargetIds=function(t){this.hiddenTargetIds=this.hiddenTargetIds.concat(t)},u.removeHiddenTargetIds=function(t){this.hiddenTargetIds=this.hiddenTargetIds.filter(function(e){return t.indexOf(e)<0})},u.addHiddenLegendIds=function(t){this.hiddenLegendIds=this.hiddenLegendIds.concat(t)},u.removeHiddenLegendIds=function(t){this.hiddenLegendIds=this.hiddenLegendIds.filter(function(e){return t.indexOf(e)<0})},u.getValuesAsIdKeyed=function(t){var e={};return t.forEach(function(t){e[t.id]=[],t.values.forEach(function(n){e[t.id].push(n.value)})}),e},u.checkValueInTargets=function(t,e){var n,i,r,a=Object.keys(t);for(n=0;n<a.length;n++)for(r=t[a[n]].values,i=0;i<r.length;i++)if(e(r[i].value))return!0;return!1},u.hasNegativeValueInTargets=function(t){return this.checkValueInTargets(t,function(t){return t<0})},u.hasPositiveValueInTargets=function(t){return this.checkValueInTargets(t,function(t){return t>0})},u.isOrderDesc=function(){var t=this.config;return"string"==typeof t.data_order&&"desc"===t.data_order.toLowerCase()},u.isOrderAsc=function(){var t=this.config;return"string"==typeof t.data_order&&"asc"===t.data_order.toLowerCase()},u.orderTargets=function(t){var e=this,n=e.config,i=e.isOrderAsc(),r=e.isOrderDesc();return i||r?t.sort(function(t,e){var n=function(t,e){return t+Math.abs(e.value)},r=t.values.reduce(n,0),a=e.values.reduce(n,0);return i?a-r:r-a}):f(n.data_order)&&t.sort(n.data_order),t},u.filterByX=function(t,e){return this.d3.merge(t.map(function(t){return t.values})).filter(function(t){return t.x-e===0})},u.filterRemoveNull=function(t){return t.filter(function(t){return d(t.value)})},u.filterByXDomain=function(t,e){return t.map(function(t){return{id:t.id,id_org:t.id_org,values:t.values.filter(function(t){return e[0]<=t.x&&t.x<=e[1]})}})},u.hasDataLabel=function(){var t=this.config;return!("boolean"!=typeof t.data_labels||!t.data_labels)||!("object"!=typeof t.data_labels||!b(t.data_labels))},u.getDataLabelLength=function(t,e,n){var i=this,r=[0,0],a=1.3;return i.selectChart.select("svg").selectAll(".dummy").data([t,e]).enter().append("text").text(function(t){return i.dataLabelFormat(t.id)(t)}).each(function(t,e){r[e]=this.getBoundingClientRect()[n]*a}).remove(),r},u.isNoneArc=function(t){return this.hasTarget(this.data.targets,t.id)},u.isArc=function(t){return"data"in t&&this.hasTarget(this.data.targets,t.data.id)},u.findSameXOfValues=function(t,e){var n,i=t[e].x,r=[];for(n=e-1;n>=0&&i===t[n].x;n--)r.push(t[n]);for(n=e;n<t.length&&i===t[n].x;n++)r.push(t[n]);return r},u.findClosestFromTargets=function(t,e){var n,i=this;return n=t.map(function(t){return i.findClosest(t.values,e)}),i.findClosest(n,e)},u.findClosest=function(t,e){var n,i=this,r=i.config.point_sensitivity;return t.filter(function(t){return t&&i.isBarType(t.id)}).forEach(function(t){var e=i.main.select("."+h.bars+i.getTargetSelectorSuffix(t.id)+" ."+h.bar+"-"+t.index).node();!n&&i.isWithinBar(e)&&(n=t)}),t.filter(function(t){return t&&!i.isBarType(t.id)}).forEach(function(t){var a=i.dist(t,e);a<r&&(r=a,n=t)}),n},u.dist=function(t,e){var n=this,i=n.config,r=i.axis_rotated?1:0,a=i.axis_rotated?0:1,o=n.circleY(t,t.index),s=n.x(t.x);return Math.sqrt(Math.pow(s-e[r],2)+Math.pow(o-e[a],2))},u.convertValuesToStep=function(t){var e,n=[].concat(t);if(!this.isCategorized())return t;for(e=t.length+1;0<e;e--)n[e]=n[e-1];return n[0]={x:n[0].x-1,value:n[0].value,id:n[0].id},n[t.length+1]={x:n[t.length].x+1,value:n[t.length].value,id:n[t.length].id},n},u.updateDataAttributes=function(t,e){var n=this,i=n.config,r=i["data_"+t];return"undefined"==typeof e?r:(Object.keys(e).forEach(function(t){r[t]=e[t]}),n.redraw({withLegend:!0}),r)},u.convertUrlToData=function(t,e,n,i,r){var a=this,o=e?e:"csv",s=a.d3.xhr(t);n&&Object.keys(n).forEach(function(t){s.header(t,n[t])}),s.get(function(t,e){var n;if(!e)throw new Error(t.responseURL+" "+t.status+" ("+t.statusText+")");n="json"===o?a.convertJsonToData(JSON.parse(e.response),i):"tsv"===o?a.convertTsvToData(e.response):a.convertCsvToData(e.response),r.call(a,n)})},u.convertXsvToData=function(t,e){var n,i=e.parseRows(t);return 1===i.length?(n=[{}],i[0].forEach(function(t){n[0][t]=null})):n=e.parse(t),n},u.convertCsvToData=function(t){return this.convertXsvToData(t,this.d3.csv)},u.convertTsvToData=function(t){return this.convertXsvToData(t,this.d3.tsv)},u.convertJsonToData=function(t,e){var n,i,r=this,a=[];return e?(e.x?(n=e.value.concat(e.x),r.config.data_x=e.x):n=e.value,a.push(n),t.forEach(function(t){var e=[];n.forEach(function(n){var i=r.findValueInJson(t,n);g(i)&&(i=null),e.push(i)}),a.push(e)}),i=r.convertRowsToData(a)):(Object.keys(t).forEach(function(e){a.push([e].concat(t[e]))}),i=r.convertColumnsToData(a)),i},u.findValueInJson=function(t,e){e=e.replace(/\[(\w+)\]/g,".$1"),e=e.replace(/^\./,"");for(var n=e.split("."),i=0;i<n.length;++i){var r=n[i];if(!(r in t))return;t=t[r]}return t},u.convertRowsToData=function(t){var e,n,i=t[0],r={},a=[];for(e=1;e<t.length;e++){for(r={},n=0;n<t[e].length;n++){if(g(t[e][n]))throw new Error("Source data is missing a component at ("+e+","+n+")!");r[i[n]]=t[e][n]}a.push(r)}return a},u.convertColumnsToData=function(t){var e,n,i,r=[];for(e=0;e<t.length;e++)for(i=t[e][0],n=1;n<t[e].length;n++){if(g(r[n-1])&&(r[n-1]={}),g(t[e][n]))throw new Error("Source data is missing a component at ("+e+","+n+")!");r[n-1][i]=t[e][n]}return r},u.convertDataToTargets=function(t,e){var n,i=this,r=i.config,a=i.d3.keys(t[0]).filter(i.isNotX,i),o=i.d3.keys(t[0]).filter(i.isX,i);return a.forEach(function(n){var a=i.getXKey(n);i.isCustomX()||i.isTimeSeries()?o.indexOf(a)>=0?i.data.xs[n]=(e&&i.data.xs[n]?i.data.xs[n]:[]).concat(t.map(function(t){return t[a]}).filter(d).map(function(t,e){return i.generateTargetX(t,n,e)})):r.data_x?i.data.xs[n]=i.getOtherTargetXs():b(r.data_xs)&&(i.data.xs[n]=i.getXValuesOfXKey(a,i.data.targets)):i.data.xs[n]=t.map(function(t,e){return e})}),a.forEach(function(t){if(!i.data.xs[t])throw new Error('x is not defined for id = "'+t+'".')}),n=a.map(function(e,n){var a=r.data_idConverter(e);return{id:a,id_org:e,values:t.map(function(t,o){var s,u=i.getXKey(e),c=t[u],l=null===t[e]||isNaN(t[e])?null:+t[e];return i.isCustomX()&&i.isCategorized()&&0===n&&!g(c)?(0===n&&0===o&&(r.axis_x_categories=[]),s=r.axis_x_categories.indexOf(c),s===-1&&(s=r.axis_x_categories.length,r.axis_x_categories.push(c))):s=i.generateTargetX(c,e,o),(g(t[e])||i.data.xs[e].length<=o)&&(s=void 0),{x:s,value:l,id:a}}).filter(function(t){return v(t.x)})}}),n.forEach(function(t){var e;r.data_xSort&&(t.values=t.values.sort(function(t,e){var n=t.x||0===t.x?t.x:1/0,i=e.x||0===e.x?e.x:1/0;return n-i})),e=0,t.values.forEach(function(t){t.index=e++}),i.data.xs[t.id].sort(function(t,e){return t-e})}),i.hasNegativeValue=i.hasNegativeValueInTargets(n),i.hasPositiveValue=i.hasPositiveValueInTargets(n),r.data_type&&i.setTargetType(i.mapToIds(n).filter(function(t){return!(t in r.data_types)}),r.data_type),n.forEach(function(t){i.addCache(t.id_org,t)}),n},u.load=function(t,e){var n=this;t&&(e.filter&&(t=t.filter(e.filter)),(e.type||e.types)&&t.forEach(function(t){var i=e.types&&e.types[t.id]?e.types[t.id]:e.type;n.setTargetType(t.id,i)}),n.data.targets.forEach(function(e){for(var n=0;n<t.length;n++)if(e.id===t[n].id){e.values=t[n].values,t.splice(n,1);break}}),n.data.targets=n.data.targets.concat(t)),n.updateTargets(n.data.targets),n.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0}),e.done&&e.done()},u.loadFromArgs=function(t){var e=this;t.data?e.load(e.convertDataToTargets(t.data),t):t.url?e.convertUrlToData(t.url,t.mimeType,t.headers,t.keys,function(n){e.load(e.convertDataToTargets(n),t)}):t.json?e.load(e.convertDataToTargets(e.convertJsonToData(t.json,t.keys)),t):t.rows?e.load(e.convertDataToTargets(e.convertRowsToData(t.rows)),t):t.columns?e.load(e.convertDataToTargets(e.convertColumnsToData(t.columns)),t):e.load(null,t)},u.unload=function(t,e){var n=this;return e||(e=function(){}),t=t.filter(function(t){return n.hasTarget(n.data.targets,t)}),t&&0!==t.length?(n.svg.selectAll(t.map(function(t){return n.selectorTarget(t)})).transition().style("opacity",0).remove().call(n.endall,e),void t.forEach(function(t){n.withoutFadeIn[t]=!1,n.legend&&n.legend.selectAll("."+h.legendItem+n.getTargetSelectorSuffix(t)).remove(),n.data.targets=n.data.targets.filter(function(e){return e.id!==t})})):void e()},u.categoryName=function(t){var e=this.config;return t<e.axis_x_categories.length?e.axis_x_categories[t]:t},u.initEventRect=function(){var t=this;t.main.select("."+h.chart).append("g").attr("class",h.eventRects).style("fill-opacity",0)},u.redrawEventRect=function(){var t,e,n=this,i=n.config,r=n.isMultipleX(),a=n.main.select("."+h.eventRects).style("cursor",i.zoom_enabled?i.axis_rotated?"ns-resize":"ew-resize":null).classed(h.eventRectsMultiple,r).classed(h.eventRectsSingle,!r);a.selectAll("."+h.eventRect).remove(),n.eventRect=a.selectAll("."+h.eventRect),r?(t=n.eventRect.data([0]),n.generateEventRectsForMultipleXs(t.enter()),n.updateEventRect(t)):(e=n.getMaxDataCountTarget(n.data.targets),a.datum(e?e.values:[]),n.eventRect=a.selectAll("."+h.eventRect),t=n.eventRect.data(function(t){return t}),n.generateEventRectsForSingleX(t.enter()),n.updateEventRect(t),t.exit().remove())},u.updateEventRect=function(t){var e,n,i,r,a,o,s=this,u=s.config;t=t||s.eventRect.data(function(t){return t}),s.isMultipleX()?(e=0,n=0,i=s.width,r=s.height):(!s.isCustomX()&&!s.isTimeSeries()||s.isCategorized()?(a=s.getEventRectWidth(),o=function(t){return s.x(t.x)-a/2}):(s.updateXs(),a=function(t){var e=s.getPrevX(t.index),n=s.getNextX(t.index);return null===e&&null===n?u.axis_rotated?s.height:s.width:(null===e&&(e=s.x.domain()[0]),null===n&&(n=s.x.domain()[1]),Math.max(0,(s.x(n)-s.x(e))/2))},o=function(t){var e=s.getPrevX(t.index),n=s.getNextX(t.index),i=s.data.xs[t.id][t.index];return null===e&&null===n?0:(null===e&&(e=s.x.domain()[0]),(s.x(i)+s.x(e))/2)}),e=u.axis_rotated?0:o,n=u.axis_rotated?o:0,i=u.axis_rotated?s.width:a,r=u.axis_rotated?a:s.height),t.attr("class",s.classEvent.bind(s)).attr("x",e).attr("y",n).attr("width",i).attr("height",r)},u.generateEventRectsForSingleX=function(t){var e=this,n=e.d3,i=e.config;t.append("rect").attr("class",e.classEvent.bind(e)).style("cursor",i.data_selection_enabled&&i.data_selection_grouped?"pointer":null).on("mouseover",function(t){var n=t.index;e.dragging||e.flowing||e.hasArcType()||(i.point_focus_expand_enabled&&e.expandCircles(n,null,!0),e.expandBars(n,null,!0),e.main.selectAll("."+h.shape+"-"+n).each(function(t){i.data_onmouseover.call(e.api,t)}))}).on("mouseout",function(t){var n=t.index;e.config&&(e.hasArcType()||(e.hideXGridFocus(),e.hideTooltip(),e.unexpandCircles(),e.unexpandBars(),e.main.selectAll("."+h.shape+"-"+n).each(function(t){i.data_onmouseout.call(e.api,t)})))}).on("mousemove",function(t){var r,a=t.index,o=e.svg.select("."+h.eventRect+"-"+a);e.dragging||e.flowing||e.hasArcType()||(e.isStepType(t)&&"step-after"===e.config.line_step_type&&n.mouse(this)[0]<e.x(e.getXValue(t.id,a))&&(a-=1),r=e.filterTargetsToShow(e.data.targets).map(function(t){return e.addName(e.getValueOnIndex(t.values,a))}),i.tooltip_grouped&&(e.showTooltip(r,this),e.showXGridFocus(r)),(!i.tooltip_grouped||i.data_selection_enabled&&!i.data_selection_grouped)&&e.main.selectAll("."+h.shape+"-"+a).each(function(){n.select(this).classed(h.EXPANDED,!0),i.data_selection_enabled&&o.style("cursor",i.data_selection_grouped?"pointer":null),i.tooltip_grouped||(e.hideXGridFocus(),e.hideTooltip(),i.data_selection_grouped||(e.unexpandCircles(a),e.unexpandBars(a)))}).filter(function(t){return e.isWithinShape(this,t)}).each(function(t){i.data_selection_enabled&&(i.data_selection_grouped||i.data_selection_isselectable(t))&&o.style("cursor","pointer"),i.tooltip_grouped||(e.showTooltip([t],this),e.showXGridFocus([t]),i.point_focus_expand_enabled&&e.expandCircles(a,t.id,!0),e.expandBars(a,t.id,!0))}))}).on("click",function(t){var r=t.index;if(!e.hasArcType()&&e.toggleShape){if(e.cancelClick)return void(e.cancelClick=!1);e.isStepType(t)&&"step-after"===i.line_step_type&&n.mouse(this)[0]<e.x(e.getXValue(t.id,r))&&(r-=1),e.main.selectAll("."+h.shape+"-"+r).each(function(t){(i.data_selection_grouped||e.isWithinShape(this,t))&&(e.toggleShape(this,t,r),e.config.data_onclick.call(e.api,t,this))})}}).call(i.data_selection_draggable&&e.drag?n.behavior.drag().origin(Object).on("drag",function(){e.drag(n.mouse(this))}).on("dragstart",function(){e.dragstart(n.mouse(this))}).on("dragend",function(){e.dragend()}):function(){})},u.generateEventRectsForMultipleXs=function(t){function e(){n.svg.select("."+h.eventRect).style("cursor",null),n.hideXGridFocus(),n.hideTooltip(),n.unexpandCircles(),n.unexpandBars()}var n=this,i=n.d3,r=n.config;t.append("rect").attr("x",0).attr("y",0).attr("width",n.width).attr("height",n.height).attr("class",h.eventRect).on("mouseout",function(){n.config&&(n.hasArcType()||e())}).on("mousemove",function(){var t,a,o,s,u=n.filterTargetsToShow(n.data.targets);if(!n.dragging&&!n.hasArcType(u)){if(t=i.mouse(this),a=n.findClosestFromTargets(u,t),!n.mouseover||a&&a.id===n.mouseover.id||(r.data_onmouseout.call(n.api,n.mouseover),n.mouseover=void 0),!a)return void e();o=n.isScatterType(a)||!r.tooltip_grouped?[a]:n.filterByX(u,a.x),s=o.map(function(t){return n.addName(t)}),n.showTooltip(s,this),r.point_focus_expand_enabled&&n.expandCircles(a.index,a.id,!0),n.expandBars(a.index,a.id,!0),n.showXGridFocus(s),(n.isBarType(a.id)||n.dist(a,t)<r.point_sensitivity)&&(n.svg.select("."+h.eventRect).style("cursor","pointer"),n.mouseover||(r.data_onmouseover.call(n.api,a),n.mouseover=a))}}).on("click",function(){var t,e,a=n.filterTargetsToShow(n.data.targets);n.hasArcType(a)||(t=i.mouse(this),e=n.findClosestFromTargets(a,t),e&&(n.isBarType(e.id)||n.dist(e,t)<r.point_sensitivity)&&n.main.selectAll("."+h.shapes+n.getTargetSelectorSuffix(e.id)).selectAll("."+h.shape+"-"+e.index).each(function(){(r.data_selection_grouped||n.isWithinShape(this,e))&&(n.toggleShape(this,e,e.index),n.config.data_onclick.call(n.api,e,this))}))}).call(r.data_selection_draggable&&n.drag?i.behavior.drag().origin(Object).on("drag",function(){n.drag(i.mouse(this))}).on("dragstart",function(){n.dragstart(i.mouse(this))}).on("dragend",function(){n.dragend()}):function(){})},u.dispatchEvent=function(e,n,i){var r=this,a="."+h.eventRect+(r.isMultipleX()?"":"-"+n),o=r.main.select(a).node(),s=o.getBoundingClientRect(),u=s.left+(i?i[0]:0),c=s.top+(i?i[1]:0),l=document.createEvent("MouseEvents");l.initMouseEvent(e,!0,!0,t,0,u,c,u,c,!1,!1,!1,!1,0,null),
o.dispatchEvent(l)},u.getCurrentWidth=function(){var t=this,e=t.config;return e.size_width?e.size_width:t.getParentWidth()},u.getCurrentHeight=function(){var t=this,e=t.config,n=e.size_height?e.size_height:t.getParentHeight();return n>0?n:320/(t.hasType("gauge")&&!e.gauge_fullCircle?2:1)},u.getCurrentPaddingTop=function(){var t=this,e=t.config,n=d(e.padding_top)?e.padding_top:0;return t.title&&t.title.node()&&(n+=t.getTitlePadding()),n},u.getCurrentPaddingBottom=function(){var t=this.config;return d(t.padding_bottom)?t.padding_bottom:0},u.getCurrentPaddingLeft=function(t){var e=this,n=e.config;return d(n.padding_left)?n.padding_left:n.axis_rotated?n.axis_x_show?Math.max(m(e.getAxisWidthByAxisId("x",t)),40):1:!n.axis_y_show||n.axis_y_inner?e.axis.getYAxisLabelPosition().isOuter?30:1:m(e.getAxisWidthByAxisId("y",t))},u.getCurrentPaddingRight=function(){var t=this,e=t.config,n=10,i=t.isLegendRight?t.getLegendWidth()+20:0;return d(e.padding_right)?e.padding_right+1:e.axis_rotated?n+i:!e.axis_y2_show||e.axis_y2_inner?2+i+(t.axis.getY2AxisLabelPosition().isOuter?20:0):m(t.getAxisWidthByAxisId("y2"))+i},u.getParentRectValue=function(t){for(var e,n=this.selectChart.node();n&&"BODY"!==n.tagName;){try{e=n.getBoundingClientRect()[t]}catch(i){"width"===t&&(e=n.offsetWidth)}if(e)break;n=n.parentNode}return e},u.getParentWidth=function(){return this.getParentRectValue("width")},u.getParentHeight=function(){var t=this.selectChart.style("height");return t.indexOf("px")>0?+t.replace("px",""):0},u.getSvgLeft=function(t){var e=this,n=e.config,i=n.axis_rotated||!n.axis_rotated&&!n.axis_y_inner,r=n.axis_rotated?h.axisX:h.axisY,a=e.main.select("."+r).node(),o=a&&i?a.getBoundingClientRect():{right:0},s=e.selectChart.node().getBoundingClientRect(),u=e.hasArcType(),c=o.right-s.left-(u?0:e.getCurrentPaddingLeft(t));return c>0?c:0},u.getAxisWidthByAxisId=function(t,e){var n=this,i=n.axis.getLabelPositionById(t);return n.axis.getMaxTickWidth(t,e)+(i.isInner?20:40)},u.getHorizontalAxisHeight=function(t){var e=this,n=e.config,i=30;return"x"!==t||n.axis_x_show?"x"===t&&n.axis_x_height?n.axis_x_height:"y"!==t||n.axis_y_show?"y2"!==t||n.axis_y2_show?("x"===t&&!n.axis_rotated&&n.axis_x_tick_rotate&&(i=30+e.axis.getMaxTickWidth(t)*Math.cos(Math.PI*(90-n.axis_x_tick_rotate)/180)),"y"===t&&n.axis_rotated&&n.axis_y_tick_rotate&&(i=30+e.axis.getMaxTickWidth(t)*Math.cos(Math.PI*(90-n.axis_y_tick_rotate)/180)),i+(e.axis.getLabelPositionById(t).isInner?0:10)+("y2"===t?-10:0)):e.rotated_padding_top:!n.legend_show||e.isLegendRight||e.isLegendInset?1:10:8},u.getEventRectWidth=function(){return Math.max(0,this.xAxis.tickInterval())},u.getShapeIndices=function(t){var e,n,i=this,r=i.config,a={},o=0;return i.filterTargetsToShow(i.data.targets.filter(t,i)).forEach(function(t){for(e=0;e<r.data_groups.length;e++)if(!(r.data_groups[e].indexOf(t.id)<0))for(n=0;n<r.data_groups[e].length;n++)if(r.data_groups[e][n]in a){a[t.id]=a[r.data_groups[e][n]];break}g(a[t.id])&&(a[t.id]=o++)}),a.__max__=o-1,a},u.getShapeX=function(t,e,n,i){var r=this,a=i?r.subX:r.x;return function(i){var r=i.id in n?n[i.id]:0;return i.x||0===i.x?a(i.x)-t*(e/2-r):0}},u.getShapeY=function(t){var e=this;return function(n){var i=t?e.getSubYScale(n.id):e.getYScale(n.id);return i(n.value)}},u.getShapeOffset=function(t,e,n){var i=this,r=i.orderTargets(i.filterTargetsToShow(i.data.targets.filter(t,i))),a=r.map(function(t){return t.id});return function(t,o){var s=n?i.getSubYScale(t.id):i.getYScale(t.id),u=s(0),c=u;return r.forEach(function(n){var r=i.isStepType(t)?i.convertValuesToStep(n.values):n.values;n.id!==t.id&&e[n.id]===e[t.id]&&a.indexOf(n.id)<a.indexOf(t.id)&&("undefined"!=typeof r[o]&&+r[o].x===+t.x||(o=-1,r.forEach(function(e,n){e.x===t.x&&(o=n)})),o in r&&r[o].value*t.value>=0&&(c+=s(r[o].value)-u))}),c}},u.isWithinShape=function(t,e){var n,i=this,r=i.d3.select(t);return i.isTargetToShow(e.id)?"circle"===t.nodeName?n=i.isStepType(e)?i.isWithinStep(t,i.getYScale(e.id)(e.value)):i.isWithinCircle(t,1.5*i.pointSelectR(e)):"path"===t.nodeName&&(n=!r.classed(h.bar)||i.isWithinBar(t)):n=!1,n},u.getInterpolate=function(t){var e=this,n=e.isInterpolationType(e.config.spline_interpolation_type)?e.config.spline_interpolation_type:"cardinal";return e.isSplineType(t)?n:e.isStepType(t)?e.config.line_step_type:"linear"},u.initLine=function(){var t=this;t.main.select("."+h.chart).append("g").attr("class",h.chartLines)},u.updateTargetsForLine=function(t){var e,n,i=this,r=i.config,a=i.classChartLine.bind(i),o=i.classLines.bind(i),s=i.classAreas.bind(i),u=i.classCircles.bind(i),c=i.classFocus.bind(i);e=i.main.select("."+h.chartLines).selectAll("."+h.chartLine).data(t).attr("class",function(t){return a(t)+c(t)}),n=e.enter().append("g").attr("class",a).style("opacity",0).style("pointer-events","none"),n.append("g").attr("class",o),n.append("g").attr("class",s),n.append("g").attr("class",function(t){return i.generateClass(h.selectedCircles,t.id)}),n.append("g").attr("class",u).style("cursor",function(t){return r.data_selection_isselectable(t)?"pointer":null}),t.forEach(function(t){i.main.selectAll("."+h.selectedCircles+i.getTargetSelectorSuffix(t.id)).selectAll("."+h.selectedCircle).each(function(e){e.value=t.values[e.index].value})})},u.updateLine=function(t){var e=this;e.mainLine=e.main.selectAll("."+h.lines).selectAll("."+h.line).data(e.lineData.bind(e)),e.mainLine.enter().append("path").attr("class",e.classLine.bind(e)).style("stroke",e.color),e.mainLine.style("opacity",e.initialOpacity.bind(e)).style("shape-rendering",function(t){return e.isStepType(t)?"crispEdges":""}).attr("transform",null),e.mainLine.exit().transition().duration(t).style("opacity",0).remove()},u.redrawLine=function(t,e){return[(e?this.mainLine.transition(Math.random().toString()):this.mainLine).attr("d",t).style("stroke",this.color).style("opacity",1)]},u.generateDrawLine=function(t,e){var n=this,i=n.config,r=n.d3.svg.line(),a=n.generateGetLinePoints(t,e),o=e?n.getSubYScale:n.getYScale,s=function(t){return(e?n.subxx:n.xx).call(n,t)},u=function(t,e){return i.data_groups.length>0?a(t,e)[0][1]:o.call(n,t.id)(t.value)};return r=i.axis_rotated?r.x(u).y(s):r.x(s).y(u),i.line_connectNull||(r=r.defined(function(t){return null!=t.value})),function(t){var a,s=i.line_connectNull?n.filterRemoveNull(t.values):t.values,u=e?n.x:n.subX,c=o.call(n,t.id),l=0,h=0;return n.isLineType(t)?i.data_regions[t.id]?a=n.lineWithRegions(s,u,c,i.data_regions[t.id]):(n.isStepType(t)&&(s=n.convertValuesToStep(s)),a=r.interpolate(n.getInterpolate(t))(s)):(s[0]&&(l=u(s[0].x),h=c(s[0].value)),a=i.axis_rotated?"M "+h+" "+l:"M "+l+" "+h),a?a:"M 0 0"}},u.generateGetLinePoints=function(t,e){var n=this,i=n.config,r=t.__max__+1,a=n.getShapeX(0,r,t,!!e),o=n.getShapeY(!!e),s=n.getShapeOffset(n.isLineType,t,!!e),u=e?n.getSubYScale:n.getYScale;return function(t,e){var r=u.call(n,t.id)(0),c=s(t,e)||r,l=a(t),h=o(t);return i.axis_rotated&&(0<t.value&&h<r||t.value<0&&r<h)&&(h=r),[[l,h-(r-c)],[l,h-(r-c)],[l,h-(r-c)],[l,h-(r-c)]]}},u.lineWithRegions=function(t,e,n,i){function r(t,e){var n;for(n=0;n<e.length;n++)if(e[n].start<t&&t<=e[n].end)return!0;return!1}function a(t){return"M"+t[0][0]+" "+t[0][1]+" "+t[1][0]+" "+t[1][1]}var o,s,u,c,l,h,d,f,p,m,y,x,_=this,b=_.config,S=-1,T="M",w=_.isCategorized()?.5:0,A=[];if(v(i))for(o=0;o<i.length;o++)A[o]={},g(i[o].start)?A[o].start=t[0].x:A[o].start=_.isTimeSeries()?_.parseDate(i[o].start):i[o].start,g(i[o].end)?A[o].end=t[t.length-1].x:A[o].end=_.isTimeSeries()?_.parseDate(i[o].end):i[o].end;for(y=b.axis_rotated?function(t){return n(t.value)}:function(t){return e(t.x)},x=b.axis_rotated?function(t){return e(t.x)}:function(t){return n(t.value)},u=_.isTimeSeries()?function(t,i,r,o){var s,u=t.x.getTime(),c=i.x-t.x,h=new Date(u+c*r),d=new Date(u+c*(r+o));return s=b.axis_rotated?[[n(l(r)),e(h)],[n(l(r+o)),e(d)]]:[[e(h),n(l(r))],[e(d),n(l(r+o))]],a(s)}:function(t,i,r,o){var s;return s=b.axis_rotated?[[n(l(r),!0),e(c(r))],[n(l(r+o),!0),e(c(r+o))]]:[[e(c(r),!0),n(l(r))],[e(c(r+o),!0),n(l(r+o))]],a(s)},o=0;o<t.length;o++){if(g(A)||!r(t[o].x,A))T+=" "+y(t[o])+" "+x(t[o]);else for(c=_.getScale(t[o-1].x+w,t[o].x+w,_.isTimeSeries()),l=_.getScale(t[o-1].value,t[o].value),h=e(t[o].x)-e(t[o-1].x),d=n(t[o].value)-n(t[o-1].value),f=Math.sqrt(Math.pow(h,2)+Math.pow(d,2)),p=2/f,m=2*p,s=p;s<=1;s+=m)T+=u(t[o-1],t[o],s,p);S=t[o].x}return T},u.updateArea=function(t){var e=this,n=e.d3;e.mainArea=e.main.selectAll("."+h.areas).selectAll("."+h.area).data(e.lineData.bind(e)),e.mainArea.enter().append("path").attr("class",e.classArea.bind(e)).style("fill",e.color).style("opacity",function(){return e.orgAreaOpacity=+n.select(this).style("opacity"),0}),e.mainArea.style("opacity",e.orgAreaOpacity),e.mainArea.exit().transition().duration(t).style("opacity",0).remove()},u.redrawArea=function(t,e){return[(e?this.mainArea.transition(Math.random().toString()):this.mainArea).attr("d",t).style("fill",this.color).style("opacity",this.orgAreaOpacity)]},u.generateDrawArea=function(t,e){var n=this,i=n.config,r=n.d3.svg.area(),a=n.generateGetAreaPoints(t,e),o=e?n.getSubYScale:n.getYScale,s=function(t){return(e?n.subxx:n.xx).call(n,t)},u=function(t,e){return i.data_groups.length>0?a(t,e)[0][1]:o.call(n,t.id)(n.getAreaBaseValue(t.id))},c=function(t,e){return i.data_groups.length>0?a(t,e)[1][1]:o.call(n,t.id)(t.value)};return r=i.axis_rotated?r.x0(u).x1(c).y(s):r.x(s).y0(i.area_above?0:u).y1(c),i.line_connectNull||(r=r.defined(function(t){return null!==t.value})),function(t){var e,a=i.line_connectNull?n.filterRemoveNull(t.values):t.values,o=0,s=0;return n.isAreaType(t)?(n.isStepType(t)&&(a=n.convertValuesToStep(a)),e=r.interpolate(n.getInterpolate(t))(a)):(a[0]&&(o=n.x(a[0].x),s=n.getYScale(t.id)(a[0].value)),e=i.axis_rotated?"M "+s+" "+o:"M "+o+" "+s),e?e:"M 0 0"}},u.getAreaBaseValue=function(){return 0},u.generateGetAreaPoints=function(t,e){var n=this,i=n.config,r=t.__max__+1,a=n.getShapeX(0,r,t,!!e),o=n.getShapeY(!!e),s=n.getShapeOffset(n.isAreaType,t,!!e),u=e?n.getSubYScale:n.getYScale;return function(t,e){var r=u.call(n,t.id)(0),c=s(t,e)||r,l=a(t),h=o(t);return i.axis_rotated&&(0<t.value&&h<r||t.value<0&&r<h)&&(h=r),[[l,c],[l,h-(r-c)],[l,h-(r-c)],[l,c]]}},u.updateCircle=function(){var t=this;t.mainCircle=t.main.selectAll("."+h.circles).selectAll("."+h.circle).data(t.lineOrScatterData.bind(t)),t.mainCircle.enter().append("circle").attr("class",t.classCircle.bind(t)).attr("r",t.pointR.bind(t)).style("fill",t.color),t.mainCircle.style("opacity",t.initialOpacityForCircle.bind(t)),t.mainCircle.exit().remove()},u.redrawCircle=function(t,e,n){var i=this.main.selectAll("."+h.selectedCircle);return[(n?this.mainCircle.transition(Math.random().toString()):this.mainCircle).style("opacity",this.opacityForCircle.bind(this)).style("fill",this.color).attr("cx",t).attr("cy",e),(n?i.transition(Math.random().toString()):i).attr("cx",t).attr("cy",e)]},u.circleX=function(t){return t.x||0===t.x?this.x(t.x):null},u.updateCircleY=function(){var t,e,n=this;n.config.data_groups.length>0?(t=n.getShapeIndices(n.isLineType),e=n.generateGetLinePoints(t),n.circleY=function(t,n){return e(t,n)[0][1]}):n.circleY=function(t){return n.getYScale(t.id)(t.value)}},u.getCircles=function(t,e){var n=this;return(e?n.main.selectAll("."+h.circles+n.getTargetSelectorSuffix(e)):n.main).selectAll("."+h.circle+(d(t)?"-"+t:""))},u.expandCircles=function(t,e,n){var i=this,r=i.pointExpandedR.bind(i);n&&i.unexpandCircles(),i.getCircles(t,e).classed(h.EXPANDED,!0).attr("r",r)},u.unexpandCircles=function(t){var e=this,n=e.pointR.bind(e);e.getCircles(t).filter(function(){return e.d3.select(this).classed(h.EXPANDED)}).classed(h.EXPANDED,!1).attr("r",n)},u.pointR=function(t){var e=this,n=e.config;return e.isStepType(t)?0:f(n.point_r)?n.point_r(t):n.point_r},u.pointExpandedR=function(t){var e=this,n=e.config;return n.point_focus_expand_enabled?n.point_focus_expand_r?n.point_focus_expand_r:1.75*e.pointR(t):e.pointR(t)},u.pointSelectR=function(t){var e=this,n=e.config;return f(n.point_select_r)?n.point_select_r(t):n.point_select_r?n.point_select_r:4*e.pointR(t)},u.isWithinCircle=function(t,e){var n=this.d3,i=n.mouse(t),r=n.select(t),a=+r.attr("cx"),o=+r.attr("cy");return Math.sqrt(Math.pow(a-i[0],2)+Math.pow(o-i[1],2))<e},u.isWithinStep=function(t,e){return Math.abs(e-this.d3.mouse(t)[1])<30},u.initBar=function(){var t=this;t.main.select("."+h.chart).append("g").attr("class",h.chartBars)},u.updateTargetsForBar=function(t){var e,n,i=this,r=i.config,a=i.classChartBar.bind(i),o=i.classBars.bind(i),s=i.classFocus.bind(i);e=i.main.select("."+h.chartBars).selectAll("."+h.chartBar).data(t).attr("class",function(t){return a(t)+s(t)}),n=e.enter().append("g").attr("class",a).style("opacity",0).style("pointer-events","none"),n.append("g").attr("class",o).style("cursor",function(t){return r.data_selection_isselectable(t)?"pointer":null})},u.updateBar=function(t){var e=this,n=e.barData.bind(e),i=e.classBar.bind(e),r=e.initialOpacity.bind(e),a=function(t){return e.color(t.id)};e.mainBar=e.main.selectAll("."+h.bars).selectAll("."+h.bar).data(n),e.mainBar.enter().append("path").attr("class",i).style("stroke",a).style("fill",a),e.mainBar.style("opacity",r),e.mainBar.exit().transition().duration(t).style("opacity",0).remove()},u.redrawBar=function(t,e){return[(e?this.mainBar.transition(Math.random().toString()):this.mainBar).attr("d",t).style("fill",this.color).style("opacity",1)]},u.getBarW=function(t,e){var n=this,i=n.config,r="number"==typeof i.bar_width?i.bar_width:e?t.tickInterval()*i.bar_width_ratio/e:0;return i.bar_width_max&&r>i.bar_width_max?i.bar_width_max:r},u.getBars=function(t,e){var n=this;return(e?n.main.selectAll("."+h.bars+n.getTargetSelectorSuffix(e)):n.main).selectAll("."+h.bar+(d(t)?"-"+t:""))},u.expandBars=function(t,e,n){var i=this;n&&i.unexpandBars(),i.getBars(t,e).classed(h.EXPANDED,!0)},u.unexpandBars=function(t){var e=this;e.getBars(t).classed(h.EXPANDED,!1)},u.generateDrawBar=function(t,e){var n=this,i=n.config,r=n.generateGetBarPoints(t,e);return function(t,e){var n=r(t,e),a=i.axis_rotated?1:0,o=i.axis_rotated?0:1,s="M "+n[0][a]+","+n[0][o]+" L"+n[1][a]+","+n[1][o]+" L"+n[2][a]+","+n[2][o]+" L"+n[3][a]+","+n[3][o]+" z";return s}},u.generateGetBarPoints=function(t,e){var n=this,i=e?n.subXAxis:n.xAxis,r=t.__max__+1,a=n.getBarW(i,r),o=n.getShapeX(a,r,t,!!e),s=n.getShapeY(!!e),u=n.getShapeOffset(n.isBarType,t,!!e),c=e?n.getSubYScale:n.getYScale;return function(t,e){var i=c.call(n,t.id)(0),r=u(t,e)||i,l=o(t),h=s(t);return n.config.axis_rotated&&(0<t.value&&h<i||t.value<0&&i<h)&&(h=i),[[l,r],[l,h-(i-r)],[l+a,h-(i-r)],[l+a,r]]}},u.isWithinBar=function(t){var e=this.d3.mouse(t),n=t.getBoundingClientRect(),i=t.pathSegList.getItem(0),r=t.pathSegList.getItem(1),a=Math.min(i.x,r.x),o=Math.min(i.y,r.y),s=n.width,u=n.height,c=2,l=a-c,h=a+s+c,d=o+u+c,f=o-c;return l<e[0]&&e[0]<h&&f<e[1]&&e[1]<d},u.initText=function(){var t=this;t.main.select("."+h.chart).append("g").attr("class",h.chartTexts),t.mainText=t.d3.selectAll([])},u.updateTargetsForText=function(t){var e,n,i=this,r=i.classChartText.bind(i),a=i.classTexts.bind(i),o=i.classFocus.bind(i);e=i.main.select("."+h.chartTexts).selectAll("."+h.chartText).data(t).attr("class",function(t){return r(t)+o(t)}),n=e.enter().append("g").attr("class",r).style("opacity",0).style("pointer-events","none"),n.append("g").attr("class",a)},u.updateText=function(t){var e=this,n=e.config,i=e.barOrLineData.bind(e),r=e.classText.bind(e);e.mainText=e.main.selectAll("."+h.texts).selectAll("."+h.text).data(i),e.mainText.enter().append("text").attr("class",r).attr("text-anchor",function(t){return n.axis_rotated?t.value<0?"end":"start":"middle"}).style("stroke","none").style("fill",function(t){return e.color(t)}).style("fill-opacity",0),e.mainText.text(function(t,n,i){return e.dataLabelFormat(t.id)(t.value,t.id,n,i)}),e.mainText.exit().transition().duration(t).style("fill-opacity",0).remove()},u.redrawText=function(t,e,n,i){return[(i?this.mainText.transition():this.mainText).attr("x",t).attr("y",e).style("fill",this.color).style("fill-opacity",n?0:this.opacityForText.bind(this))]},u.getTextRect=function(t,e,n){var i,r=this.d3.select("body").append("div").classed("c3",!0),a=r.append("svg").style("visibility","hidden").style("position","fixed").style("top",0).style("left",0),o=this.d3.select(n).style("font");return a.selectAll(".dummy").data([t]).enter().append("text").classed(e?e:"",!0).style("font",o).text(t).each(function(){i=this.getBoundingClientRect()}),r.remove(),i},u.generateXYForText=function(t,e,n,i){var r=this,a=r.generateGetAreaPoints(t,!1),o=r.generateGetBarPoints(e,!1),s=r.generateGetLinePoints(n,!1),u=i?r.getXForText:r.getYForText;return function(t,e){var n=r.isAreaType(t)?a:r.isBarType(t)?o:s;return u.call(r,n(t,e),t,this)}},u.getXForText=function(t,e,n){var i,r,a=this,o=n.getBoundingClientRect();return a.config.axis_rotated?(r=a.isBarType(e)?4:6,i=t[2][1]+r*(e.value<0?-1:1)):i=a.hasType("bar")?(t[2][0]+t[0][0])/2:t[0][0],null===e.value&&(i>a.width?i=a.width-o.width:i<0&&(i=4)),i},u.getYForText=function(t,e,n){var i,r=this,a=n.getBoundingClientRect();return r.config.axis_rotated?i=(t[0][0]+t[2][0]+.6*a.height)/2:(i=t[2][1],e.value<0||0===e.value&&!r.hasPositiveValue?(i+=a.height,r.isBarType(e)&&r.isSafari()?i-=3:!r.isBarType(e)&&r.isChrome()&&(i+=3)):i+=r.isBarType(e)?-3:-6),null!==e.value||r.config.axis_rotated||(i<a.height?i=a.height:i>this.height&&(i=this.height-4)),i},u.setTargetType=function(t,e){var n=this,i=n.config;n.mapToTargetIds(t).forEach(function(t){n.withoutFadeIn[t]=e===i.data_types[t],i.data_types[t]=e}),t||(i.data_type=e)},u.hasType=function(t,e){var n=this,i=n.config.data_types,r=!1;return e=e||n.data.targets,e&&e.length?e.forEach(function(e){var n=i[e.id];(n&&n.indexOf(t)>=0||!n&&"line"===t)&&(r=!0)}):Object.keys(i).length?Object.keys(i).forEach(function(e){i[e]===t&&(r=!0)}):r=n.config.data_type===t,r},u.hasArcType=function(t){return this.hasType("pie",t)||this.hasType("donut",t)||this.hasType("gauge",t)},u.isLineType=function(t){var e=this.config,n=p(t)?t:t.id;return!e.data_types[n]||["line","spline","area","area-spline","step","area-step"].indexOf(e.data_types[n])>=0},u.isStepType=function(t){var e=p(t)?t:t.id;return["step","area-step"].indexOf(this.config.data_types[e])>=0},u.isSplineType=function(t){var e=p(t)?t:t.id;return["spline","area-spline"].indexOf(this.config.data_types[e])>=0},u.isAreaType=function(t){var e=p(t)?t:t.id;return["area","area-spline","area-step"].indexOf(this.config.data_types[e])>=0},u.isBarType=function(t){var e=p(t)?t:t.id;return"bar"===this.config.data_types[e]},u.isScatterType=function(t){var e=p(t)?t:t.id;return"scatter"===this.config.data_types[e]},u.isPieType=function(t){var e=p(t)?t:t.id;return"pie"===this.config.data_types[e]},u.isGaugeType=function(t){var e=p(t)?t:t.id;return"gauge"===this.config.data_types[e]},u.isDonutType=function(t){var e=p(t)?t:t.id;return"donut"===this.config.data_types[e]},u.isArcType=function(t){return this.isPieType(t)||this.isDonutType(t)||this.isGaugeType(t)},u.lineData=function(t){return this.isLineType(t)?[t]:[]},u.arcData=function(t){return this.isArcType(t.data)?[t]:[]},u.barData=function(t){return this.isBarType(t)?t.values:[]},u.lineOrScatterData=function(t){return this.isLineType(t)||this.isScatterType(t)?t.values:[]},u.barOrLineData=function(t){return this.isBarType(t)||this.isLineType(t)?t.values:[]},u.isInterpolationType=function(t){return["linear","linear-closed","basis","basis-open","basis-closed","bundle","cardinal","cardinal-open","cardinal-closed","monotone"].indexOf(t)>=0},u.initGrid=function(){var t=this,e=t.config,n=t.d3;t.grid=t.main.append("g").attr("clip-path",t.clipPathForGrid).attr("class",h.grid),e.grid_x_show&&t.grid.append("g").attr("class",h.xgrids),e.grid_y_show&&t.grid.append("g").attr("class",h.ygrids),e.grid_focus_show&&t.grid.append("g").attr("class",h.xgridFocus).append("line").attr("class",h.xgridFocus),t.xgrid=n.selectAll([]),e.grid_lines_front||t.initGridLines()},u.initGridLines=function(){var t=this,e=t.d3;t.gridLines=t.main.append("g").attr("clip-path",t.clipPathForGrid).attr("class",h.grid+" "+h.gridLines),t.gridLines.append("g").attr("class",h.xgridLines),t.gridLines.append("g").attr("class",h.ygridLines),t.xgridLines=e.selectAll([])},u.updateXGrid=function(t){var e=this,n=e.config,i=e.d3,r=e.generateGridData(n.grid_x_type,e.x),a=e.isCategorized()?e.xAxis.tickOffset():0;e.xgridAttr=n.axis_rotated?{x1:0,x2:e.width,y1:function(t){return e.x(t)-a},y2:function(t){return e.x(t)-a}}:{x1:function(t){return e.x(t)+a},x2:function(t){return e.x(t)+a},y1:0,y2:e.height},e.xgrid=e.main.select("."+h.xgrids).selectAll("."+h.xgrid).data(r),e.xgrid.enter().append("line").attr("class",h.xgrid),t||e.xgrid.attr(e.xgridAttr).style("opacity",function(){return+i.select(this).attr(n.axis_rotated?"y1":"x1")===(n.axis_rotated?e.height:0)?0:1}),e.xgrid.exit().remove()},u.updateYGrid=function(){var t=this,e=t.config,n=t.yAxis.tickValues()||t.y.ticks(e.grid_y_ticks);t.ygrid=t.main.select("."+h.ygrids).selectAll("."+h.ygrid).data(n),t.ygrid.enter().append("line").attr("class",h.ygrid),t.ygrid.attr("x1",e.axis_rotated?t.y:0).attr("x2",e.axis_rotated?t.y:t.width).attr("y1",e.axis_rotated?0:t.y).attr("y2",e.axis_rotated?t.height:t.y),t.ygrid.exit().remove(),t.smoothLines(t.ygrid,"grid")},u.gridTextAnchor=function(t){return t.position?t.position:"end"},u.gridTextDx=function(t){return"start"===t.position?4:"middle"===t.position?0:-4},u.xGridTextX=function(t){return"start"===t.position?-this.height:"middle"===t.position?-this.height/2:0},u.yGridTextX=function(t){return"start"===t.position?0:"middle"===t.position?this.width/2:this.width},u.updateGrid=function(t){var e,n,i,r=this,a=r.main,o=r.config;r.grid.style("visibility",r.hasArcType()?"hidden":"visible"),a.select("line."+h.xgridFocus).style("visibility","hidden"),o.grid_x_show&&r.updateXGrid(),r.xgridLines=a.select("."+h.xgridLines).selectAll("."+h.xgridLine).data(o.grid_x_lines),e=r.xgridLines.enter().append("g").attr("class",function(t){return h.xgridLine+(t.class?" "+t.class:"")}),e.append("line").style("opacity",0),e.append("text").attr("text-anchor",r.gridTextAnchor).attr("transform",o.axis_rotated?"":"rotate(-90)").attr("dx",r.gridTextDx).attr("dy",-5).style("opacity",0),r.xgridLines.exit().transition().duration(t).style("opacity",0).remove(),o.grid_y_show&&r.updateYGrid(),r.ygridLines=a.select("."+h.ygridLines).selectAll("."+h.ygridLine).data(o.grid_y_lines),n=r.ygridLines.enter().append("g").attr("class",function(t){return h.ygridLine+(t.class?" "+t.class:"")}),n.append("line").style("opacity",0),n.append("text").attr("text-anchor",r.gridTextAnchor).attr("transform",o.axis_rotated?"rotate(-90)":"").attr("dx",r.gridTextDx).attr("dy",-5).style("opacity",0),i=r.yv.bind(r),r.ygridLines.select("line").transition().duration(t).attr("x1",o.axis_rotated?i:0).attr("x2",o.axis_rotated?i:r.width).attr("y1",o.axis_rotated?0:i).attr("y2",o.axis_rotated?r.height:i).style("opacity",1),r.ygridLines.select("text").transition().duration(t).attr("x",o.axis_rotated?r.xGridTextX.bind(r):r.yGridTextX.bind(r)).attr("y",i).text(function(t){return t.text}).style("opacity",1),r.ygridLines.exit().transition().duration(t).style("opacity",0).remove()},u.redrawGrid=function(t){var e=this,n=e.config,i=e.xv.bind(e),r=e.xgridLines.select("line"),a=e.xgridLines.select("text");return[(t?r.transition():r).attr("x1",n.axis_rotated?0:i).attr("x2",n.axis_rotated?e.width:i).attr("y1",n.axis_rotated?i:0).attr("y2",n.axis_rotated?i:e.height).style("opacity",1),(t?a.transition():a).attr("x",n.axis_rotated?e.yGridTextX.bind(e):e.xGridTextX.bind(e)).attr("y",i).text(function(t){return t.text}).style("opacity",1)]},u.showXGridFocus=function(t){var e=this,n=e.config,i=t.filter(function(t){return t&&d(t.value)}),r=e.main.selectAll("line."+h.xgridFocus),a=e.xx.bind(e);n.tooltip_show&&(e.hasType("scatter")||e.hasArcType()||(r.style("visibility","visible").data([i[0]]).attr(n.axis_rotated?"y1":"x1",a).attr(n.axis_rotated?"y2":"x2",a),e.smoothLines(r,"grid")))},u.hideXGridFocus=function(){this.main.select("line."+h.xgridFocus).style("visibility","hidden")},u.updateXgridFocus=function(){var t=this,e=t.config;t.main.select("line."+h.xgridFocus).attr("x1",e.axis_rotated?0:-10).attr("x2",e.axis_rotated?t.width:-10).attr("y1",e.axis_rotated?-10:0).attr("y2",e.axis_rotated?-10:t.height)},u.generateGridData=function(t,e){var n,i,r,a,o=this,s=[],u=o.main.select("."+h.axisX).selectAll(".tick").size();if("year"===t)for(n=o.getXDomain(),i=n[0].getFullYear(),r=n[1].getFullYear(),a=i;a<=r;a++)s.push(new Date(a+"-01-01 00:00:00"));else s=e.ticks(10),s.length>u&&(s=s.filter(function(t){return(""+t).indexOf(".")<0}));return s},u.getGridFilterToRemove=function(t){return t?function(e){var n=!1;return[].concat(t).forEach(function(t){("value"in t&&e.value===t.value||"class"in t&&e.class===t.class)&&(n=!0)}),n}:function(){return!0}},u.removeGridLines=function(t,e){var n=this,i=n.config,r=n.getGridFilterToRemove(t),a=function(t){return!r(t)},o=e?h.xgridLines:h.ygridLines,s=e?h.xgridLine:h.ygridLine;n.main.select("."+o).selectAll("."+s).filter(r).transition().duration(i.transition_duration).style("opacity",0).remove(),e?i.grid_x_lines=i.grid_x_lines.filter(a):i.grid_y_lines=i.grid_y_lines.filter(a)},u.initTooltip=function(){var t,e=this,n=e.config;if(e.tooltip=e.selectChart.style("position","relative").append("div").attr("class",h.tooltipContainer).style("position","absolute").style("pointer-events","none").style("display","none"),n.tooltip_init_show){if(e.isTimeSeries()&&p(n.tooltip_init_x)){for(n.tooltip_init_x=e.parseDate(n.tooltip_init_x),t=0;t<e.data.targets[0].values.length&&e.data.targets[0].values[t].x-n.tooltip_init_x!==0;t++);n.tooltip_init_x=t}e.tooltip.html(n.tooltip_contents.call(e,e.data.targets.map(function(t){return e.addName(t.values[n.tooltip_init_x])}),e.axis.getXAxisTickFormat(),e.getYFormat(e.hasArcType()),e.color)),e.tooltip.style("top",n.tooltip_init_position.top).style("left",n.tooltip_init_position.left).style("display","block")}},u.getTooltipContent=function(t,e,n,i){var r,a,o,s,u,c,l=this,h=l.config,d=h.tooltip_format_title||e,f=h.tooltip_format_name||function(t){return t},p=h.tooltip_format_value||n,g=l.isOrderAsc();if(0===h.data_groups.length)t.sort(function(t,e){var n=t?t.value:null,i=e?e.value:null;return g?n-i:i-n});else{var v=l.orderTargets(l.data.targets).map(function(t){return t.id});t.sort(function(t,e){var n=t?t.value:null,i=e?e.value:null;return n>0&&i>0&&(n=t?v.indexOf(t.id):null,i=e?v.indexOf(e.id):null),g?n-i:i-n})}for(a=0;a<t.length;a++)if(t[a]&&(t[a].value||0===t[a].value)&&(r||(o=w(d?d(t[a].x):t[a].x),r="<table class='"+l.CLASS.tooltip+"'>"+(o||0===o?"<tr><th colspan='2'>"+o+"</th></tr>":"")),s=w(p(t[a].value,t[a].ratio,t[a].id,t[a].index,t)),void 0!==s)){if(null===t[a].name)continue;u=w(f(t[a].name,t[a].ratio,t[a].id,t[a].index)),c=l.levelColor?l.levelColor(t[a].value):i(t[a].id),r+="<tr class='"+l.CLASS.tooltipName+"-"+l.getTargetSelectorSuffix(t[a].id)+"'>",r+="<td class='name'><span style='background-color:"+c+"'></span>"+u+"</td>",r+="<td class='value'>"+s+"</td>",r+="</tr>"}return r+"</table>"},u.tooltipPosition=function(t,e,n,i){var r,a,o,s,u,c=this,l=c.config,h=c.d3,d=c.hasArcType(),f=h.mouse(i);return d?(a=(c.width-(c.isLegendRight?c.getLegendWidth():0))/2+f[0],s=c.height/2+f[1]+20):(r=c.getSvgLeft(!0),l.axis_rotated?(a=r+f[0]+100,o=a+e,u=c.currentWidth-c.getCurrentPaddingRight(),s=c.x(t[0].x)+20):(a=r+c.getCurrentPaddingLeft(!0)+c.x(t[0].x)+20,o=a+e,u=r+c.currentWidth-c.getCurrentPaddingRight(),s=f[1]+15),o>u&&(a-=o-u+20),s+n>c.currentHeight&&(s-=n+30)),s<0&&(s=0),{top:s,left:a}},u.showTooltip=function(t,e){var n,i,r,a=this,o=a.config,s=a.hasArcType(),c=t.filter(function(t){return t&&d(t.value)}),l=o.tooltip_position||u.tooltipPosition;0!==c.length&&o.tooltip_show&&(a.tooltip.html(o.tooltip_contents.call(a,t,a.axis.getXAxisTickFormat(),a.getYFormat(s),a.color)).style("display","block"),n=a.tooltip.property("offsetWidth"),i=a.tooltip.property("offsetHeight"),r=l.call(this,c,n,i,e),a.tooltip.style("top",r.top+"px").style("left",r.left+"px"))},u.hideTooltip=function(){this.tooltip.style("display","none")},u.initLegend=function(){var t=this;return t.legendItemTextBox={},t.legendHasRendered=!1,t.legend=t.svg.append("g").attr("transform",t.getTranslate("legend")),t.config.legend_show?void t.updateLegendWithDefaults():(t.legend.style("visibility","hidden"),void(t.hiddenLegendIds=t.mapToIds(t.data.targets)))},u.updateLegendWithDefaults=function(){var t=this;t.updateLegend(t.mapToIds(t.data.targets),{withTransform:!1,withTransitionForTransform:!1,withTransition:!1})},u.updateSizeForLegend=function(t,e){var n=this,i=n.config,r={top:n.isLegendTop?n.getCurrentPaddingTop()+i.legend_inset_y+5.5:n.currentHeight-t-n.getCurrentPaddingBottom()-i.legend_inset_y,left:n.isLegendLeft?n.getCurrentPaddingLeft()+i.legend_inset_x+.5:n.currentWidth-e-n.getCurrentPaddingRight()-i.legend_inset_x+.5};n.margin3={top:n.isLegendRight?0:n.isLegendInset?r.top:n.currentHeight-t,right:NaN,bottom:0,left:n.isLegendRight?n.currentWidth-e:n.isLegendInset?r.left:0}},u.transformLegend=function(t){var e=this;(t?e.legend.transition():e.legend).attr("transform",e.getTranslate("legend"))},u.updateLegendStep=function(t){this.legendStep=t},u.updateLegendItemWidth=function(t){this.legendItemWidth=t},u.updateLegendItemHeight=function(t){this.legendItemHeight=t},u.getLegendWidth=function(){var t=this;return t.config.legend_show?t.isLegendRight||t.isLegendInset?t.legendItemWidth*(t.legendStep+1):t.currentWidth:0},u.getLegendHeight=function(){var t=this,e=0;return t.config.legend_show&&(e=t.isLegendRight?t.currentHeight:Math.max(20,t.legendItemHeight)*(t.legendStep+1)),e},u.opacityForLegend=function(t){return t.classed(h.legendItemHidden)?null:1},u.opacityForUnfocusedLegend=function(t){return t.classed(h.legendItemHidden)?null:.3},u.toggleFocusLegend=function(t,e){var n=this;t=n.mapToTargetIds(t),n.legend.selectAll("."+h.legendItem).filter(function(e){return t.indexOf(e)>=0}).classed(h.legendItemFocused,e).transition().duration(100).style("opacity",function(){var t=e?n.opacityForLegend:n.opacityForUnfocusedLegend;return t.call(n,n.d3.select(this))})},u.revertLegend=function(){var t=this,e=t.d3;t.legend.selectAll("."+h.legendItem).classed(h.legendItemFocused,!1).transition().duration(100).style("opacity",function(){return t.opacityForLegend(e.select(this))})},u.showLegend=function(t){var e=this,n=e.config;n.legend_show||(n.legend_show=!0,e.legend.style("visibility","visible"),e.legendHasRendered||e.updateLegendWithDefaults()),e.removeHiddenLegendIds(t),e.legend.selectAll(e.selectorLegends(t)).style("visibility","visible").transition().style("opacity",function(){return e.opacityForLegend(e.d3.select(this))})},u.hideLegend=function(t){var e=this,n=e.config;n.legend_show&&_(t)&&(n.legend_show=!1,e.legend.style("visibility","hidden")),e.addHiddenLegendIds(t),e.legend.selectAll(e.selectorLegends(t)).style("opacity",0).style("visibility","hidden")},u.clearLegendItemTextBoxCache=function(){this.legendItemTextBox={}},u.updateLegend=function(t,e,n){function i(t,e){return w.legendItemTextBox[e]||(w.legendItemTextBox[e]=w.getTextRect(t.textContent,h.legendItem,t)),w.legendItemTextBox[e]}function r(e,n,r){function a(t,e){e||(o=(p-I-f)/2,o<M&&(o=(p-f)/2,I=0,G++)),O[t]=G,N[G]=w.isLegendInset?10:o,V[t]=I,I+=f}var o,s,u=0===r,c=r===t.length-1,l=i(e,n),h=l.width+k+(!c||w.isLegendRight||w.isLegendInset?E:0)+A.legend_padding,d=l.height+C,f=w.isLegendRight||w.isLegendInset?d:h,p=w.isLegendRight||w.isLegendInset?w.getLegendHeight():w.getLegendWidth();return u&&(I=0,G=0,P=0,L=0),A.legend_show&&!w.isLegendToShow(n)?void(D[n]=R[n]=O[n]=V[n]=0):(D[n]=h,R[n]=d,(!P||h>=P)&&(P=h),(!L||d>=L)&&(L=d),s=w.isLegendRight||w.isLegendInset?L:P,void(A.legend_equally?(Object.keys(D).forEach(function(t){D[t]=P}),Object.keys(R).forEach(function(t){R[t]=L}),o=(p-s*t.length)/2,o<M?(I=0,G=0,t.forEach(function(t){a(t)})):a(n,!0)):a(n)))}var a,o,s,u,c,l,d,f,p,g,m,y,x,_,b,T,w=this,A=w.config,C=4,E=10,P=0,L=0,M=10,k=A.legend_item_tile_width+5,I=0,V={},D={},R={},N=[0],O={},G=0;
t=t.filter(function(t){return!v(A.data_names[t])||null!==A.data_names[t]}),e=e||{},m=S(e,"withTransition",!0),y=S(e,"withTransitionForTransform",!0),w.isLegendInset&&(G=A.legend_inset_step?A.legend_inset_step:t.length,w.updateLegendStep(G)),w.isLegendRight?(a=function(t){return P*O[t]},u=function(t){return N[O[t]]+V[t]}):w.isLegendInset?(a=function(t){return P*O[t]+10},u=function(t){return N[O[t]]+V[t]}):(a=function(t){return N[O[t]]+V[t]},u=function(t){return L*O[t]}),o=function(t,e){return a(t,e)+4+A.legend_item_tile_width},c=function(t,e){return u(t,e)+9},s=function(t,e){return a(t,e)},l=function(t,e){return u(t,e)-5},d=function(t,e){return a(t,e)-2},f=function(t,e){return a(t,e)-2+A.legend_item_tile_width},p=function(t,e){return u(t,e)+4},g=w.legend.selectAll("."+h.legendItem).data(t).enter().append("g").attr("class",function(t){return w.generateClass(h.legendItem,t)}).style("visibility",function(t){return w.isLegendToShow(t)?"visible":"hidden"}).style("cursor","pointer").on("click",function(t){A.legend_item_onclick?A.legend_item_onclick.call(w,t):w.d3.event.altKey?(w.api.hide(),w.api.show(t)):(w.api.toggle(t),w.isTargetToShow(t)?w.api.focus(t):w.api.revert())}).on("mouseover",function(t){A.legend_item_onmouseover?A.legend_item_onmouseover.call(w,t):(w.d3.select(this).classed(h.legendItemFocused,!0),!w.transiting&&w.isTargetToShow(t)&&w.api.focus(t))}).on("mouseout",function(t){A.legend_item_onmouseout?A.legend_item_onmouseout.call(w,t):(w.d3.select(this).classed(h.legendItemFocused,!1),w.api.revert())}),g.append("text").text(function(t){return v(A.data_names[t])?A.data_names[t]:t}).each(function(t,e){r(this,t,e)}).style("pointer-events","none").attr("x",w.isLegendRight||w.isLegendInset?o:-200).attr("y",w.isLegendRight||w.isLegendInset?-200:c),g.append("rect").attr("class",h.legendItemEvent).style("fill-opacity",0).attr("x",w.isLegendRight||w.isLegendInset?s:-200).attr("y",w.isLegendRight||w.isLegendInset?-200:l),g.append("line").attr("class",h.legendItemTile).style("stroke",w.color).style("pointer-events","none").attr("x1",w.isLegendRight||w.isLegendInset?d:-200).attr("y1",w.isLegendRight||w.isLegendInset?-200:p).attr("x2",w.isLegendRight||w.isLegendInset?f:-200).attr("y2",w.isLegendRight||w.isLegendInset?-200:p).attr("stroke-width",A.legend_item_tile_height),T=w.legend.select("."+h.legendBackground+" rect"),w.isLegendInset&&P>0&&0===T.size()&&(T=w.legend.insert("g","."+h.legendItem).attr("class",h.legendBackground).append("rect")),x=w.legend.selectAll("text").data(t).text(function(t){return v(A.data_names[t])?A.data_names[t]:t}).each(function(t,e){r(this,t,e)}),(m?x.transition():x).attr("x",o).attr("y",c),_=w.legend.selectAll("rect."+h.legendItemEvent).data(t),(m?_.transition():_).attr("width",function(t){return D[t]}).attr("height",function(t){return R[t]}).attr("x",s).attr("y",l),b=w.legend.selectAll("line."+h.legendItemTile).data(t),(m?b.transition():b).style("stroke",w.color).attr("x1",d).attr("y1",p).attr("x2",f).attr("y2",p),T&&(m?T.transition():T).attr("height",w.getLegendHeight()-12).attr("width",P*(G+1)+10),w.legend.selectAll("."+h.legendItem).classed(h.legendItemHidden,function(t){return!w.isTargetToShow(t)}),w.updateLegendItemWidth(P),w.updateLegendItemHeight(L),w.updateLegendStep(G),w.updateSizes(),w.updateScales(),w.updateSvgSize(),w.transformAll(y,n),w.legendHasRendered=!0},u.initTitle=function(){var t=this;t.title=t.svg.append("text").text(t.config.title_text).attr("class",t.CLASS.title)},u.redrawTitle=function(){var t=this;t.title.attr("x",t.xForTitle.bind(t)).attr("y",t.yForTitle.bind(t))},u.xForTitle=function(){var t,e=this,n=e.config,i=n.title_position||"left";return t=i.indexOf("right")>=0?e.currentWidth-e.getTextRect(e.title.node().textContent,e.CLASS.title,e.title.node()).width-n.title_padding.right:i.indexOf("center")>=0?(e.currentWidth-e.getTextRect(e.title.node().textContent,e.CLASS.title,e.title.node()).width)/2:n.title_padding.left},u.yForTitle=function(){var t=this;return t.config.title_padding.top+t.getTextRect(t.title.node().textContent,t.CLASS.title,t.title.node()).height},u.getTitlePadding=function(){var t=this;return t.yForTitle()+t.config.title_padding.bottom},n(e,a),a.prototype.init=function(){var t=this.owner,e=t.config,n=t.main;t.axes.x=n.append("g").attr("class",h.axis+" "+h.axisX).attr("clip-path",t.clipPathForXAxis).attr("transform",t.getTranslate("x")).style("visibility",e.axis_x_show?"visible":"hidden"),t.axes.x.append("text").attr("class",h.axisXLabel).attr("transform",e.axis_rotated?"rotate(-90)":"").style("text-anchor",this.textAnchorForXAxisLabel.bind(this)),t.axes.y=n.append("g").attr("class",h.axis+" "+h.axisY).attr("clip-path",e.axis_y_inner?"":t.clipPathForYAxis).attr("transform",t.getTranslate("y")).style("visibility",e.axis_y_show?"visible":"hidden"),t.axes.y.append("text").attr("class",h.axisYLabel).attr("transform",e.axis_rotated?"":"rotate(-90)").style("text-anchor",this.textAnchorForYAxisLabel.bind(this)),t.axes.y2=n.append("g").attr("class",h.axis+" "+h.axisY2).attr("transform",t.getTranslate("y2")).style("visibility",e.axis_y2_show?"visible":"hidden"),t.axes.y2.append("text").attr("class",h.axisY2Label).attr("transform",e.axis_rotated?"":"rotate(-90)").style("text-anchor",this.textAnchorForY2AxisLabel.bind(this))},a.prototype.getXAxis=function(t,e,n,i,r,a,s){var u=this.owner,c=u.config,l={isCategory:u.isCategorized(),withOuterTick:r,tickMultiline:c.axis_x_tick_multiline,tickWidth:c.axis_x_tick_width,tickTextRotate:s?0:c.axis_x_tick_rotate,withoutTransition:a},h=o(u.d3,l).scale(t).orient(e);return u.isTimeSeries()&&i&&"function"!=typeof i&&(i=i.map(function(t){return u.parseDate(t)})),h.tickFormat(n).tickValues(i),u.isCategorized()&&(h.tickCentered(c.axis_x_tick_centered),_(c.axis_x_tick_culling)&&(c.axis_x_tick_culling=!1)),h},a.prototype.updateXAxisTickValues=function(t,e){var n,i=this.owner,r=i.config;return(r.axis_x_tick_fit||r.axis_x_tick_count)&&(n=this.generateTickValues(i.mapTargetsToUniqueXs(t),r.axis_x_tick_count,i.isTimeSeries())),e?e.tickValues(n):(i.xAxis.tickValues(n),i.subXAxis.tickValues(n)),n},a.prototype.getYAxis=function(t,e,n,i,r,a,s){var u=this.owner,c=u.config,l={withOuterTick:r,withoutTransition:a,tickTextRotate:s?0:c.axis_y_tick_rotate},h=o(u.d3,l).scale(t).orient(e).tickFormat(n);return u.isTimeSeriesY()?h.ticks(u.d3.time[c.axis_y_tick_time_value],c.axis_y_tick_time_interval):h.tickValues(i),h},a.prototype.getId=function(t){var e=this.owner.config;return t in e.data_axes?e.data_axes[t]:"y"},a.prototype.getXAxisTickFormat=function(){var t=this.owner,e=t.config,n=t.isTimeSeries()?t.defaultAxisTimeFormat:t.isCategorized()?t.categoryName:function(t){return t<0?t.toFixed(0):t};return e.axis_x_tick_format&&(f(e.axis_x_tick_format)?n=e.axis_x_tick_format:t.isTimeSeries()&&(n=function(n){return n?t.axisTimeFormat(e.axis_x_tick_format)(n):""})),f(n)?function(e){return n.call(t,e)}:n},a.prototype.getTickValues=function(t,e){return t?t:e?e.tickValues():void 0},a.prototype.getXAxisTickValues=function(){return this.getTickValues(this.owner.config.axis_x_tick_values,this.owner.xAxis)},a.prototype.getYAxisTickValues=function(){return this.getTickValues(this.owner.config.axis_y_tick_values,this.owner.yAxis)},a.prototype.getY2AxisTickValues=function(){return this.getTickValues(this.owner.config.axis_y2_tick_values,this.owner.y2Axis)},a.prototype.getLabelOptionByAxisId=function(t){var e,n=this.owner,i=n.config;return"y"===t?e=i.axis_y_label:"y2"===t?e=i.axis_y2_label:"x"===t&&(e=i.axis_x_label),e},a.prototype.getLabelText=function(t){var e=this.getLabelOptionByAxisId(t);return p(e)?e:e?e.text:null},a.prototype.setLabelText=function(t,e){var n=this.owner,i=n.config,r=this.getLabelOptionByAxisId(t);p(r)?"y"===t?i.axis_y_label=e:"y2"===t?i.axis_y2_label=e:"x"===t&&(i.axis_x_label=e):r&&(r.text=e)},a.prototype.getLabelPosition=function(t,e){var n=this.getLabelOptionByAxisId(t),i=n&&"object"==typeof n&&n.position?n.position:e;return{isInner:i.indexOf("inner")>=0,isOuter:i.indexOf("outer")>=0,isLeft:i.indexOf("left")>=0,isCenter:i.indexOf("center")>=0,isRight:i.indexOf("right")>=0,isTop:i.indexOf("top")>=0,isMiddle:i.indexOf("middle")>=0,isBottom:i.indexOf("bottom")>=0}},a.prototype.getXAxisLabelPosition=function(){return this.getLabelPosition("x",this.owner.config.axis_rotated?"inner-top":"inner-right")},a.prototype.getYAxisLabelPosition=function(){return this.getLabelPosition("y",this.owner.config.axis_rotated?"inner-right":"inner-top")},a.prototype.getY2AxisLabelPosition=function(){return this.getLabelPosition("y2",this.owner.config.axis_rotated?"inner-right":"inner-top")},a.prototype.getLabelPositionById=function(t){return"y2"===t?this.getY2AxisLabelPosition():"y"===t?this.getYAxisLabelPosition():this.getXAxisLabelPosition()},a.prototype.textForXAxisLabel=function(){return this.getLabelText("x")},a.prototype.textForYAxisLabel=function(){return this.getLabelText("y")},a.prototype.textForY2AxisLabel=function(){return this.getLabelText("y2")},a.prototype.xForAxisLabel=function(t,e){var n=this.owner;return t?e.isLeft?0:e.isCenter?n.width/2:n.width:e.isBottom?-n.height:e.isMiddle?-n.height/2:0},a.prototype.dxForAxisLabel=function(t,e){return t?e.isLeft?"0.5em":e.isRight?"-0.5em":"0":e.isTop?"-0.5em":e.isBottom?"0.5em":"0"},a.prototype.textAnchorForAxisLabel=function(t,e){return t?e.isLeft?"start":e.isCenter?"middle":"end":e.isBottom?"start":e.isMiddle?"middle":"end"},a.prototype.xForXAxisLabel=function(){return this.xForAxisLabel(!this.owner.config.axis_rotated,this.getXAxisLabelPosition())},a.prototype.xForYAxisLabel=function(){return this.xForAxisLabel(this.owner.config.axis_rotated,this.getYAxisLabelPosition())},a.prototype.xForY2AxisLabel=function(){return this.xForAxisLabel(this.owner.config.axis_rotated,this.getY2AxisLabelPosition())},a.prototype.dxForXAxisLabel=function(){return this.dxForAxisLabel(!this.owner.config.axis_rotated,this.getXAxisLabelPosition())},a.prototype.dxForYAxisLabel=function(){return this.dxForAxisLabel(this.owner.config.axis_rotated,this.getYAxisLabelPosition())},a.prototype.dxForY2AxisLabel=function(){return this.dxForAxisLabel(this.owner.config.axis_rotated,this.getY2AxisLabelPosition())},a.prototype.dyForXAxisLabel=function(){var t=this.owner,e=t.config,n=this.getXAxisLabelPosition();return e.axis_rotated?n.isInner?"1.2em":-25-this.getMaxTickWidth("x"):n.isInner?"-0.5em":e.axis_x_height?e.axis_x_height-10:"3em"},a.prototype.dyForYAxisLabel=function(){var t=this.owner,e=this.getYAxisLabelPosition();return t.config.axis_rotated?e.isInner?"-0.5em":"3em":e.isInner?"1.2em":-10-(t.config.axis_y_inner?0:this.getMaxTickWidth("y")+10)},a.prototype.dyForY2AxisLabel=function(){var t=this.owner,e=this.getY2AxisLabelPosition();return t.config.axis_rotated?e.isInner?"1.2em":"-2.2em":e.isInner?"-0.5em":15+(t.config.axis_y2_inner?0:this.getMaxTickWidth("y2")+15)},a.prototype.textAnchorForXAxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(!t.config.axis_rotated,this.getXAxisLabelPosition())},a.prototype.textAnchorForYAxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(t.config.axis_rotated,this.getYAxisLabelPosition())},a.prototype.textAnchorForY2AxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(t.config.axis_rotated,this.getY2AxisLabelPosition())},a.prototype.getMaxTickWidth=function(t,e){var n,i,r,a,o,s=this.owner,u=s.config,c=0;return e&&s.currentMaxTickWidths[t]?s.currentMaxTickWidths[t]:(s.svg&&(n=s.filterTargetsToShow(s.data.targets),"y"===t?(i=s.y.copy().domain(s.getYDomain(n,"y")),r=this.getYAxis(i,s.yOrient,u.axis_y_tick_format,s.yAxisTickValues,!1,!0,!0)):"y2"===t?(i=s.y2.copy().domain(s.getYDomain(n,"y2")),r=this.getYAxis(i,s.y2Orient,u.axis_y2_tick_format,s.y2AxisTickValues,!1,!0,!0)):(i=s.x.copy().domain(s.getXDomain(n)),r=this.getXAxis(i,s.xOrient,s.xAxisTickFormat,s.xAxisTickValues,!1,!0,!0),this.updateXAxisTickValues(n,r)),a=s.d3.select("body").append("div").classed("c3",!0),o=a.append("svg").style("visibility","hidden").style("position","fixed").style("top",0).style("left",0),o.append("g").call(r).each(function(){s.d3.select(this).selectAll("text").each(function(){var t=this.getBoundingClientRect();c<t.width&&(c=t.width)}),a.remove()})),s.currentMaxTickWidths[t]=c<=0?s.currentMaxTickWidths[t]:c,s.currentMaxTickWidths[t])},a.prototype.updateLabels=function(t){var e=this.owner,n=e.main.select("."+h.axisX+" ."+h.axisXLabel),i=e.main.select("."+h.axisY+" ."+h.axisYLabel),r=e.main.select("."+h.axisY2+" ."+h.axisY2Label);(t?n.transition():n).attr("x",this.xForXAxisLabel.bind(this)).attr("dx",this.dxForXAxisLabel.bind(this)).attr("dy",this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this)),(t?i.transition():i).attr("x",this.xForYAxisLabel.bind(this)).attr("dx",this.dxForYAxisLabel.bind(this)).attr("dy",this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this)),(t?r.transition():r).attr("x",this.xForY2AxisLabel.bind(this)).attr("dx",this.dxForY2AxisLabel.bind(this)).attr("dy",this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this))},a.prototype.getPadding=function(t,e,n,i){var r="number"==typeof t?t:t[e];return d(r)?"ratio"===t.unit?t[e]*i:this.convertPixelsToAxisPadding(r,i):n},a.prototype.convertPixelsToAxisPadding=function(t,e){var n=this.owner,i=n.config.axis_rotated?n.width:n.height;return e*(t/i)},a.prototype.generateTickValues=function(t,e,n){var i,r,a,o,s,u,c,l=t;if(e)if(i=f(e)?e():e,1===i)l=[t[0]];else if(2===i)l=[t[0],t[t.length-1]];else if(i>2){for(o=i-2,r=t[0],a=t[t.length-1],s=(a-r)/(o+1),l=[r],u=0;u<o;u++)c=+r+s*(u+1),l.push(n?new Date(c):c);l.push(a)}return n||(l=l.sort(function(t,e){return t-e})),l},a.prototype.generateTransitions=function(t){var e=this.owner,n=e.axes;return{axisX:t?n.x.transition().duration(t):n.x,axisY:t?n.y.transition().duration(t):n.y,axisY2:t?n.y2.transition().duration(t):n.y2,axisSubX:t?n.subx.transition().duration(t):n.subx}},a.prototype.redraw=function(t,e){var n=this.owner;n.axes.x.style("opacity",e?0:1),n.axes.y.style("opacity",e?0:1),n.axes.y2.style("opacity",e?0:1),n.axes.subx.style("opacity",e?0:1),t.axisX.call(n.xAxis),t.axisY.call(n.yAxis),t.axisY2.call(n.y2Axis),t.axisSubX.call(n.subXAxis)},u.getClipPath=function(e){var n=t.navigator.appVersion.toLowerCase().indexOf("msie 9.")>=0;return"url("+(n?"":document.URL.split("#")[0])+"#"+e+")"},u.appendClip=function(t,e){return t.append("clipPath").attr("id",e).append("rect")},u.getAxisClipX=function(t){var e=Math.max(30,this.margin.left);return t?-(1+e):-(e-1)},u.getAxisClipY=function(t){return t?-20:-this.margin.top},u.getXAxisClipX=function(){var t=this;return t.getAxisClipX(!t.config.axis_rotated)},u.getXAxisClipY=function(){var t=this;return t.getAxisClipY(!t.config.axis_rotated)},u.getYAxisClipX=function(){var t=this;return t.config.axis_y_inner?-1:t.getAxisClipX(t.config.axis_rotated)},u.getYAxisClipY=function(){var t=this;return t.getAxisClipY(t.config.axis_rotated)},u.getAxisClipWidth=function(t){var e=this,n=Math.max(30,e.margin.left),i=Math.max(30,e.margin.right);return t?e.width+2+n+i:e.margin.left+20},u.getAxisClipHeight=function(t){return(t?this.margin.bottom:this.margin.top+this.height)+20},u.getXAxisClipWidth=function(){var t=this;return t.getAxisClipWidth(!t.config.axis_rotated)},u.getXAxisClipHeight=function(){var t=this;return t.getAxisClipHeight(!t.config.axis_rotated)},u.getYAxisClipWidth=function(){var t=this;return t.getAxisClipWidth(t.config.axis_rotated)+(t.config.axis_y_inner?20:0)},u.getYAxisClipHeight=function(){var t=this;return t.getAxisClipHeight(t.config.axis_rotated)},u.initPie=function(){var t=this,e=t.d3,n=t.config;t.pie=e.layout.pie().value(function(t){return t.values.reduce(function(t,e){return t+e.value},0)}),n.data_order||t.pie.sort(null)},u.updateRadius=function(){var t=this,e=t.config,n=e.gauge_width||e.donut_width;t.radiusExpanded=Math.min(t.arcWidth,t.arcHeight)/2,t.radius=.95*t.radiusExpanded,t.innerRadiusRatio=n?(t.radius-n)/t.radius:.6,t.innerRadius=t.hasType("donut")||t.hasType("gauge")?t.radius*t.innerRadiusRatio:0},u.updateArc=function(){var t=this;t.svgArc=t.getSvgArc(),t.svgArcExpanded=t.getSvgArcExpanded(),t.svgArcExpandedSub=t.getSvgArcExpanded(.98)},u.updateAngle=function(t){var e,n,i,r,a=this,o=a.config,s=!1,u=0;return o?(a.pie(a.filterTargetsToShow(a.data.targets)).forEach(function(e){s||e.data.id!==t.data.id||(s=!0,t=e,t.index=u),u++}),isNaN(t.startAngle)&&(t.startAngle=0),isNaN(t.endAngle)&&(t.endAngle=t.startAngle),a.isGaugeType(t.data)&&(e=o.gauge_min,n=o.gauge_max,i=Math.PI*(o.gauge_fullCircle?2:1)/(n-e),r=t.value<e?0:t.value<n?t.value-e:n-e,t.startAngle=o.gauge_startingAngle,t.endAngle=t.startAngle+i*r),s?t:null):null},u.getSvgArc=function(){var t=this,e=t.d3.svg.arc().outerRadius(t.radius).innerRadius(t.innerRadius),n=function(n,i){var r;return i?e(n):(r=t.updateAngle(n),r?e(r):"M 0 0")};return n.centroid=e.centroid,n},u.getSvgArcExpanded=function(t){var e=this,n=e.d3.svg.arc().outerRadius(e.radiusExpanded*(t?t:1)).innerRadius(e.innerRadius);return function(t){var i=e.updateAngle(t);return i?n(i):"M 0 0"}},u.getArc=function(t,e,n){return n||this.isArcType(t.data)?this.svgArc(t,e):"M 0 0"},u.transformForArcLabel=function(t){var e,n,i,r,a,o=this,s=o.config,u=o.updateAngle(t),c="";return u&&!o.hasType("gauge")&&(e=this.svgArc.centroid(u),n=isNaN(e[0])?0:e[0],i=isNaN(e[1])?0:e[1],r=Math.sqrt(n*n+i*i),a=o.hasType("donut")&&s.donut_label_ratio?f(s.donut_label_ratio)?s.donut_label_ratio(t,o.radius,r):s.donut_label_ratio:o.hasType("pie")&&s.pie_label_ratio?f(s.pie_label_ratio)?s.pie_label_ratio(t,o.radius,r):s.pie_label_ratio:o.radius&&r?(36/o.radius>.375?1.175-36/o.radius:.8)*o.radius/r:0,c="translate("+n*a+","+i*a+")"),c},u.getArcRatio=function(t){var e=this,n=e.config,i=Math.PI*(e.hasType("gauge")&&!n.gauge_fullCircle?1:2);return t?(t.endAngle-t.startAngle)/i:null},u.convertToArcData=function(t){return this.addName({id:t.data.id,value:t.value,ratio:this.getArcRatio(t),index:t.index})},u.textForArcLabel=function(t){var e,n,i,r,a,o=this;return o.shouldShowArcLabel()?(e=o.updateAngle(t),n=e?e.value:null,i=o.getArcRatio(e),r=t.data.id,o.hasType("gauge")||o.meetsArcLabelThreshold(i)?(a=o.getArcLabelFormat(),a?a(n,i,r):o.defaultArcValueFormat(n,i)):""):""},u.expandArc=function(e){var n,i=this;return i.transiting?void(n=t.setInterval(function(){i.transiting||(t.clearInterval(n),i.legend.selectAll(".c3-legend-item-focused").size()>0&&i.expandArc(e))},10)):(e=i.mapToTargetIds(e),void i.svg.selectAll(i.selectorTargets(e,"."+h.chartArc)).each(function(t){i.shouldExpand(t.data.id)&&i.d3.select(this).selectAll("path").transition().duration(i.expandDuration(t.data.id)).attr("d",i.svgArcExpanded).transition().duration(2*i.expandDuration(t.data.id)).attr("d",i.svgArcExpandedSub).each(function(t){i.isDonutType(t.data)})}))},u.unexpandArc=function(t){var e=this;e.transiting||(t=e.mapToTargetIds(t),e.svg.selectAll(e.selectorTargets(t,"."+h.chartArc)).selectAll("path").transition().duration(function(t){return e.expandDuration(t.data.id)}).attr("d",e.svgArc),e.svg.selectAll("."+h.arc).style("opacity",1))},u.expandDuration=function(t){var e=this,n=e.config;return e.isDonutType(t)?n.donut_expand_duration:e.isGaugeType(t)?n.gauge_expand_duration:e.isPieType(t)?n.pie_expand_duration:50},u.shouldExpand=function(t){var e=this,n=e.config;return e.isDonutType(t)&&n.donut_expand||e.isGaugeType(t)&&n.gauge_expand||e.isPieType(t)&&n.pie_expand},u.shouldShowArcLabel=function(){var t=this,e=t.config,n=!0;return t.hasType("donut")?n=e.donut_label_show:t.hasType("pie")&&(n=e.pie_label_show),n},u.meetsArcLabelThreshold=function(t){var e=this,n=e.config,i=e.hasType("donut")?n.donut_label_threshold:n.pie_label_threshold;return t>=i},u.getArcLabelFormat=function(){var t=this,e=t.config,n=e.pie_label_format;return t.hasType("gauge")?n=e.gauge_label_format:t.hasType("donut")&&(n=e.donut_label_format),n},u.getArcTitle=function(){var t=this;return t.hasType("donut")?t.config.donut_title:""},u.updateTargetsForArc=function(t){var e,n,i=this,r=i.main,a=i.classChartArc.bind(i),o=i.classArcs.bind(i),s=i.classFocus.bind(i);e=r.select("."+h.chartArcs).selectAll("."+h.chartArc).data(i.pie(t)).attr("class",function(t){return a(t)+s(t.data)}),n=e.enter().append("g").attr("class",a),n.append("g").attr("class",o),n.append("text").attr("dy",i.hasType("gauge")?"-.1em":".35em").style("opacity",0).style("text-anchor","middle").style("pointer-events","none")},u.initArc=function(){var t=this;t.arcs=t.main.select("."+h.chart).append("g").attr("class",h.chartArcs).attr("transform",t.getTranslate("arc")),t.arcs.append("text").attr("class",h.chartArcsTitle).style("text-anchor","middle").text(t.getArcTitle())},u.redrawArc=function(t,e,n){var i,r=this,a=r.d3,o=r.config,s=r.main;i=s.selectAll("."+h.arcs).selectAll("."+h.arc).data(r.arcData.bind(r)),i.enter().append("path").attr("class",r.classArc.bind(r)).style("fill",function(t){return r.color(t.data)}).style("cursor",function(t){return o.interaction_enabled&&o.data_selection_isselectable(t)?"pointer":null}).style("opacity",0).each(function(t){r.isGaugeType(t.data)&&(t.startAngle=t.endAngle=o.gauge_startingAngle),this._current=t}),i.attr("transform",function(t){return!r.isGaugeType(t.data)&&n?"scale(0)":""}).style("opacity",function(t){return t===this._current?0:1}).on("mouseover",o.interaction_enabled?function(t){var e,n;r.transiting||(e=r.updateAngle(t),e&&(n=r.convertToArcData(e),r.expandArc(e.data.id),r.api.focus(e.data.id),r.toggleFocusLegend(e.data.id,!0),r.config.data_onmouseover(n,this)))}:null).on("mousemove",o.interaction_enabled?function(t){var e,n,i=r.updateAngle(t);i&&(e=r.convertToArcData(i),n=[e],r.showTooltip(n,this))}:null).on("mouseout",o.interaction_enabled?function(t){var e,n;r.transiting||(e=r.updateAngle(t),e&&(n=r.convertToArcData(e),r.unexpandArc(e.data.id),r.api.revert(),r.revertLegend(),r.hideTooltip(),r.config.data_onmouseout(n,this)))}:null).on("click",o.interaction_enabled?function(t,e){var n,i=r.updateAngle(t);i&&(n=r.convertToArcData(i),r.toggleShape&&r.toggleShape(this,n,e),r.config.data_onclick.call(r.api,n,this))}:null).each(function(){r.transiting=!0}).transition().duration(t).attrTween("d",function(t){var e,n=r.updateAngle(t);return n?(isNaN(this._current.startAngle)&&(this._current.startAngle=0),isNaN(this._current.endAngle)&&(this._current.endAngle=this._current.startAngle),e=a.interpolate(this._current,n),this._current=e(0),function(n){var i=e(n);return i.data=t.data,r.getArc(i,!0)}):function(){return"M 0 0"}}).attr("transform",n?"scale(1)":"").style("fill",function(t){return r.levelColor?r.levelColor(t.data.values[0].value):r.color(t.data.id)}).style("opacity",1).call(r.endall,function(){r.transiting=!1}),i.exit().transition().duration(e).style("opacity",0).remove(),s.selectAll("."+h.chartArc).select("text").style("opacity",0).attr("class",function(t){return r.isGaugeType(t.data)?h.gaugeValue:""}).text(r.textForArcLabel.bind(r)).attr("transform",r.transformForArcLabel.bind(r)).style("font-size",function(t){return r.isGaugeType(t.data)?Math.round(r.radius/5)+"px":""}).transition().duration(t).style("opacity",function(t){return r.isTargetToShow(t.data.id)&&r.isArcType(t.data)?1:0}),s.select("."+h.chartArcsTitle).style("opacity",r.hasType("donut")||r.hasType("gauge")?1:0),r.hasType("gauge")&&(r.arcs.select("."+h.chartArcsBackground).attr("d",function(){var t={data:[{value:o.gauge_max}],startAngle:o.gauge_startingAngle,endAngle:-1*o.gauge_startingAngle};return r.getArc(t,!0,!0)}),r.arcs.select("."+h.chartArcsGaugeUnit).attr("dy",".75em").text(o.gauge_label_show?o.gauge_units:""),r.arcs.select("."+h.chartArcsGaugeMin).attr("dx",-1*(r.innerRadius+(r.radius-r.innerRadius)/(o.gauge_fullCircle?1:2))+"px").attr("dy","1.2em").text(o.gauge_label_show?o.gauge_min:""),r.arcs.select("."+h.chartArcsGaugeMax).attr("dx",r.innerRadius+(r.radius-r.innerRadius)/(o.gauge_fullCircle?1:2)+"px").attr("dy","1.2em").text(o.gauge_label_show?o.gauge_max:""))},u.initGauge=function(){var t=this.arcs;this.hasType("gauge")&&(t.append("path").attr("class",h.chartArcsBackground),t.append("text").attr("class",h.chartArcsGaugeUnit).style("text-anchor","middle").style("pointer-events","none"),t.append("text").attr("class",h.chartArcsGaugeMin).style("text-anchor","middle").style("pointer-events","none"),t.append("text").attr("class",h.chartArcsGaugeMax).style("text-anchor","middle").style("pointer-events","none"))},u.getGaugeLabelHeight=function(){return this.config.gauge_label_show?20:0},u.initRegion=function(){var t=this;t.region=t.main.append("g").attr("clip-path",t.clipPath).attr("class",h.regions)},u.updateRegion=function(t){var e=this,n=e.config;e.region.style("visibility",e.hasArcType()?"hidden":"visible"),e.mainRegion=e.main.select("."+h.regions).selectAll("."+h.region).data(n.regions),e.mainRegion.enter().append("g").append("rect").style("fill-opacity",0),e.mainRegion.attr("class",e.classRegion.bind(e)),e.mainRegion.exit().transition().duration(t).style("opacity",0).remove()},u.redrawRegion=function(t){var e=this,n=e.mainRegion.selectAll("rect").each(function(){var t=e.d3.select(this.parentNode).datum();e.d3.select(this).datum(t)}),i=e.regionX.bind(e),r=e.regionY.bind(e),a=e.regionWidth.bind(e),o=e.regionHeight.bind(e);return[(t?n.transition():n).attr("x",i).attr("y",r).attr("width",a).attr("height",o).style("fill-opacity",function(t){return d(t.opacity)?t.opacity:.1})]},u.regionX=function(t){var e,n=this,i=n.config,r="y"===t.axis?n.y:n.y2;return e="y"===t.axis||"y2"===t.axis?i.axis_rotated&&"start"in t?r(t.start):0:i.axis_rotated?0:"start"in t?n.x(n.isTimeSeries()?n.parseDate(t.start):t.start):0},u.regionY=function(t){var e,n=this,i=n.config,r="y"===t.axis?n.y:n.y2;return e="y"===t.axis||"y2"===t.axis?i.axis_rotated?0:"end"in t?r(t.end):0:i.axis_rotated&&"start"in t?n.x(n.isTimeSeries()?n.parseDate(t.start):t.start):0},u.regionWidth=function(t){var e,n=this,i=n.config,r=n.regionX(t),a="y"===t.axis?n.y:n.y2;return e="y"===t.axis||"y2"===t.axis?i.axis_rotated&&"end"in t?a(t.end):n.width:i.axis_rotated?n.width:"end"in t?n.x(n.isTimeSeries()?n.parseDate(t.end):t.end):n.width,e<r?0:e-r},u.regionHeight=function(t){var e,n=this,i=n.config,r=this.regionY(t),a="y"===t.axis?n.y:n.y2;return e="y"===t.axis||"y2"===t.axis?i.axis_rotated?n.height:"start"in t?a(t.start):n.height:i.axis_rotated&&"end"in t?n.x(n.isTimeSeries()?n.parseDate(t.end):t.end):n.height,e<r?0:e-r},u.isRegionOnX=function(t){return!t.axis||"x"===t.axis},u.drag=function(t){var e,n,i,r,a,o,s,u,c=this,l=c.config,d=c.main,f=c.d3;c.hasArcType()||l.data_selection_enabled&&(l.zoom_enabled&&!c.zoom.altDomain||l.data_selection_multiple&&(e=c.dragStart[0],n=c.dragStart[1],i=t[0],r=t[1],a=Math.min(e,i),o=Math.max(e,i),s=l.data_selection_grouped?c.margin.top:Math.min(n,r),u=l.data_selection_grouped?c.height:Math.max(n,r),d.select("."+h.dragarea).attr("x",a).attr("y",s).attr("width",o-a).attr("height",u-s),d.selectAll("."+h.shapes).selectAll("."+h.shape).filter(function(t){return l.data_selection_isselectable(t)}).each(function(t,e){var n,i,r,l,d,p,g=f.select(this),v=g.classed(h.SELECTED),m=g.classed(h.INCLUDED),y=!1;if(g.classed(h.circle))n=1*g.attr("cx"),i=1*g.attr("cy"),d=c.togglePoint,y=a<n&&n<o&&s<i&&i<u;else{if(!g.classed(h.bar))return;p=A(this),n=p.x,i=p.y,r=p.width,l=p.height,d=c.togglePath,y=!(o<n||n+r<a||u<i||i+l<s)}y^m&&(g.classed(h.INCLUDED,!m),g.classed(h.SELECTED,!v),d.call(c,!v,g,t,e))})))},u.dragstart=function(t){var e=this,n=e.config;e.hasArcType()||n.data_selection_enabled&&(e.dragStart=t,e.main.select("."+h.chart).append("rect").attr("class",h.dragarea).style("opacity",.1),e.dragging=!0)},u.dragend=function(){var t=this,e=t.config;t.hasArcType()||e.data_selection_enabled&&(t.main.select("."+h.dragarea).transition().duration(100).style("opacity",0).remove(),t.main.selectAll("."+h.shape).classed(h.INCLUDED,!1),t.dragging=!1)},u.selectPoint=function(t,e,n){var i=this,r=i.config,a=(r.axis_rotated?i.circleY:i.circleX).bind(i),o=(r.axis_rotated?i.circleX:i.circleY).bind(i),s=i.pointSelectR.bind(i);r.data_onselected.call(i.api,e,t.node()),i.main.select("."+h.selectedCircles+i.getTargetSelectorSuffix(e.id)).selectAll("."+h.selectedCircle+"-"+n).data([e]).enter().append("circle").attr("class",function(){return i.generateClass(h.selectedCircle,n)}).attr("cx",a).attr("cy",o).attr("stroke",function(){return i.color(e)}).attr("r",function(t){return 1.4*i.pointSelectR(t)}).transition().duration(100).attr("r",s)},u.unselectPoint=function(t,e,n){var i=this;i.config.data_onunselected.call(i.api,e,t.node()),i.main.select("."+h.selectedCircles+i.getTargetSelectorSuffix(e.id)).selectAll("."+h.selectedCircle+"-"+n).transition().duration(100).attr("r",0).remove()},u.togglePoint=function(t,e,n,i){t?this.selectPoint(e,n,i):this.unselectPoint(e,n,i)},u.selectPath=function(t,e){var n=this;n.config.data_onselected.call(n,e,t.node()),n.config.interaction_brighten&&t.transition().duration(100).style("fill",function(){return n.d3.rgb(n.color(e)).brighter(.75)})},u.unselectPath=function(t,e){var n=this;n.config.data_onunselected.call(n,e,t.node()),n.config.interaction_brighten&&t.transition().duration(100).style("fill",function(){return n.color(e)})},u.togglePath=function(t,e,n,i){t?this.selectPath(e,n,i):this.unselectPath(e,n,i)},u.getToggle=function(t,e){var n,i=this;return"circle"===t.nodeName?n=i.isStepType(e)?function(){}:i.togglePoint:"path"===t.nodeName&&(n=i.togglePath),n},u.toggleShape=function(t,e,n){var i=this,r=i.d3,a=i.config,o=r.select(t),s=o.classed(h.SELECTED),u=i.getToggle(t,e).bind(i);a.data_selection_enabled&&a.data_selection_isselectable(e)&&(a.data_selection_multiple||i.main.selectAll("."+h.shapes+(a.data_selection_grouped?i.getTargetSelectorSuffix(e.id):"")).selectAll("."+h.shape).each(function(t,e){var n=r.select(this);n.classed(h.SELECTED)&&u(!1,n.classed(h.SELECTED,!1),t,e)}),o.classed(h.SELECTED,!s),u(!s,o,e,n))},u.initBrush=function(){var t=this,e=t.d3;t.brush=e.svg.brush().on("brush",function(){t.redrawForBrush()}),t.brush.update=function(){return t.context&&t.context.select("."+h.brush).call(this),this},t.brush.scale=function(e){return t.config.axis_rotated?this.y(e):this.x(e)}},u.initSubchart=function(){var t=this,e=t.config,n=t.context=t.svg.append("g").attr("transform",t.getTranslate("context")),i=e.subchart_show?"visible":"hidden";n.style("visibility",i),n.append("g").attr("clip-path",t.clipPathForSubchart).attr("class",h.chart),n.select("."+h.chart).append("g").attr("class",h.chartBars),n.select("."+h.chart).append("g").attr("class",h.chartLines),n.append("g").attr("clip-path",t.clipPath).attr("class",h.brush).call(t.brush),t.axes.subx=n.append("g").attr("class",h.axisX).attr("transform",t.getTranslate("subx")).attr("clip-path",e.axis_rotated?"":t.clipPathForXAxis).style("visibility",e.subchart_axis_x_show?i:"hidden")},u.updateTargetsForSubchart=function(t){var e,n,i,r,a=this,o=a.context,s=a.config,u=a.classChartBar.bind(a),c=a.classBars.bind(a),l=a.classChartLine.bind(a),d=a.classLines.bind(a),f=a.classAreas.bind(a);s.subchart_show&&(r=o.select("."+h.chartBars).selectAll("."+h.chartBar).data(t).attr("class",u),i=r.enter().append("g").style("opacity",0).attr("class",u),i.append("g").attr("class",c),n=o.select("."+h.chartLines).selectAll("."+h.chartLine).data(t).attr("class",l),e=n.enter().append("g").style("opacity",0).attr("class",l),e.append("g").attr("class",d),e.append("g").attr("class",f),o.selectAll("."+h.brush+" rect").attr(s.axis_rotated?"width":"height",s.axis_rotated?a.width2:a.height2))},u.updateBarForSubchart=function(t){var e=this;e.contextBar=e.context.selectAll("."+h.bars).selectAll("."+h.bar).data(e.barData.bind(e)),e.contextBar.enter().append("path").attr("class",e.classBar.bind(e)).style("stroke","none").style("fill",e.color),e.contextBar.style("opacity",e.initialOpacity.bind(e)),e.contextBar.exit().transition().duration(t).style("opacity",0).remove()},u.redrawBarForSubchart=function(t,e,n){(e?this.contextBar.transition(Math.random().toString()).duration(n):this.contextBar).attr("d",t).style("opacity",1);
},u.updateLineForSubchart=function(t){var e=this;e.contextLine=e.context.selectAll("."+h.lines).selectAll("."+h.line).data(e.lineData.bind(e)),e.contextLine.enter().append("path").attr("class",e.classLine.bind(e)).style("stroke",e.color),e.contextLine.style("opacity",e.initialOpacity.bind(e)),e.contextLine.exit().transition().duration(t).style("opacity",0).remove()},u.redrawLineForSubchart=function(t,e,n){(e?this.contextLine.transition(Math.random().toString()).duration(n):this.contextLine).attr("d",t).style("opacity",1)},u.updateAreaForSubchart=function(t){var e=this,n=e.d3;e.contextArea=e.context.selectAll("."+h.areas).selectAll("."+h.area).data(e.lineData.bind(e)),e.contextArea.enter().append("path").attr("class",e.classArea.bind(e)).style("fill",e.color).style("opacity",function(){return e.orgAreaOpacity=+n.select(this).style("opacity"),0}),e.contextArea.style("opacity",0),e.contextArea.exit().transition().duration(t).style("opacity",0).remove()},u.redrawAreaForSubchart=function(t,e,n){(e?this.contextArea.transition(Math.random().toString()).duration(n):this.contextArea).attr("d",t).style("fill",this.color).style("opacity",this.orgAreaOpacity)},u.redrawSubchart=function(t,e,n,i,r,a,o){var s,u,c,l=this,h=l.d3,d=l.config;l.context.style("visibility",d.subchart_show?"visible":"hidden"),d.subchart_show&&(h.event&&"zoom"===h.event.type&&l.brush.extent(l.x.orgDomain()).update(),t&&(l.brush.empty()||l.brush.extent(l.x.orgDomain()).update(),s=l.generateDrawArea(r,!0),u=l.generateDrawBar(a,!0),c=l.generateDrawLine(o,!0),l.updateBarForSubchart(n),l.updateLineForSubchart(n),l.updateAreaForSubchart(n),l.redrawBarForSubchart(u,n,n),l.redrawLineForSubchart(c,n,n),l.redrawAreaForSubchart(s,n,n)))},u.redrawForBrush=function(){var t=this,e=t.x;t.redraw({withTransition:!1,withY:t.config.zoom_rescale,withSubchart:!1,withUpdateXDomain:!0,withDimension:!1}),t.config.subchart_onbrush.call(t.api,e.orgDomain())},u.transformContext=function(t,e){var n,i=this;e&&e.axisSubX?n=e.axisSubX:(n=i.context.select("."+h.axisX),t&&(n=n.transition())),i.context.attr("transform",i.getTranslate("context")),n.attr("transform",i.getTranslate("subx"))},u.getDefaultExtent=function(){var t=this,e=t.config,n=f(e.axis_x_extent)?e.axis_x_extent(t.getXDomain(t.data.targets)):e.axis_x_extent;return t.isTimeSeries()&&(n=[t.parseDate(n[0]),t.parseDate(n[1])]),n},u.initZoom=function(){var t,e=this,n=e.d3,i=e.config;e.zoom=n.behavior.zoom().on("zoomstart",function(){t=n.event.sourceEvent,e.zoom.altDomain=n.event.sourceEvent.altKey?e.x.orgDomain():null,i.zoom_onzoomstart.call(e.api,n.event.sourceEvent)}).on("zoom",function(){e.redrawForZoom.call(e)}).on("zoomend",function(){var r=n.event.sourceEvent;r&&t.clientX===r.clientX&&t.clientY===r.clientY||(e.redrawEventRect(),e.updateZoom(),i.zoom_onzoomend.call(e.api,e.x.orgDomain()))}),e.zoom.scale=function(t){return i.axis_rotated?this.y(t):this.x(t)},e.zoom.orgScaleExtent=function(){var t=i.zoom_extent?i.zoom_extent:[1,10];return[t[0],Math.max(e.getMaxDataCount()/t[1],t[1])]},e.zoom.updateScaleExtent=function(){var t=x(e.x.orgDomain())/x(e.getZoomDomain()),n=this.orgScaleExtent();return this.scaleExtent([n[0]*t,n[1]*t]),this}},u.getZoomDomain=function(){var t=this,e=t.config,n=t.d3,i=n.min([t.orgXDomain[0],e.zoom_x_min]),r=n.max([t.orgXDomain[1],e.zoom_x_max]);return[i,r]},u.updateZoom=function(){var t=this,e=t.config.zoom_enabled?t.zoom:function(){};t.main.select("."+h.zoomRect).call(e).on("dblclick.zoom",null),t.main.selectAll("."+h.eventRect).call(e).on("dblclick.zoom",null)},u.redrawForZoom=function(){var t=this,e=t.d3,n=t.config,i=t.zoom,r=t.x;if(n.zoom_enabled&&0!==t.filterTargetsToShow(t.data.targets).length){if("mousemove"===e.event.sourceEvent.type&&i.altDomain)return r.domain(i.altDomain),void i.scale(r).updateScaleExtent();t.isCategorized()&&r.orgDomain()[0]===t.orgXDomain[0]&&r.domain([t.orgXDomain[0]-1e-10,r.orgDomain()[1]]),t.redraw({withTransition:!1,withY:n.zoom_rescale,withSubchart:!1,withEventRect:!1,withDimension:!1}),"mousemove"===e.event.sourceEvent.type&&(t.cancelClick=!0),n.zoom_onzoom.call(t.api,r.orgDomain())}},u.generateColor=function(){var t=this,e=t.config,n=t.d3,i=e.data_colors,r=b(e.color_pattern)?e.color_pattern:n.scale.category10().range(),a=e.data_color,o=[];return function(t){var e,n=t.id||t.data&&t.data.id||t;return i[n]instanceof Function?e=i[n](t):i[n]?e=i[n]:(o.indexOf(n)<0&&o.push(n),e=r[o.indexOf(n)%r.length],i[n]=e),a instanceof Function?a(e,t):e}},u.generateLevelColor=function(){var t=this,e=t.config,n=e.color_pattern,i=e.color_threshold,r="value"===i.unit,a=i.values&&i.values.length?i.values:[],o=i.max||100;return b(e.color_threshold)?function(t){var e,i,s=n[n.length-1];for(e=0;e<a.length;e++)if(i=r?t:100*t/o,i<a[e]){s=n[e];break}return s}:null},u.getYFormat=function(t){var e=this,n=t&&!e.hasType("gauge")?e.defaultArcValueFormat:e.yFormat,i=t&&!e.hasType("gauge")?e.defaultArcValueFormat:e.y2Format;return function(t,r,a){var o="y2"===e.axis.getId(a)?i:n;return o.call(e,t,r)}},u.yFormat=function(t){var e=this,n=e.config,i=n.axis_y_tick_format?n.axis_y_tick_format:e.defaultValueFormat;return i(t)},u.y2Format=function(t){var e=this,n=e.config,i=n.axis_y2_tick_format?n.axis_y2_tick_format:e.defaultValueFormat;return i(t)},u.defaultValueFormat=function(t){return d(t)?+t:""},u.defaultArcValueFormat=function(t,e){return(100*e).toFixed(1)+"%"},u.dataLabelFormat=function(t){var e,n=this,i=n.config.data_labels,r=function(t){return d(t)?+t:""};return e="function"==typeof i.format?i.format:"object"==typeof i.format?i.format[t]?i.format[t]===!0?r:i.format[t]:function(){return""}:r},u.hasCaches=function(t){for(var e=0;e<t.length;e++)if(!(t[e]in this.cache))return!1;return!0},u.addCache=function(t,e){this.cache[t]=this.cloneTarget(e)},u.getCaches=function(t){var e,n=[];for(e=0;e<t.length;e++)t[e]in this.cache&&n.push(this.cloneTarget(this.cache[t[e]]));return n};var h=u.CLASS={target:"c3-target",chart:"c3-chart",chartLine:"c3-chart-line",chartLines:"c3-chart-lines",chartBar:"c3-chart-bar",chartBars:"c3-chart-bars",chartText:"c3-chart-text",chartTexts:"c3-chart-texts",chartArc:"c3-chart-arc",chartArcs:"c3-chart-arcs",chartArcsTitle:"c3-chart-arcs-title",chartArcsBackground:"c3-chart-arcs-background",chartArcsGaugeUnit:"c3-chart-arcs-gauge-unit",chartArcsGaugeMax:"c3-chart-arcs-gauge-max",chartArcsGaugeMin:"c3-chart-arcs-gauge-min",selectedCircle:"c3-selected-circle",selectedCircles:"c3-selected-circles",eventRect:"c3-event-rect",eventRects:"c3-event-rects",eventRectsSingle:"c3-event-rects-single",eventRectsMultiple:"c3-event-rects-multiple",zoomRect:"c3-zoom-rect",brush:"c3-brush",focused:"c3-focused",defocused:"c3-defocused",region:"c3-region",regions:"c3-regions",title:"c3-title",tooltipContainer:"c3-tooltip-container",tooltip:"c3-tooltip",tooltipName:"c3-tooltip-name",shape:"c3-shape",shapes:"c3-shapes",line:"c3-line",lines:"c3-lines",bar:"c3-bar",bars:"c3-bars",circle:"c3-circle",circles:"c3-circles",arc:"c3-arc",arcs:"c3-arcs",area:"c3-area",areas:"c3-areas",empty:"c3-empty",text:"c3-text",texts:"c3-texts",gaugeValue:"c3-gauge-value",grid:"c3-grid",gridLines:"c3-grid-lines",xgrid:"c3-xgrid",xgrids:"c3-xgrids",xgridLine:"c3-xgrid-line",xgridLines:"c3-xgrid-lines",xgridFocus:"c3-xgrid-focus",ygrid:"c3-ygrid",ygrids:"c3-ygrids",ygridLine:"c3-ygrid-line",ygridLines:"c3-ygrid-lines",axis:"c3-axis",axisX:"c3-axis-x",axisXLabel:"c3-axis-x-label",axisY:"c3-axis-y",axisYLabel:"c3-axis-y-label",axisY2:"c3-axis-y2",axisY2Label:"c3-axis-y2-label",legendBackground:"c3-legend-background",legendItem:"c3-legend-item",legendItemEvent:"c3-legend-item-event",legendItemTile:"c3-legend-item-tile",legendItemHidden:"c3-legend-item-hidden",legendItemFocused:"c3-legend-item-focused",dragarea:"c3-dragarea",EXPANDED:"_expanded_",SELECTED:"_selected_",INCLUDED:"_included_"};u.generateClass=function(t,e){return" "+t+" "+t+this.getTargetSelectorSuffix(e)},u.classText=function(t){return this.generateClass(h.text,t.index)},u.classTexts=function(t){return this.generateClass(h.texts,t.id)},u.classShape=function(t){return this.generateClass(h.shape,t.index)},u.classShapes=function(t){return this.generateClass(h.shapes,t.id)},u.classLine=function(t){return this.classShape(t)+this.generateClass(h.line,t.id)},u.classLines=function(t){return this.classShapes(t)+this.generateClass(h.lines,t.id)},u.classCircle=function(t){return this.classShape(t)+this.generateClass(h.circle,t.index)},u.classCircles=function(t){return this.classShapes(t)+this.generateClass(h.circles,t.id)},u.classBar=function(t){return this.classShape(t)+this.generateClass(h.bar,t.index)},u.classBars=function(t){return this.classShapes(t)+this.generateClass(h.bars,t.id)},u.classArc=function(t){return this.classShape(t.data)+this.generateClass(h.arc,t.data.id)},u.classArcs=function(t){return this.classShapes(t.data)+this.generateClass(h.arcs,t.data.id)},u.classArea=function(t){return this.classShape(t)+this.generateClass(h.area,t.id)},u.classAreas=function(t){return this.classShapes(t)+this.generateClass(h.areas,t.id)},u.classRegion=function(t,e){return this.generateClass(h.region,e)+" "+("class"in t?t.class:"")},u.classEvent=function(t){return this.generateClass(h.eventRect,t.index)},u.classTarget=function(t){var e=this,n=e.config.data_classes[t],i="";return n&&(i=" "+h.target+"-"+n),e.generateClass(h.target,t)+i},u.classFocus=function(t){return this.classFocused(t)+this.classDefocused(t)},u.classFocused=function(t){return" "+(this.focusedTargetIds.indexOf(t.id)>=0?h.focused:"")},u.classDefocused=function(t){return" "+(this.defocusedTargetIds.indexOf(t.id)>=0?h.defocused:"")},u.classChartText=function(t){return h.chartText+this.classTarget(t.id)},u.classChartLine=function(t){return h.chartLine+this.classTarget(t.id)},u.classChartBar=function(t){return h.chartBar+this.classTarget(t.id)},u.classChartArc=function(t){return h.chartArc+this.classTarget(t.data.id)},u.getTargetSelectorSuffix=function(t){return t||0===t?("-"+t).replace(/[\s?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\]/g,"-"):""},u.selectorTarget=function(t,e){return(e||"")+"."+h.target+this.getTargetSelectorSuffix(t)},u.selectorTargets=function(t,e){var n=this;return t=t||[],t.length?t.map(function(t){return n.selectorTarget(t,e)}):null},u.selectorLegend=function(t){return"."+h.legendItem+this.getTargetSelectorSuffix(t)},u.selectorLegends=function(t){var e=this;return t&&t.length?t.map(function(t){return e.selectorLegend(t)}):null};var d=u.isValue=function(t){return t||0===t},f=u.isFunction=function(t){return"function"==typeof t},p=u.isString=function(t){return"string"==typeof t},g=u.isUndefined=function(t){return"undefined"==typeof t},v=u.isDefined=function(t){return"undefined"!=typeof t},m=u.ceil10=function(t){return 10*Math.ceil(t/10)},y=u.asHalfPixel=function(t){return Math.ceil(t)+.5},x=u.diffDomain=function(t){return t[1]-t[0]},_=u.isEmpty=function(t){return"undefined"==typeof t||null===t||p(t)&&0===t.length||"object"==typeof t&&0===Object.keys(t).length},b=u.notEmpty=function(t){return!u.isEmpty(t)},S=u.getOption=function(t,e,n){return v(t[e])?t[e]:n},T=u.hasValue=function(t,e){var n=!1;return Object.keys(t).forEach(function(i){t[i]===e&&(n=!0)}),n},w=u.sanitise=function(t){return"string"==typeof t?t.replace(/</g,"&lt;").replace(/>/g,"&gt;"):t},A=u.getPathBox=function(t){var e=t.getBoundingClientRect(),n=[t.pathSegList.getItem(0),t.pathSegList.getItem(1)],i=n[0].x,r=Math.min(n[0].y,n[1].y);return{x:i,y:r,width:e.width,height:e.height}};s.focus=function(t){var e,n=this.internal;t=n.mapToTargetIds(t),e=n.svg.selectAll(n.selectorTargets(t.filter(n.isTargetToShow,n))),this.revert(),this.defocus(),e.classed(h.focused,!0).classed(h.defocused,!1),n.hasArcType()&&n.expandArc(t),n.toggleFocusLegend(t,!0),n.focusedTargetIds=t,n.defocusedTargetIds=n.defocusedTargetIds.filter(function(e){return t.indexOf(e)<0})},s.defocus=function(t){var e,n=this.internal;t=n.mapToTargetIds(t),e=n.svg.selectAll(n.selectorTargets(t.filter(n.isTargetToShow,n))),e.classed(h.focused,!1).classed(h.defocused,!0),n.hasArcType()&&n.unexpandArc(t),n.toggleFocusLegend(t,!1),n.focusedTargetIds=n.focusedTargetIds.filter(function(e){return t.indexOf(e)<0}),n.defocusedTargetIds=t},s.revert=function(t){var e,n=this.internal;t=n.mapToTargetIds(t),e=n.svg.selectAll(n.selectorTargets(t)),e.classed(h.focused,!1).classed(h.defocused,!1),n.hasArcType()&&n.unexpandArc(t),n.config.legend_show&&(n.showLegend(t.filter(n.isLegendToShow.bind(n))),n.legend.selectAll(n.selectorLegends(t)).filter(function(){return n.d3.select(this).classed(h.legendItemFocused)}).classed(h.legendItemFocused,!1)),n.focusedTargetIds=[],n.defocusedTargetIds=[]},s.show=function(t,e){var n,i=this.internal;t=i.mapToTargetIds(t),e=e||{},i.removeHiddenTargetIds(t),n=i.svg.selectAll(i.selectorTargets(t)),n.transition().style("opacity",1,"important").call(i.endall,function(){n.style("opacity",null).style("opacity",1)}),e.withLegend&&i.showLegend(t),i.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0})},s.hide=function(t,e){var n,i=this.internal;t=i.mapToTargetIds(t),e=e||{},i.addHiddenTargetIds(t),n=i.svg.selectAll(i.selectorTargets(t)),n.transition().style("opacity",0,"important").call(i.endall,function(){n.style("opacity",null).style("opacity",0)}),e.withLegend&&i.hideLegend(t),i.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0})},s.toggle=function(t,e){var n=this,i=this.internal;i.mapToTargetIds(t).forEach(function(t){i.isTargetToShow(t)?n.hide(t,e):n.show(t,e)})},s.zoom=function(t){var e=this.internal;return t&&(e.isTimeSeries()&&(t=t.map(function(t){return e.parseDate(t)})),e.brush.extent(t),e.redraw({withUpdateXDomain:!0,withY:e.config.zoom_rescale}),e.config.zoom_onzoom.call(this,e.x.orgDomain())),e.brush.extent()},s.zoom.enable=function(t){var e=this.internal;e.config.zoom_enabled=t,e.updateAndRedraw()},s.unzoom=function(){var t=this.internal;t.brush.clear().update(),t.redraw({withUpdateXDomain:!0})},s.zoom.max=function(t){var e=this.internal,n=e.config,i=e.d3;return 0===t||t?void(n.zoom_x_max=i.max([e.orgXDomain[1],t])):n.zoom_x_max},s.zoom.min=function(t){var e=this.internal,n=e.config,i=e.d3;return 0===t||t?void(n.zoom_x_min=i.min([e.orgXDomain[0],t])):n.zoom_x_min},s.zoom.range=function(t){return arguments.length?(v(t.max)&&this.domain.max(t.max),void(v(t.min)&&this.domain.min(t.min))):{max:this.domain.max(),min:this.domain.min()}},s.load=function(t){var e=this.internal,n=e.config;return t.xs&&e.addXs(t.xs),"names"in t&&s.data.names.bind(this)(t.names),"classes"in t&&Object.keys(t.classes).forEach(function(e){n.data_classes[e]=t.classes[e]}),"categories"in t&&e.isCategorized()&&(n.axis_x_categories=t.categories),"axes"in t&&Object.keys(t.axes).forEach(function(e){n.data_axes[e]=t.axes[e]}),"colors"in t&&Object.keys(t.colors).forEach(function(e){n.data_colors[e]=t.colors[e]}),"cacheIds"in t&&e.hasCaches(t.cacheIds)?void e.load(e.getCaches(t.cacheIds),t.done):void("unload"in t?e.unload(e.mapToTargetIds("boolean"==typeof t.unload&&t.unload?null:t.unload),function(){e.loadFromArgs(t)}):e.loadFromArgs(t))},s.unload=function(t){var e=this.internal;t=t||{},t instanceof Array?t={ids:t}:"string"==typeof t&&(t={ids:[t]}),e.unload(e.mapToTargetIds(t.ids),function(){e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0}),t.done&&t.done()})},s.flow=function(t){var e,n,i,r,a,o,s,u,c=this.internal,l=[],h=c.getMaxDataCount(),f=0,p=0;if(t.json)n=c.convertJsonToData(t.json,t.keys);else if(t.rows)n=c.convertRowsToData(t.rows);else{if(!t.columns)return;n=c.convertColumnsToData(t.columns)}e=c.convertDataToTargets(n,!0),c.data.targets.forEach(function(t){var n,i,r=!1;for(n=0;n<e.length;n++)if(t.id===e[n].id){for(r=!0,t.values[t.values.length-1]&&(p=t.values[t.values.length-1].index+1),f=e[n].values.length,i=0;i<f;i++)e[n].values[i].index=p+i,c.isTimeSeries()||(e[n].values[i].x=p+i);t.values=t.values.concat(e[n].values),e.splice(n,1);break}r||l.push(t.id)}),c.data.targets.forEach(function(t){var e,n;for(e=0;e<l.length;e++)if(t.id===l[e])for(p=t.values[t.values.length-1].index+1,n=0;n<f;n++)t.values.push({id:t.id,index:p+n,x:c.isTimeSeries()?c.getOtherTargetX(p+n):p+n,value:null})}),c.data.targets.length&&e.forEach(function(t){var e,n=[];for(e=c.data.targets[0].values[0].index;e<p;e++)n.push({id:t.id,index:e,x:c.isTimeSeries()?c.getOtherTargetX(e):e,value:null});t.values.forEach(function(t){t.index+=p,c.isTimeSeries()||(t.x+=p)}),t.values=n.concat(t.values)}),c.data.targets=c.data.targets.concat(e),i=c.getMaxDataCount(),a=c.data.targets[0],o=a.values[0],v(t.to)?(f=0,u=c.isTimeSeries()?c.parseDate(t.to):t.to,a.values.forEach(function(t){t.x<u&&f++})):v(t.length)&&(f=t.length),h?1===h&&c.isTimeSeries()&&(s=(a.values[a.values.length-1].x-o.x)/2,r=[new Date(+o.x-s),new Date(+o.x+s)],c.updateXDomain(null,!0,!0,!1,r)):(s=c.isTimeSeries()?a.values.length>1?a.values[a.values.length-1].x-o.x:o.x-c.getXDomain(c.data.targets)[0]:1,r=[o.x-s,o.x],c.updateXDomain(null,!0,!0,!1,r)),c.updateTargets(c.data.targets),c.redraw({flow:{index:o.index,length:f,duration:d(t.duration)?t.duration:c.config.transition_duration,done:t.done,orgDataCount:h},withLegend:!0,withTransition:h>1,withTrimXDomain:!1,withUpdateXAxis:!0})},u.generateFlow=function(t){var e=this,n=e.config,i=e.d3;return function(){var r,a,o,s=t.targets,u=t.flow,c=t.drawBar,l=t.drawLine,d=t.drawArea,f=t.cx,p=t.cy,g=t.xv,v=t.xForText,m=t.yForText,y=t.duration,_=1,b=u.index,S=u.length,T=e.getValueOnIndex(e.data.targets[0].values,b),w=e.getValueOnIndex(e.data.targets[0].values,b+S),A=e.x.domain(),C=u.duration||y,E=u.done||function(){},P=e.generateWait(),L=e.xgrid||i.selectAll([]),M=e.xgridLines||i.selectAll([]),k=e.mainRegion||i.selectAll([]),I=e.mainText||i.selectAll([]),V=e.mainBar||i.selectAll([]),D=e.mainLine||i.selectAll([]),R=e.mainArea||i.selectAll([]),N=e.mainCircle||i.selectAll([]);e.flowing=!0,e.data.targets.forEach(function(t){t.values.splice(0,S)}),o=e.updateXDomain(s,!0,!0),e.updateXGrid&&e.updateXGrid(!0),u.orgDataCount?r=1===u.orgDataCount||(T&&T.x)===(w&&w.x)?e.x(A[0])-e.x(o[0]):e.isTimeSeries()?e.x(A[0])-e.x(o[0]):e.x(T.x)-e.x(w.x):1!==e.data.targets[0].values.length?r=e.x(A[0])-e.x(o[0]):e.isTimeSeries()?(T=e.getValueOnIndex(e.data.targets[0].values,0),w=e.getValueOnIndex(e.data.targets[0].values,e.data.targets[0].values.length-1),r=e.x(T.x)-e.x(w.x)):r=x(o)/2,_=x(A)/x(o),a="translate("+r+",0) scale("+_+",1)",e.hideXGridFocus(),i.transition().ease("linear").duration(C).each(function(){P.add(e.axes.x.transition().call(e.xAxis)),P.add(V.transition().attr("transform",a)),P.add(D.transition().attr("transform",a)),P.add(R.transition().attr("transform",a)),P.add(N.transition().attr("transform",a)),P.add(I.transition().attr("transform",a)),P.add(k.filter(e.isRegionOnX).transition().attr("transform",a)),P.add(L.transition().attr("transform",a)),P.add(M.transition().attr("transform",a))}).call(P,function(){var t,i=[],r=[],a=[];if(S){for(t=0;t<S;t++)i.push("."+h.shape+"-"+(b+t)),r.push("."+h.text+"-"+(b+t)),a.push("."+h.eventRect+"-"+(b+t));e.svg.selectAll("."+h.shapes).selectAll(i).remove(),e.svg.selectAll("."+h.texts).selectAll(r).remove(),e.svg.selectAll("."+h.eventRects).selectAll(a).remove(),e.svg.select("."+h.xgrid).remove()}L.attr("transform",null).attr(e.xgridAttr),M.attr("transform",null),M.select("line").attr("x1",n.axis_rotated?0:g).attr("x2",n.axis_rotated?e.width:g),M.select("text").attr("x",n.axis_rotated?e.width:0).attr("y",g),V.attr("transform",null).attr("d",c),D.attr("transform",null).attr("d",l),R.attr("transform",null).attr("d",d),N.attr("transform",null).attr("cx",f).attr("cy",p),I.attr("transform",null).attr("x",v).attr("y",m).style("fill-opacity",e.opacityForText.bind(e)),k.attr("transform",null),k.select("rect").filter(e.isRegionOnX).attr("x",e.regionX.bind(e)).attr("width",e.regionWidth.bind(e)),n.interaction_enabled&&e.redrawEventRect(),E(),e.flowing=!1})}},s.selected=function(t){var e=this.internal,n=e.d3;return n.merge(e.main.selectAll("."+h.shapes+e.getTargetSelectorSuffix(t)).selectAll("."+h.shape).filter(function(){return n.select(this).classed(h.SELECTED)}).map(function(t){return t.map(function(t){var e=t.__data__;return e.data?e.data:e})}))},s.select=function(t,e,n){var i=this.internal,r=i.d3,a=i.config;a.data_selection_enabled&&i.main.selectAll("."+h.shapes).selectAll("."+h.shape).each(function(o,s){var u=r.select(this),c=o.data?o.data.id:o.id,l=i.getToggle(this,o).bind(i),d=a.data_selection_grouped||!t||t.indexOf(c)>=0,f=!e||e.indexOf(s)>=0,p=u.classed(h.SELECTED);u.classed(h.line)||u.classed(h.area)||(d&&f?a.data_selection_isselectable(o)&&!p&&l(!0,u.classed(h.SELECTED,!0),o,s):v(n)&&n&&p&&l(!1,u.classed(h.SELECTED,!1),o,s))})},s.unselect=function(t,e){var n=this.internal,i=n.d3,r=n.config;r.data_selection_enabled&&n.main.selectAll("."+h.shapes).selectAll("."+h.shape).each(function(a,o){var s=i.select(this),u=a.data?a.data.id:a.id,c=n.getToggle(this,a).bind(n),l=r.data_selection_grouped||!t||t.indexOf(u)>=0,d=!e||e.indexOf(o)>=0,f=s.classed(h.SELECTED);s.classed(h.line)||s.classed(h.area)||l&&d&&r.data_selection_isselectable(a)&&f&&c(!1,s.classed(h.SELECTED,!1),a,o)})},s.transform=function(t,e){var n=this.internal,i=["pie","donut"].indexOf(t)>=0?{withTransform:!0}:null;n.transformTo(e,t,i)},u.transformTo=function(t,e,n){var i=this,r=!i.hasArcType(),a=n||{withTransitionForAxis:r};a.withTransitionForTransform=!1,i.transiting=!1,i.setTargetType(t,e),i.updateTargets(i.data.targets),i.updateAndRedraw(a)},s.groups=function(t){var e=this.internal,n=e.config;return g(t)?n.data_groups:(n.data_groups=t,e.redraw(),n.data_groups)},s.xgrids=function(t){var e=this.internal,n=e.config;return t?(n.grid_x_lines=t,e.redrawWithoutRescale(),n.grid_x_lines):n.grid_x_lines},s.xgrids.add=function(t){var e=this.internal;return this.xgrids(e.config.grid_x_lines.concat(t?t:[]))},s.xgrids.remove=function(t){var e=this.internal;e.removeGridLines(t,!0)},s.ygrids=function(t){var e=this.internal,n=e.config;return t?(n.grid_y_lines=t,e.redrawWithoutRescale(),n.grid_y_lines):n.grid_y_lines},s.ygrids.add=function(t){var e=this.internal;return this.ygrids(e.config.grid_y_lines.concat(t?t:[]))},s.ygrids.remove=function(t){var e=this.internal;e.removeGridLines(t,!1)},s.regions=function(t){var e=this.internal,n=e.config;return t?(n.regions=t,e.redrawWithoutRescale(),n.regions):n.regions},s.regions.add=function(t){var e=this.internal,n=e.config;return t?(n.regions=n.regions.concat(t),e.redrawWithoutRescale(),n.regions):n.regions},s.regions.remove=function(t){var e,n,i,r=this.internal,a=r.config;return t=t||{},e=r.getOption(t,"duration",a.transition_duration),n=r.getOption(t,"classes",[h.region]),i=r.main.select("."+h.regions).selectAll(n.map(function(t){return"."+t})),(e?i.transition().duration(e):i).style("opacity",0).remove(),a.regions=a.regions.filter(function(t){var e=!1;return!t.class||(t.class.split(" ").forEach(function(t){n.indexOf(t)>=0&&(e=!0)}),!e)}),a.regions},s.data=function(t){var e=this.internal.data.targets;return"undefined"==typeof t?e:e.filter(function(e){return[].concat(t).indexOf(e.id)>=0})},s.data.shown=function(t){return this.internal.filterTargetsToShow(this.data(t))},s.data.values=function(t){var e,n=null;return t&&(e=this.data(t),n=e[0]?e[0].values.map(function(t){return t.value}):null),n},s.data.names=function(t){return this.internal.clearLegendItemTextBoxCache(),this.internal.updateDataAttributes("names",t)},s.data.colors=function(t){return this.internal.updateDataAttributes("colors",t)},s.data.axes=function(t){return this.internal.updateDataAttributes("axes",t)},s.category=function(t,e){var n=this.internal,i=n.config;return arguments.length>1&&(i.axis_x_categories[t]=e,n.redraw()),i.axis_x_categories[t]},s.categories=function(t){var e=this.internal,n=e.config;return arguments.length?(n.axis_x_categories=t,e.redraw(),n.axis_x_categories):n.axis_x_categories},s.color=function(t){var e=this.internal;return e.color(t)},s.x=function(t){var e=this.internal;return arguments.length&&(e.updateTargetX(e.data.targets,t),e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})),e.data.xs},s.xs=function(t){var e=this.internal;return arguments.length&&(e.updateTargetXs(e.data.targets,t),e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})),e.data.xs},s.axis=function(){},s.axis.labels=function(t){var e=this.internal;arguments.length&&(Object.keys(t).forEach(function(n){e.axis.setLabelText(n,t[n])}),e.axis.updateLabels())},s.axis.max=function(t){var e=this.internal,n=e.config;return arguments.length?("object"==typeof t?(d(t.x)&&(n.axis_x_max=t.x),d(t.y)&&(n.axis_y_max=t.y),d(t.y2)&&(n.axis_y2_max=t.y2)):n.axis_y_max=n.axis_y2_max=t,void e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})):{x:n.axis_x_max,y:n.axis_y_max,y2:n.axis_y2_max}},s.axis.min=function(t){var e=this.internal,n=e.config;return arguments.length?("object"==typeof t?(d(t.x)&&(n.axis_x_min=t.x),d(t.y)&&(n.axis_y_min=t.y),d(t.y2)&&(n.axis_y2_min=t.y2)):n.axis_y_min=n.axis_y2_min=t,void e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})):{x:n.axis_x_min,y:n.axis_y_min,y2:n.axis_y2_min}},s.axis.range=function(t){return arguments.length?(v(t.max)&&this.axis.max(t.max),void(v(t.min)&&this.axis.min(t.min))):{max:this.axis.max(),min:this.axis.min()}},s.legend=function(){},s.legend.show=function(t){var e=this.internal;e.showLegend(e.mapToTargetIds(t)),e.updateAndRedraw({withLegend:!0})},s.legend.hide=function(t){var e=this.internal;e.hideLegend(e.mapToTargetIds(t)),e.updateAndRedraw({withLegend:!0})},s.resize=function(t){var e=this.internal,n=e.config;n.size_width=t?t.width:null,n.size_height=t?t.height:null,this.flush()},s.flush=function(){var t=this.internal;t.updateAndRedraw({withLegend:!0,withTransition:!1,withTransitionForTransform:!1})},s.destroy=function(){var e=this.internal;if(t.clearInterval(e.intervalForObserveInserted),void 0!==e.resizeTimeout&&t.clearTimeout(e.resizeTimeout),t.detachEvent)t.detachEvent("onresize",e.resizeFunction);else if(t.removeEventListener)t.removeEventListener("resize",e.resizeFunction);else{var n=t.onresize;n&&n.add&&n.remove&&n.remove(e.resizeFunction)}return e.selectChart.classed("c3",!1).html(""),Object.keys(e).forEach(function(t){e[t]=null}),null},s.tooltip=function(){},s.tooltip.show=function(t){var e,n,i=this.internal;t.mouse&&(n=t.mouse),t.data?i.isMultipleX()?(n=[i.x(t.data.x),i.getYScale(t.data.id)(t.data.value)],e=null):e=d(t.data.index)?t.data.index:i.getIndexByX(t.data.x):"undefined"!=typeof t.x?e=i.getIndexByX(t.x):"undefined"!=typeof t.index&&(e=t.index),i.dispatchEvent("mouseover",e,n),i.dispatchEvent("mousemove",e,n),i.config.tooltip_onshow.call(i,t.data)},s.tooltip.hide=function(){this.internal.dispatchEvent("mouseout",0),this.internal.config.tooltip_onhide.call(this)};var C;u.isSafari=function(){var e=t.navigator.userAgent;return e.indexOf("Safari")>=0&&e.indexOf("Chrome")<0},u.isChrome=function(){var e=t.navigator.userAgent;return e.indexOf("Chrome")>=0},Function.prototype.bind||(Function.prototype.bind=function(t){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),n=this,i=function(){},r=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))};return i.prototype=this.prototype,r.prototype=new i,r}),function(){"SVGPathSeg"in t||(t.SVGPathSeg=function(t,e,n){this.pathSegType=t,this.pathSegTypeAsLetter=e,this._owningPathSegList=n},SVGPathSeg.PATHSEG_UNKNOWN=0,SVGPathSeg.PATHSEG_CLOSEPATH=1,SVGPathSeg.PATHSEG_MOVETO_ABS=2,SVGPathSeg.PATHSEG_MOVETO_REL=3,SVGPathSeg.PATHSEG_LINETO_ABS=4,SVGPathSeg.PATHSEG_LINETO_REL=5,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,SVGPathSeg.PATHSEG_ARC_ABS=10,SVGPathSeg.PATHSEG_ARC_REL=11,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},t.SVGPathSegClosePath=function(t){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CLOSEPATH,"z",t)},SVGPathSegClosePath.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},SVGPathSegClosePath.prototype.clone=function(){return new SVGPathSegClosePath((void 0))},t.SVGPathSegMovetoAbs=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_ABS,"M",t),this._x=e,this._y=n},SVGPathSegMovetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoAbs.prototype.clone=function(){return new SVGPathSegMovetoAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegMovetoRel=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_MOVETO_REL,"m",t),this._x=e,this._y=n},SVGPathSegMovetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegMovetoRel.prototype.clone=function(){return new SVGPathSegMovetoRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoAbs=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_ABS,"L",t),this._x=e,this._y=n},SVGPathSegLinetoAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoAbs.prototype.clone=function(){return new SVGPathSegLinetoAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoRel=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_REL,"l",t),this._x=e,this._y=n},SVGPathSegLinetoRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegLinetoRel.prototype.clone=function(){return new SVGPathSegLinetoRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoCubicAbs=function(t,e,n,i,r,a,o){
SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",t),this._x=e,this._y=n,this._x1=i,this._y1=r,this._x2=a,this._y2=o},SVGPathSegCurvetoCubicAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicAbs((void 0),this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoCubicRel=function(t,e,n,i,r,a,o){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",t),this._x=e,this._y=n,this._x1=i,this._y1=r,this._x2=a,this._y2=o},SVGPathSegCurvetoCubicRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicRel((void 0),this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoQuadraticAbs=function(t,e,n,i,r){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",t),this._x=e,this._y=n,this._x1=i,this._y1=r},SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticAbs((void 0),this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoQuadraticRel=function(t,e,n,i,r){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",t),this._x=e,this._y=n,this._x1=i,this._y1=r},SVGPathSegCurvetoQuadraticRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticRel((void 0),this._x,this._y,this._x1,this._y1)},Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegArcAbs=function(t,e,n,i,r,a,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_ABS,"A",t),this._x=e,this._y=n,this._r1=i,this._r2=r,this._angle=a,this._largeArcFlag=o,this._sweepFlag=s},SVGPathSegArcAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcAbs.prototype.clone=function(){return new SVGPathSegArcAbs((void 0),this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegArcRel=function(t,e,n,i,r,a,o,s){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_ARC_REL,"a",t),this._x=e,this._y=n,this._r1=i,this._r2=r,this._angle=a,this._largeArcFlag=o,this._sweepFlag=s},SVGPathSegArcRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},SVGPathSegArcRel.prototype.clone=function(){return new SVGPathSegArcRel((void 0),this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoHorizontalAbs=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",t),this._x=e},SVGPathSegLinetoHorizontalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new SVGPathSegLinetoHorizontalAbs((void 0),this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoHorizontalRel=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",t),this._x=e},SVGPathSegLinetoHorizontalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new SVGPathSegLinetoHorizontalRel((void 0),this._x)},Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoVerticalAbs=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",t),this._y=e},SVGPathSegLinetoVerticalAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new SVGPathSegLinetoVerticalAbs((void 0),this._y)},Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegLinetoVerticalRel=function(t,e){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",t),this._y=e},SVGPathSegLinetoVerticalRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new SVGPathSegLinetoVerticalRel((void 0),this._y)},Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoCubicSmoothAbs=function(t,e,n,i,r){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",t),this._x=e,this._y=n,this._x2=i,this._y2=r},SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothAbs((void 0),this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoCubicSmoothRel=function(t,e,n,i,r){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",t),this._x=e,this._y=n,this._x2=i,this._y2=r},SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoCubicSmoothRel((void 0),this._x,this._y,this._x2,this._y2)},Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoQuadraticSmoothAbs=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",t),this._x=e,this._y=n},SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothAbs((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),t.SVGPathSegCurvetoQuadraticSmoothRel=function(t,e,n){SVGPathSeg.call(this,SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",t),this._x=e,this._y=n},SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(SVGPathSeg.prototype),SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new SVGPathSegCurvetoQuadraticSmoothRel((void 0),this._x,this._y)},Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new SVGPathSegClosePath((void 0))},SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(t,e){return new SVGPathSegMovetoAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegMovetoRel=function(t,e){return new SVGPathSegMovetoRel((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(t,e){return new SVGPathSegLinetoAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegLinetoRel=function(t,e){return new SVGPathSegLinetoRel((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(t,e,n,i,r,a){return new SVGPathSegCurvetoCubicAbs((void 0),t,e,n,i,r,a)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(t,e,n,i,r,a){return new SVGPathSegCurvetoCubicRel((void 0),t,e,n,i,r,a)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(t,e,n,i){return new SVGPathSegCurvetoQuadraticAbs((void 0),t,e,n,i)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(t,e,n,i){return new SVGPathSegCurvetoQuadraticRel((void 0),t,e,n,i)},SVGPathElement.prototype.createSVGPathSegArcAbs=function(t,e,n,i,r,a,o){return new SVGPathSegArcAbs((void 0),t,e,n,i,r,a,o)},SVGPathElement.prototype.createSVGPathSegArcRel=function(t,e,n,i,r,a,o){return new SVGPathSegArcRel((void 0),t,e,n,i,r,a,o)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(t){return new SVGPathSegLinetoHorizontalAbs((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(t){return new SVGPathSegLinetoHorizontalRel((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(t){return new SVGPathSegLinetoVerticalAbs((void 0),t)},SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(t){return new SVGPathSegLinetoVerticalRel((void 0),t)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(t,e,n,i){return new SVGPathSegCurvetoCubicSmoothAbs((void 0),t,e,n,i)},SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(t,e,n,i){return new SVGPathSegCurvetoCubicSmoothRel((void 0),t,e,n,i)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(t,e){return new SVGPathSegCurvetoQuadraticSmoothAbs((void 0),t,e)},SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(t,e){return new SVGPathSegCurvetoQuadraticSmoothRel((void 0),t,e)}),"SVGPathSegList"in t||(t.SVGPathSegList=function(t){this._pathElement=t,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},Object.defineProperty(SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},SVGPathSegList.prototype._updateListFromPathMutations=function(t){if(this._pathElement){var e=!1;t.forEach(function(t){"d"==t.attributeName&&(e=!0)}),e&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},SVGPathSegList.prototype.segmentChanged=function(t){this._writeListToPath()},SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach(function(t){t._owningPathSegList=null}),this._list=[],this._writeListToPath()},SVGPathSegList.prototype.initialize=function(t){return this._checkPathSynchronizedToList(),this._list=[t],t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype._checkValidIndex=function(t){if(isNaN(t)||t<0||t>=this.numberOfItems)throw"INDEX_SIZE_ERR"},SVGPathSegList.prototype.getItem=function(t){return this._checkPathSynchronizedToList(),this._checkValidIndex(t),this._list[t]},SVGPathSegList.prototype.insertItemBefore=function(t,e){return this._checkPathSynchronizedToList(),e>this.numberOfItems&&(e=this.numberOfItems),t._owningPathSegList&&(t=t.clone()),this._list.splice(e,0,t),t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype.replaceItem=function(t,e){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._checkValidIndex(e),this._list[e]=t,t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList.prototype.removeItem=function(t){this._checkPathSynchronizedToList(),this._checkValidIndex(t);var e=this._list[t];return this._list.splice(t,1),this._writeListToPath(),e},SVGPathSegList.prototype.appendItem=function(t){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._list.push(t),t._owningPathSegList=this,this._writeListToPath(),t},SVGPathSegList._pathSegArrayAsString=function(t){var e="",n=!0;return t.forEach(function(t){n?(n=!1,e+=t._asPathString()):e+=" "+t._asPathString()}),e},SVGPathSegList.prototype._parsePath=function(t){if(!t||0==t.length)return[];var e=this,n=function(){this.pathSegList=[]};n.prototype.appendSegment=function(t){this.pathSegList.push(t)};var i=function(t){this._string=t,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};i.prototype._isCurrentSpace=function(){var t=this._string[this._currentIndex];return t<=" "&&(" "==t||"\n"==t||"\t"==t||"\r"==t||"\f"==t)},i.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},i.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},i.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},i.prototype.peekSegmentType=function(){var t=this._string[this._currentIndex];return this._pathSegTypeFromChar(t)},i.prototype._pathSegTypeFromChar=function(t){switch(t){case"Z":case"z":return SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return SVGPathSeg.PATHSEG_LINETO_REL;case"C":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return SVGPathSeg.PATHSEG_ARC_ABS;case"a":return SVGPathSeg.PATHSEG_ARC_REL;case"H":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return SVGPathSeg.PATHSEG_UNKNOWN}},i.prototype._nextCommandHelper=function(t,e){return("+"==t||"-"==t||"."==t||t>="0"&&t<="9")&&e!=SVGPathSeg.PATHSEG_CLOSEPATH?e==SVGPathSeg.PATHSEG_MOVETO_ABS?SVGPathSeg.PATHSEG_LINETO_ABS:e==SVGPathSeg.PATHSEG_MOVETO_REL?SVGPathSeg.PATHSEG_LINETO_REL:e:SVGPathSeg.PATHSEG_UNKNOWN},i.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var t=this.peekSegmentType();return t==SVGPathSeg.PATHSEG_MOVETO_ABS||t==SVGPathSeg.PATHSEG_MOVETO_REL},i.prototype._parseNumber=function(){var t=0,e=0,n=1,i=0,r=1,a=1,o=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,r=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var s=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=s)for(var u=this._currentIndex-1,c=1;u>=s;)e+=c*(this._string.charAt(u--)-"0"),c*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)i+=(this._string.charAt(this._currentIndex++)-"0")*(n*=.1)}if(this._currentIndex!=o&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,a=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)t*=10,t+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var l=e+i;if(l*=r,t&&(l*=Math.pow(10,a*t)),o!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),l}},i.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var t=!1,e=this._string.charAt(this._currentIndex++);if("0"==e)t=!1;else{if("1"!=e)return;t=!0}return this._skipOptionalSpacesOrDelimiter(),t}},i.prototype.parseSegment=function(){var t=this._string[this._currentIndex],n=this._pathSegTypeFromChar(t);if(n==SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==SVGPathSeg.PATHSEG_UNKNOWN)return null;if(n=this._nextCommandHelper(t,this._previousCommand),n==SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=n,n){case SVGPathSeg.PATHSEG_MOVETO_REL:return new SVGPathSegMovetoRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_MOVETO_ABS:return new SVGPathSegMovetoAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_REL:return new SVGPathSegLinetoRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_ABS:return new SVGPathSegLinetoAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new SVGPathSegLinetoHorizontalRel(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new SVGPathSegLinetoHorizontalAbs(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new SVGPathSegLinetoVerticalRel(e,this._parseNumber());case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new SVGPathSegLinetoVerticalAbs(e,this._parseNumber());case SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new SVGPathSegClosePath(e);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var i={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicRel(e,i.x,i.y,i.x1,i.y1,i.x2,i.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:var i={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicAbs(e,i.x,i.y,i.x1,i.y1,i.x2,i.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:var i={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothRel(e,i.x,i.y,i.x2,i.y2);case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:var i={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoCubicSmoothAbs(e,i.x,i.y,i.x2,i.y2);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:var i={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticRel(e,i.x,i.y,i.x1,i.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:var i={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegCurvetoQuadraticAbs(e,i.x,i.y,i.x1,i.y1);case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new SVGPathSegCurvetoQuadraticSmoothRel(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new SVGPathSegCurvetoQuadraticSmoothAbs(e,this._parseNumber(),this._parseNumber());case SVGPathSeg.PATHSEG_ARC_REL:var i={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcRel(e,i.x,i.y,i.x1,i.y1,i.arcAngle,i.arcLarge,i.arcSweep);case SVGPathSeg.PATHSEG_ARC_ABS:var i={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()};return new SVGPathSegArcAbs(e,i.x,i.y,i.x1,i.y1,i.arcAngle,i.arcLarge,i.arcSweep);default:throw"Unknown path seg type."}};var r=new n,a=new i(t);if(!a.initialCommandIsMoveTo())return[];for(;a.hasMoreData();){var o=a.parseSegment();if(!o)return[];r.appendSegment(o)}return r.pathSegList})}(),"function"==typeof define&&define.amd?define("c3",["d3"],function(){return l}):"undefined"!=typeof exports&&"undefined"!=typeof module?module.exports=l:t.c3=l}(window),$(function(){"use strict";jQuery.iPanel=function(){var t={closeAll:function(n){$.each($(".ipanel-active"),function(i){var r=e($(this));r!==n&&t.close($(this),r)})},close:function(t,e){var n={};n[e]="-100%",$(t).animate(n,"slow",function(){
$(this).removeClass("ipanel-active").addClass("hidden")})},open:function(t,e){var n={};n[e]="0",$(t).removeClass("hidden").animate(n,"slow",function(){$(this).addClass("ipanel-active")})}},e=function(t){return $(t).hasClass("ipanel-bottom")?"bottom":$(t).hasClass("ipanel-left")?"left":$(t).hasClass("ipanel-right")?"right":$(t).hasClass("ipanel-top")?"top":void 0},n=function(){var n=$(".ipanel-close-button"),i=$(".ipanel-close");$("body").on("click","button ,a",function(){var n=$(this).attr("ak-toggle"),i=e(n);$(n).hasClass("hidden")?(t.closeAll(i),t.open(n,i)):t.close(n,i)}),i.on("click",function(){var n=e($(this).closest(".ipanel")),i="#"+$(this).closest(".ipanel").attr("id");t.close(i,n)}),n.on("click",function(){var n=e($(this).parent()),i="#"+$(this).parent().attr("id");t.close(i,n)}),$(".close-all-panels").hammer({prevent_default:!0}).on("swipe click",function(e){$(e.target).closest(".ipanel").length||$(e.target).closest("button").length||$(e.target).closest(".modal").length||$(e.target).closest("input").length||$(e.target).closest("a").length||t.closeAll(null)})};n()},$.iPanel()}),$(function(){"use strict";var t=new Microsoft.Maps.EntityCollection,e=new Microsoft.Maps.EntityCollection,n=new Microsoft.Maps.Map(document.getElementById("map"),{credentials:"Av9JcLdtfrLzO-_ITZjWvMgjmr-8ChIJ6kl0MBCHvJEWJwq8K2zES5Aue9umfftz",center:new Microsoft.Maps.Location(47.5,(-122.3)),customizeOverlays:!0,showBreadcrumb:!1,mapTypeId:Microsoft.Maps.MapTypeId.auto,enableSearchLogo:!1,showDashboard:!1,zoom:10});$(".zoom-in").on("click",function(){n.setView({zoom:n.getZoom()+1})}),$(".zoom-out").on("click",function(){var t=n.getZoom();t>4&&n.setView({zoom:n.getZoom()-1})}),document.getElementById("map").addEventListener("contextmenu",function(t){t.preventDefault()},!1),Microsoft.Maps.loadModule("Microsoft.Maps.Traffic",{}),Microsoft.Maps.registerModule("WKTModule","http://localhost:3000/my.eagleigps.com.local/assets/js/WKTModule.min.js"),Microsoft.Maps.loadModule("WKTModule"),Microsoft.Maps.registerModule("DrawingToolsModule","http://localhost:3000/my.eagleigps.com.local/assets/js/geofence.js"),Microsoft.Maps.loadModule("DrawingToolsModule",{callback:function(){new DrawingTools.DrawingManager(n,t,e,{toolbarContainer:document.getElementById("toolbarContainer"),events:{drawingEnded:function(t){WKTModule.Write(t);console.log(t)},drawingChanged:function(t){var e=WKTModule.Write(t);console.log(e)},drawingSelected:function(t){t.getLocations();console.log(t)},drawingErased:function(t){var e=WKTModule.Write(t);console.log(e)}}})}})}),$(function(){"use strict";var t=4e3;$.fn.nodoubletapzoom=function(){$(this).bind("touchstart",function(t){var e=t.timeStamp,n=$(this).data("lastTouch")||e,i=e-n,r=t.originalEvent.touches.length;$(this).data("lastTouch",e),!i||i>500||r>1||(t.preventDefault(),$(t.target).trigger("click"))})};var e=function(){$("body").nodoubletapzoom()},n=function(){var t=$(".offline-ui");t.removeClass("offline-ui-up").addClass("offline-ui-down")},i=function(){var t=$(".offline-ui");t.removeClass("offline-ui-down").addClass("offline-ui-up")},r=function(t){var e=$(".offline-ui-content");e.html(t)},a=function(){return 1==("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)};a()===!1&&$('[data-toggle="tooltip"]').tooltip(),setInterval($.ajax,3*t,{url:"map/getinfo",success:function(t){r(t)},error:function(t){}}),setInterval($.ajax,t,{url:"map/getdata",success:function(t){i()},error:function(t){n()}}),e()}),$(function(){"use strict";var t=[],e=function(){$(".ipanel").addClass("hidden")},n=function(t){for(var e=1;e<=300;e++)t.push({values:[e,"Truck"+e],markup:'<div class="unit-list border-bottom container-fluid" uid="'+e+'"><div class="row"><div class="col-xs-7 pad-top unit-name">Truck'+e+'</div><div class="col-xs-1"><i class="fa fa-ix fa-arrow-circle-up fa-rotate-45r" aria-hidden="true"></i></div><div class="col-xs-2 show-details"><a href="#" ak-toggle="#monitor-panel"><i class="fa fa-ix fa-bar-chart" aria-hidden="true"></i></a></div></div></a><div class="row"><div class="col-xs-7 small pad-top">2016-09-01 04:21 PM</div><div class="col-xs-4 small pad-top">'+Math.floor(100*Math.random()+1)+"  km/h</div></div></div>",active:!0});return t},i=function(t){for(var e=[],n=0;n<t.length;n++)t[n].active&&e.push(t[n].markup);return e},r=function(e){for(var n=0;n<t.length;n++){for(var r=!1,a=0;a<t[n].values.length;a++)t[n].values[a].toString().indexOf(untiSearch.value)+1&&(r=!0);t[n].active=r}$(this).next().toggle(Boolean($(this).val())),s.update(i(t))},a=$("#contentArea");if("undefined"!=typeof a&&(a.hammer().on("click tap",".unit-list",function(){$(".active-unit").removeClass("active-unit"),$(this).addClass("active-unit")}),a.hammer().on("mouseover touchstart",".unit-list",function(){var t=$(".show-details");t.hide(),$(this).find(".show-details").show()})),"undefined"!=typeof untiSearch){untiSearch.oninput=r;var o=$(".searchclear");o.toggle(Boolean($(".searchinput").val())),o.click(function(){$(this).prev().val("").focus(),$(this).hide(),r()})}$(".show-zone-toolbar").on("click",function(){$("#toolbarContainer").removeClass("hidden")}),$(".close-button").on("click",function(){$(this).parent().addClass("hidden")});var s=new Clusterize({rows:i(n(t)),scrollId:"scrollArea",contentId:"contentArea"}),u=c3.generate({bindto:"#chart",size:{height:200},oninit:function(){$(".ipanel").removeClass("hidden")},data:{columns:[["data1",30,200,100,400,150,250],["data2",50,20,10,40,15,25]]}});u.unload({ids:["data1,data2"]}),$("#contentArea").on("click",".fa-bar-chart",function(){setTimeout(function(){u.unload({ids:["data1,data2"]}),u.load({columns:[["data1",100,100,150,120,100,40,80],["data2",50,20,10,40,15,25,50,20,10,40,15,25,50,20,10,40,15,25,50,20,10,40,15,25,50,20,10,40,15,25,50,20,10,40,15,25,50,20,10,40,15,25]]})},1e3)}),e()});
//# sourceMappingURL=data:application/json;base64,
